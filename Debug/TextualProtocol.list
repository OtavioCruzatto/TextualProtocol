
TextualProtocol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a90  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004c60  08004c60  00005c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d54  08004d54  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d54  08004d54  00005d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d5c  08004d5c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d5c  08004d5c  00005d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d60  08004d60  00005d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004d64  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  2000005c  08004dc0  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08004dc0  00006494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7bc  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002666  00000000  00000000  00015848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  00017eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aeb  00000000  00000000  00018cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000228e1  00000000  00000000  000197a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120fe  00000000  00000000  0003c084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d181c  00000000  00000000  0004e182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f99e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f54  00000000  00000000  0011f9e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00123938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004c48 	.word	0x08004c48

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004c48 	.word	0x08004c48

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <appInit>:
#include "app.h"

// ======== Init =========== //
void appInit(App *app, GPIO_TypeDef* ledPort, uint16_t ledPin,
			UART_HandleTypeDef huart)
{
 80005b0:	b082      	sub	sp, #8
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b084      	sub	sp, #16
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	60f8      	str	r0, [r7, #12]
 80005ba:	60b9      	str	r1, [r7, #8]
 80005bc:	61fb      	str	r3, [r7, #28]
 80005be:	4613      	mov	r3, r2
 80005c0:	80fb      	strh	r3, [r7, #6]
	// ======== LED =========== //
	blinkLedInit(&app->blinkLed, ledPort, ledPin, PATTERN_TOGGLE_EACH_100_MS);
 80005c2:	68f8      	ldr	r0, [r7, #12]
 80005c4:	88fa      	ldrh	r2, [r7, #6]
 80005c6:	2301      	movs	r3, #1
 80005c8:	68b9      	ldr	r1, [r7, #8]
 80005ca:	f000 f820 	bl	800060e <blinkLedInit>
}
 80005ce:	bf00      	nop
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005d8:	b002      	add	sp, #8
 80005da:	4770      	bx	lr

080005dc <appExecuteBlinkLed>:

// ======== LED =========== //
void appExecuteBlinkLed(App *app)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	blinkLedExecuteBlink(&app->blinkLed);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f83a 	bl	8000660 <blinkLedExecuteBlink>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <appGetBlinkDelay>:

uint32_t appGetBlinkDelay(App *app)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	return blinkLedGetBlinkDelay(&app->blinkLed);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 f964 	bl	80008cc <blinkLedGetBlinkDelay>
 8000604:	4603      	mov	r3, r0
}
 8000606:	4618      	mov	r0, r3
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <blinkLedInit>:

#include "blinkLed.h"

// ======== Init =========== //
void blinkLedInit(BlinkLed *blinkLed, GPIO_TypeDef* ledPort, uint16_t ledPin, uint8_t blinkPattern)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b084      	sub	sp, #16
 8000612:	af00      	add	r7, sp, #0
 8000614:	60f8      	str	r0, [r7, #12]
 8000616:	60b9      	str	r1, [r7, #8]
 8000618:	4611      	mov	r1, r2
 800061a:	461a      	mov	r2, r3
 800061c:	460b      	mov	r3, r1
 800061e:	80fb      	strh	r3, [r7, #6]
 8000620:	4613      	mov	r3, r2
 8000622:	717b      	strb	r3, [r7, #5]
	blinkLed->ledPort = ledPort;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	609a      	str	r2, [r3, #8]
	blinkLed->ledPin = ledPin;
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	88fa      	ldrh	r2, [r7, #6]
 800062e:	819a      	strh	r2, [r3, #12]
	blinkLed->blinkPattern = blinkPattern;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	797a      	ldrb	r2, [r7, #5]
 8000634:	715a      	strb	r2, [r3, #5]
	blinkLed->counter = 0;
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	2200      	movs	r2, #0
 800063a:	711a      	strb	r2, [r3, #4]
	HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	6898      	ldr	r0, [r3, #8]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	899b      	ldrh	r3, [r3, #12]
 8000644:	2200      	movs	r2, #0
 8000646:	4619      	mov	r1, r3
 8000648:	f001 f89e 	bl	8001788 <HAL_GPIO_WritePin>
	blinkLedSetBlinkDelay(blinkLed, DELAY_100_MILISECONDS);
 800064c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000650:	68f8      	ldr	r0, [r7, #12]
 8000652:	f000 f947 	bl	80008e4 <blinkLedSetBlinkDelay>
}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <blinkLedExecuteBlink>:

// ======== LED =========== //
void blinkLedExecuteBlink(BlinkLed *blinkLed)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	switch (blinkLedGetBlinkPattern(blinkLed))
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f000 f964 	bl	8000936 <blinkLedGetBlinkPattern>
 800066e:	4603      	mov	r3, r0
 8000670:	2b05      	cmp	r3, #5
 8000672:	f200 8127 	bhi.w	80008c4 <blinkLedExecuteBlink+0x264>
 8000676:	a201      	add	r2, pc, #4	@ (adr r2, 800067c <blinkLedExecuteBlink+0x1c>)
 8000678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067c:	08000695 	.word	0x08000695
 8000680:	080006cd 	.word	0x080006cd
 8000684:	08000705 	.word	0x08000705
 8000688:	0800080b 	.word	0x0800080b
 800068c:	080006e9 	.word	0x080006e9
 8000690:	080006b1 	.word	0x080006b1
	{
		case PATTERN_ALWAYS_OFF:
			HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6898      	ldr	r0, [r3, #8]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	899b      	ldrh	r3, [r3, #12]
 800069c:	2200      	movs	r2, #0
 800069e:	4619      	mov	r1, r3
 80006a0:	f001 f872 	bl	8001788 <HAL_GPIO_WritePin>
			blinkLedSetBlinkDelay(blinkLed, DELAY_500_MILISECONDS);
 80006a4:	f241 3188 	movw	r1, #5000	@ 0x1388
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f000 f91b 	bl	80008e4 <blinkLedSetBlinkDelay>
			break;
 80006ae:	e109      	b.n	80008c4 <blinkLedExecuteBlink+0x264>

		case PATTERN_ALWAYS_ON:
			HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6898      	ldr	r0, [r3, #8]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	899b      	ldrh	r3, [r3, #12]
 80006b8:	2201      	movs	r2, #1
 80006ba:	4619      	mov	r1, r3
 80006bc:	f001 f864 	bl	8001788 <HAL_GPIO_WritePin>
			blinkLedSetBlinkDelay(blinkLed, DELAY_500_MILISECONDS);
 80006c0:	f241 3188 	movw	r1, #5000	@ 0x1388
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f000 f90d 	bl	80008e4 <blinkLedSetBlinkDelay>
			break;
 80006ca:	e0fb      	b.n	80008c4 <blinkLedExecuteBlink+0x264>

		case PATTERN_TOGGLE_EACH_100_MS:
			HAL_GPIO_TogglePin(blinkLed->ledPort, blinkLed->ledPin);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	689a      	ldr	r2, [r3, #8]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	899b      	ldrh	r3, [r3, #12]
 80006d4:	4619      	mov	r1, r3
 80006d6:	4610      	mov	r0, r2
 80006d8:	f001 f86f 	bl	80017ba <HAL_GPIO_TogglePin>
			blinkLedSetBlinkDelay(blinkLed, DELAY_100_MILISECONDS);
 80006dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f000 f8ff 	bl	80008e4 <blinkLedSetBlinkDelay>
			break;
 80006e6:	e0ed      	b.n	80008c4 <blinkLedExecuteBlink+0x264>

		case PATTERN_TOGGLE_EACH_250_MS:
			HAL_GPIO_TogglePin(blinkLed->ledPort, blinkLed->ledPin);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	689a      	ldr	r2, [r3, #8]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	899b      	ldrh	r3, [r3, #12]
 80006f0:	4619      	mov	r1, r3
 80006f2:	4610      	mov	r0, r2
 80006f4:	f001 f861 	bl	80017ba <HAL_GPIO_TogglePin>
			blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 80006f8:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f000 f8f1 	bl	80008e4 <blinkLedSetBlinkDelay>
			break;
 8000702:	e0df      	b.n	80008c4 <blinkLedExecuteBlink+0x264>

		case PATTERN_SHORT_SHORT_LONG:
			switch (blinkLedGetCounter(blinkLed))
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f000 f8fb 	bl	8000900 <blinkLedGetCounter>
 800070a:	4603      	mov	r3, r0
 800070c:	2b05      	cmp	r3, #5
 800070e:	f200 80d6 	bhi.w	80008be <blinkLedExecuteBlink+0x25e>
 8000712:	a201      	add	r2, pc, #4	@ (adr r2, 8000718 <blinkLedExecuteBlink+0xb8>)
 8000714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000718:	08000731 	.word	0x08000731
 800071c:	08000755 	.word	0x08000755
 8000720:	08000779 	.word	0x08000779
 8000724:	0800079d 	.word	0x0800079d
 8000728:	080007c1 	.word	0x080007c1
 800072c:	080007e5 	.word	0x080007e5
			{
				case 0:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6898      	ldr	r0, [r3, #8]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	899b      	ldrh	r3, [r3, #12]
 8000738:	2201      	movs	r2, #1
 800073a:	4619      	mov	r1, r3
 800073c:	f001 f824 	bl	8001788 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 8000740:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 f8cd 	bl	80008e4 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 1);
 800074a:	2101      	movs	r1, #1
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 f8e3 	bl	8000918 <blinkLedSetCounter>
					break;
 8000752:	e059      	b.n	8000808 <blinkLedExecuteBlink+0x1a8>

				case 1:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	6898      	ldr	r0, [r3, #8]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	899b      	ldrh	r3, [r3, #12]
 800075c:	2200      	movs	r2, #0
 800075e:	4619      	mov	r1, r3
 8000760:	f001 f812 	bl	8001788 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 8000764:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f000 f8bb 	bl	80008e4 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 2);
 800076e:	2102      	movs	r1, #2
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f000 f8d1 	bl	8000918 <blinkLedSetCounter>
					break;
 8000776:	e047      	b.n	8000808 <blinkLedExecuteBlink+0x1a8>

				case 2:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6898      	ldr	r0, [r3, #8]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	899b      	ldrh	r3, [r3, #12]
 8000780:	2201      	movs	r2, #1
 8000782:	4619      	mov	r1, r3
 8000784:	f001 f800 	bl	8001788 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 8000788:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f000 f8a9 	bl	80008e4 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 3);
 8000792:	2103      	movs	r1, #3
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 f8bf 	bl	8000918 <blinkLedSetCounter>
					break;
 800079a:	e035      	b.n	8000808 <blinkLedExecuteBlink+0x1a8>

				case 3:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6898      	ldr	r0, [r3, #8]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	899b      	ldrh	r3, [r3, #12]
 80007a4:	2200      	movs	r2, #0
 80007a6:	4619      	mov	r1, r3
 80007a8:	f000 ffee 	bl	8001788 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 80007ac:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f000 f897 	bl	80008e4 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 4);
 80007b6:	2104      	movs	r1, #4
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f000 f8ad 	bl	8000918 <blinkLedSetCounter>
					break;
 80007be:	e023      	b.n	8000808 <blinkLedExecuteBlink+0x1a8>

				case 4:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6898      	ldr	r0, [r3, #8]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	899b      	ldrh	r3, [r3, #12]
 80007c8:	2201      	movs	r2, #1
 80007ca:	4619      	mov	r1, r3
 80007cc:	f000 ffdc 	bl	8001788 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_750_MILISECONDS);
 80007d0:	f641 514c 	movw	r1, #7500	@ 0x1d4c
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f000 f885 	bl	80008e4 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 5);
 80007da:	2105      	movs	r1, #5
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f000 f89b 	bl	8000918 <blinkLedSetCounter>
					break;
 80007e2:	e011      	b.n	8000808 <blinkLedExecuteBlink+0x1a8>

				case 5:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6898      	ldr	r0, [r3, #8]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	899b      	ldrh	r3, [r3, #12]
 80007ec:	2200      	movs	r2, #0
 80007ee:	4619      	mov	r1, r3
 80007f0:	f000 ffca 	bl	8001788 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_500_MILISECONDS);
 80007f4:	f241 3188 	movw	r1, #5000	@ 0x1388
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f000 f873 	bl	80008e4 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 0);
 80007fe:	2100      	movs	r1, #0
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f000 f889 	bl	8000918 <blinkLedSetCounter>
					break;
 8000806:	bf00      	nop
			}
			break;
 8000808:	e059      	b.n	80008be <blinkLedExecuteBlink+0x25e>

		case PATTERN_HEART_BEAT:
			switch (blinkLedGetCounter(blinkLed))
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f000 f878 	bl	8000900 <blinkLedGetCounter>
 8000810:	4603      	mov	r3, r0
 8000812:	2b03      	cmp	r3, #3
 8000814:	d855      	bhi.n	80008c2 <blinkLedExecuteBlink+0x262>
 8000816:	a201      	add	r2, pc, #4	@ (adr r2, 800081c <blinkLedExecuteBlink+0x1bc>)
 8000818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800081c:	0800082d 	.word	0x0800082d
 8000820:	08000851 	.word	0x08000851
 8000824:	08000875 	.word	0x08000875
 8000828:	08000899 	.word	0x08000899
			{
				case 0:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	6898      	ldr	r0, [r3, #8]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	899b      	ldrh	r3, [r3, #12]
 8000834:	2201      	movs	r2, #1
 8000836:	4619      	mov	r1, r3
 8000838:	f000 ffa6 	bl	8001788 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_200_MILISECONDS);
 800083c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f000 f84f 	bl	80008e4 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 1);
 8000846:	2101      	movs	r1, #1
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f000 f865 	bl	8000918 <blinkLedSetCounter>
					break;
 800084e:	e035      	b.n	80008bc <blinkLedExecuteBlink+0x25c>

				case 1:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	6898      	ldr	r0, [r3, #8]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	899b      	ldrh	r3, [r3, #12]
 8000858:	2200      	movs	r2, #0
 800085a:	4619      	mov	r1, r3
 800085c:	f000 ff94 	bl	8001788 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_150_MILISECONDS);
 8000860:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f000 f83d 	bl	80008e4 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 2);
 800086a:	2102      	movs	r1, #2
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f000 f853 	bl	8000918 <blinkLedSetCounter>
					break;
 8000872:	e023      	b.n	80008bc <blinkLedExecuteBlink+0x25c>

				case 2:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6898      	ldr	r0, [r3, #8]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	899b      	ldrh	r3, [r3, #12]
 800087c:	2201      	movs	r2, #1
 800087e:	4619      	mov	r1, r3
 8000880:	f000 ff82 	bl	8001788 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_500_MILISECONDS);
 8000884:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f000 f82b 	bl	80008e4 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 3);
 800088e:	2103      	movs	r1, #3
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f000 f841 	bl	8000918 <blinkLedSetCounter>
					break;
 8000896:	e011      	b.n	80008bc <blinkLedExecuteBlink+0x25c>

				case 3:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6898      	ldr	r0, [r3, #8]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	899b      	ldrh	r3, [r3, #12]
 80008a0:	2200      	movs	r2, #0
 80008a2:	4619      	mov	r1, r3
 80008a4:	f000 ff70 	bl	8001788 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_400_MILISECONDS);
 80008a8:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f000 f819 	bl	80008e4 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 0);
 80008b2:	2100      	movs	r1, #0
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f000 f82f 	bl	8000918 <blinkLedSetCounter>
					break;
 80008ba:	bf00      	nop
			}
			break;
 80008bc:	e001      	b.n	80008c2 <blinkLedExecuteBlink+0x262>
			break;
 80008be:	bf00      	nop
 80008c0:	e000      	b.n	80008c4 <blinkLedExecuteBlink+0x264>
			break;
 80008c2:	bf00      	nop
	}
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <blinkLedGetBlinkDelay>:

// ======= Getters and Setters ======== //
uint32_t blinkLedGetBlinkDelay(BlinkLed *blinkLed)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	return blinkLed->blinkDelay;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <blinkLedSetBlinkDelay>:

void blinkLedSetBlinkDelay(BlinkLed *blinkLed, uint32_t blinkDelay)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
	blinkLed->blinkDelay = blinkDelay;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	683a      	ldr	r2, [r7, #0]
 80008f2:	601a      	str	r2, [r3, #0]
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <blinkLedGetCounter>:

uint8_t blinkLedGetCounter(BlinkLed *blinkLed)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	return blinkLed->counter;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	791b      	ldrb	r3, [r3, #4]
}
 800090c:	4618      	mov	r0, r3
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <blinkLedSetCounter>:

void blinkLedSetCounter(BlinkLed *blinkLed, uint8_t counter)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	70fb      	strb	r3, [r7, #3]
	blinkLed->counter = counter;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	78fa      	ldrb	r2, [r7, #3]
 8000928:	711a      	strb	r2, [r3, #4]
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <blinkLedGetBlinkPattern>:

uint8_t blinkLedGetBlinkPattern(BlinkLed *blinkLed)
{
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
	return blinkLed->blinkPattern;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	795b      	ldrb	r3, [r3, #5]
}
 8000942:	4618      	mov	r0, r3
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
	...

08000950 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Timer interrupt handling (100us)
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	if (htim == &htim9)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a0a      	ldr	r2, [pc, #40]	@ (8000984 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d10b      	bne.n	8000978 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		sendDataDelay++;
 8000960:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	3301      	adds	r3, #1
 8000966:	b29a      	uxth	r2, r3
 8000968:	4b07      	ldr	r3, [pc, #28]	@ (8000988 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800096a:	801a      	strh	r2, [r3, #0]
		blinkLedDelay++;
 800096c:	4b07      	ldr	r3, [pc, #28]	@ (800098c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	3301      	adds	r3, #1
 8000972:	b29a      	uxth	r2, r3
 8000974:	4b05      	ldr	r3, [pc, #20]	@ (800098c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000976:	801a      	strh	r2, [r3, #0]
	}
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	20000078 	.word	0x20000078
 8000988:	2000010a 	.word	0x2000010a
 800098c:	2000010c 	.word	0x2000010c

08000990 <HAL_UART_RxCpltCallback>:

/*
 * Interrupt for UART RX
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a11      	ldr	r2, [pc, #68]	@ (80009e0 <HAL_UART_RxCpltCallback+0x50>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d11a      	bne.n	80009d6 <HAL_UART_RxCpltCallback+0x46>
	{
		HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 80009a0:	2201      	movs	r2, #1
 80009a2:	4910      	ldr	r1, [pc, #64]	@ (80009e4 <HAL_UART_RxCpltCallback+0x54>)
 80009a4:	480e      	ldr	r0, [pc, #56]	@ (80009e0 <HAL_UART_RxCpltCallback+0x50>)
 80009a6:	f002 f9aa 	bl	8002cfe <HAL_UART_Receive_IT>
		if (textualProtocolGetEchoEnable(&textProt) == TRUE)
 80009aa:	480f      	ldr	r0, [pc, #60]	@ (80009e8 <HAL_UART_RxCpltCallback+0x58>)
 80009ac:	f003 fca0 	bl	80042f0 <textualProtocolGetEchoEnable>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d106      	bne.n	80009c4 <HAL_UART_RxCpltCallback+0x34>
		{
			HAL_UART_Transmit(&huart2, &receivedByte, 1, HAL_MAX_DELAY);
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	2201      	movs	r2, #1
 80009bc:	4909      	ldr	r1, [pc, #36]	@ (80009e4 <HAL_UART_RxCpltCallback+0x54>)
 80009be:	4808      	ldr	r0, [pc, #32]	@ (80009e0 <HAL_UART_RxCpltCallback+0x50>)
 80009c0:	f002 f912 	bl	8002be8 <HAL_UART_Transmit>
		}
		textualProtocolAppendByte(&textProt, receivedByte);
 80009c4:	4b07      	ldr	r3, [pc, #28]	@ (80009e4 <HAL_UART_RxCpltCallback+0x54>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	4619      	mov	r1, r3
 80009ca:	4807      	ldr	r0, [pc, #28]	@ (80009e8 <HAL_UART_RxCpltCallback+0x58>)
 80009cc:	f003 f939 	bl	8003c42 <textualProtocolAppendByte>
		receivedByte = 0x00;
 80009d0:	4b04      	ldr	r3, [pc, #16]	@ (80009e4 <HAL_UART_RxCpltCallback+0x54>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]
	}
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200000c0 	.word	0x200000c0
 80009e4:	20000108 	.word	0x20000108
 80009e8:	20000110 	.word	0x20000110

080009ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b093      	sub	sp, #76	@ 0x4c
 80009f0:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f2:	f000 fb1f 	bl	8001034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f6:	f000 f899 	bl	8000b2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fa:	f000 f96d 	bl	8000cd8 <MX_GPIO_Init>
  MX_TIM9_Init();
 80009fe:	f000 f907 	bl	8000c10 <MX_TIM9_Init>
  MX_USART2_UART_Init();
 8000a02:	f000 f93f 	bl	8000c84 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim9);
 8000a06:	4840      	ldr	r0, [pc, #256]	@ (8000b08 <main+0x11c>)
 8000a08:	f001 fcf4 	bl	80023f4 <HAL_TIM_Base_Start_IT>
  textualProtocolInit(&textProt, '$', ',', huart2);
 8000a0c:	4c3f      	ldr	r4, [pc, #252]	@ (8000b0c <main+0x120>)
 8000a0e:	4668      	mov	r0, sp
 8000a10:	1d23      	adds	r3, r4, #4
 8000a12:	2244      	movs	r2, #68	@ 0x44
 8000a14:	4619      	mov	r1, r3
 8000a16:	f003 fccb 	bl	80043b0 <memcpy>
 8000a1a:	6823      	ldr	r3, [r4, #0]
 8000a1c:	222c      	movs	r2, #44	@ 0x2c
 8000a1e:	2124      	movs	r1, #36	@ 0x24
 8000a20:	483b      	ldr	r0, [pc, #236]	@ (8000b10 <main+0x124>)
 8000a22:	f003 f8e7 	bl	8003bf4 <textualProtocolInit>
  appInit(&app, LED_GPIO_Port, LED_Pin, huart2);
 8000a26:	4c39      	ldr	r4, [pc, #228]	@ (8000b0c <main+0x120>)
 8000a28:	4668      	mov	r0, sp
 8000a2a:	1d23      	adds	r3, r4, #4
 8000a2c:	2244      	movs	r2, #68	@ 0x44
 8000a2e:	4619      	mov	r1, r3
 8000a30:	f003 fcbe 	bl	80043b0 <memcpy>
 8000a34:	6823      	ldr	r3, [r4, #0]
 8000a36:	2220      	movs	r2, #32
 8000a38:	4936      	ldr	r1, [pc, #216]	@ (8000b14 <main+0x128>)
 8000a3a:	4837      	ldr	r0, [pc, #220]	@ (8000b18 <main+0x12c>)
 8000a3c:	f7ff fdb8 	bl	80005b0 <appInit>
  HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 8000a40:	2201      	movs	r2, #1
 8000a42:	4936      	ldr	r1, [pc, #216]	@ (8000b1c <main+0x130>)
 8000a44:	4831      	ldr	r0, [pc, #196]	@ (8000b0c <main+0x120>)
 8000a46:	f002 f95a 	bl	8002cfe <HAL_UART_Receive_IT>

	  /* ============================================================================= */

	  /****************************** STATE MACHINE START ******************************/

	  switch (stateMachine)
 8000a4a:	4b35      	ldr	r3, [pc, #212]	@ (8000b20 <main+0x134>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b05      	cmp	r3, #5
 8000a50:	d854      	bhi.n	8000afc <main+0x110>
 8000a52:	a201      	add	r2, pc, #4	@ (adr r2, 8000a58 <main+0x6c>)
 8000a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a58:	08000a71 	.word	0x08000a71
 8000a5c:	08000a97 	.word	0x08000a97
 8000a60:	08000ab3 	.word	0x08000ab3
 8000a64:	08000acd 	.word	0x08000acd
 8000a68:	08000aed 	.word	0x08000aed
 8000a6c:	08000af5 	.word	0x08000af5
	  {
		  case 0:
			  if (blinkLedDelay >= appGetBlinkDelay(&app))
 8000a70:	4b2c      	ldr	r3, [pc, #176]	@ (8000b24 <main+0x138>)
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	461c      	mov	r4, r3
 8000a76:	4828      	ldr	r0, [pc, #160]	@ (8000b18 <main+0x12c>)
 8000a78:	f7ff fdbc 	bl	80005f4 <appGetBlinkDelay>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	429c      	cmp	r4, r3
 8000a80:	d305      	bcc.n	8000a8e <main+0xa2>
			  {
				  appExecuteBlinkLed(&app);
 8000a82:	4825      	ldr	r0, [pc, #148]	@ (8000b18 <main+0x12c>)
 8000a84:	f7ff fdaa 	bl	80005dc <appExecuteBlinkLed>
				  blinkLedDelay = 0;
 8000a88:	4b26      	ldr	r3, [pc, #152]	@ (8000b24 <main+0x138>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 1;
 8000a8e:	4b24      	ldr	r3, [pc, #144]	@ (8000b20 <main+0x134>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	701a      	strb	r2, [r3, #0]
			  break;
 8000a94:	e037      	b.n	8000b06 <main+0x11a>

		  case 1:
			  if (textProt.enableDecoding == TRUE)
 8000a96:	4b1e      	ldr	r3, [pc, #120]	@ (8000b10 <main+0x124>)
 8000a98:	795b      	ldrb	r3, [r3, #5]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d105      	bne.n	8000aaa <main+0xbe>
			  {
				  textProt.enableDecoding = FALSE;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b10 <main+0x124>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	715a      	strb	r2, [r3, #5]
				  textualProtocolDecode(&textProt);
 8000aa4:	481a      	ldr	r0, [pc, #104]	@ (8000b10 <main+0x124>)
 8000aa6:	f003 fa41 	bl	8003f2c <textualProtocolDecode>
			  }
			  stateMachine = 2;
 8000aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8000b20 <main+0x134>)
 8000aac:	2202      	movs	r2, #2
 8000aae:	701a      	strb	r2, [r3, #0]
			  break;
 8000ab0:	e029      	b.n	8000b06 <main+0x11a>

		  case 2:
			  if (sendDataDelay >= DELAY_5000_MILISECONDS)
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b28 <main+0x13c>)
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d902      	bls.n	8000ac4 <main+0xd8>
			  {
				  sendDataDelay = 0;
 8000abe:	4b1a      	ldr	r3, [pc, #104]	@ (8000b28 <main+0x13c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 3;
 8000ac4:	4b16      	ldr	r3, [pc, #88]	@ (8000b20 <main+0x134>)
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	701a      	strb	r2, [r3, #0]
			  break;
 8000aca:	e01c      	b.n	8000b06 <main+0x11a>

		  case 3:
			  stateMachine = 4;
 8000acc:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <main+0x134>)
 8000ace:	2204      	movs	r2, #4
 8000ad0:	701a      	strb	r2, [r3, #0]
			  if (textProt.textualProtocolRxStatus == VALID_RX_TEXTUAL_PROTOCOL)
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <main+0x124>)
 8000ad4:	f893 31da 	ldrb.w	r3, [r3, #474]	@ 0x1da
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d113      	bne.n	8000b04 <main+0x118>
			  {
				  textualProtocolPrintCurrentData(&textProt);
 8000adc:	480c      	ldr	r0, [pc, #48]	@ (8000b10 <main+0x124>)
 8000ade:	f003 fb19 	bl	8004114 <textualProtocolPrintCurrentData>
				  textualProtocolClear(&textProt, CLEAR_ALL);
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	480a      	ldr	r0, [pc, #40]	@ (8000b10 <main+0x124>)
 8000ae6:	f003 f8ff 	bl	8003ce8 <textualProtocolClear>
			  }
			  break;
 8000aea:	e00b      	b.n	8000b04 <main+0x118>

		  case 4:
			  stateMachine = 5;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <main+0x134>)
 8000aee:	2205      	movs	r2, #5
 8000af0:	701a      	strb	r2, [r3, #0]
			  break;
 8000af2:	e008      	b.n	8000b06 <main+0x11a>

		  case 5:
			  stateMachine = 0;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <main+0x134>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
			  break;
 8000afa:	e004      	b.n	8000b06 <main+0x11a>

		  default:
			  stateMachine = 0;
 8000afc:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <main+0x134>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
			  break;
 8000b02:	e000      	b.n	8000b06 <main+0x11a>
			  break;
 8000b04:	bf00      	nop
	  switch (stateMachine)
 8000b06:	e7a0      	b.n	8000a4a <main+0x5e>
 8000b08:	20000078 	.word	0x20000078
 8000b0c:	200000c0 	.word	0x200000c0
 8000b10:	20000110 	.word	0x20000110
 8000b14:	40020000 	.word	0x40020000
 8000b18:	20000334 	.word	0x20000334
 8000b1c:	20000108 	.word	0x20000108
 8000b20:	20000109 	.word	0x20000109
 8000b24:	2000010c 	.word	0x2000010c
 8000b28:	2000010a 	.word	0x2000010a

08000b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b094      	sub	sp, #80	@ 0x50
 8000b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	2234      	movs	r2, #52	@ 0x34
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f003 fc04 	bl	8004348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b40:	f107 0308 	add.w	r3, r7, #8
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	4b2c      	ldr	r3, [pc, #176]	@ (8000c08 <SystemClock_Config+0xdc>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b58:	4a2b      	ldr	r2, [pc, #172]	@ (8000c08 <SystemClock_Config+0xdc>)
 8000b5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b60:	4b29      	ldr	r3, [pc, #164]	@ (8000c08 <SystemClock_Config+0xdc>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	4b26      	ldr	r3, [pc, #152]	@ (8000c0c <SystemClock_Config+0xe0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a25      	ldr	r2, [pc, #148]	@ (8000c0c <SystemClock_Config+0xe0>)
 8000b76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b7a:	6013      	str	r3, [r2, #0]
 8000b7c:	4b23      	ldr	r3, [pc, #140]	@ (8000c0c <SystemClock_Config+0xe0>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b90:	2310      	movs	r3, #16
 8000b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b94:	2302      	movs	r3, #2
 8000b96:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b9c:	2308      	movs	r3, #8
 8000b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000ba0:	23b4      	movs	r3, #180	@ 0xb4
 8000ba2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bac:	2302      	movs	r3, #2
 8000bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f001 f92f 	bl	8001e18 <HAL_RCC_OscConfig>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bc0:	f000 f8dc 	bl	8000d7c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bc4:	f000 fe14 	bl	80017f0 <HAL_PWREx_EnableOverDrive>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000bce:	f000 f8d5 	bl	8000d7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd2:	230f      	movs	r3, #15
 8000bd4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bde:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000be2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000be4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000be8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	2105      	movs	r1, #5
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 fe4d 	bl	8001890 <HAL_RCC_ClockConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000bfc:	f000 f8be 	bl	8000d7c <Error_Handler>
  }
}
 8000c00:	bf00      	nop
 8000c02:	3750      	adds	r7, #80	@ 0x50
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40007000 	.word	0x40007000

08000c10 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c16:	463b      	mov	r3, r7
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000c22:	4b16      	ldr	r3, [pc, #88]	@ (8000c7c <MX_TIM9_Init+0x6c>)
 8000c24:	4a16      	ldr	r2, [pc, #88]	@ (8000c80 <MX_TIM9_Init+0x70>)
 8000c26:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 5-1;
 8000c28:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <MX_TIM9_Init+0x6c>)
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2e:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <MX_TIM9_Init+0x6c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 3665;
 8000c34:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <MX_TIM9_Init+0x6c>)
 8000c36:	f640 6251 	movw	r2, #3665	@ 0xe51
 8000c3a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <MX_TIM9_Init+0x6c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <MX_TIM9_Init+0x6c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000c48:	480c      	ldr	r0, [pc, #48]	@ (8000c7c <MX_TIM9_Init+0x6c>)
 8000c4a:	f001 fb83 	bl	8002354 <HAL_TIM_Base_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8000c54:	f000 f892 	bl	8000d7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c5c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000c5e:	463b      	mov	r3, r7
 8000c60:	4619      	mov	r1, r3
 8000c62:	4806      	ldr	r0, [pc, #24]	@ (8000c7c <MX_TIM9_Init+0x6c>)
 8000c64:	f001 fd26 	bl	80026b4 <HAL_TIM_ConfigClockSource>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8000c6e:	f000 f885 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000078 	.word	0x20000078
 8000c80:	40014000 	.word	0x40014000

08000c84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c88:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	@ (8000cd4 <MX_USART2_UART_Init+0x50>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000c90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000caa:	220c      	movs	r2, #12
 8000cac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cae:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cba:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000cbc:	f001 ff44 	bl	8002b48 <HAL_UART_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cc6:	f000 f859 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200000c0 	.word	0x200000c0
 8000cd4:	40004400 	.word	0x40004400

08000cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d70 <MX_GPIO_Init+0x98>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a1e      	ldr	r2, [pc, #120]	@ (8000d70 <MX_GPIO_Init+0x98>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000d70 <MX_GPIO_Init+0x98>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b18      	ldr	r3, [pc, #96]	@ (8000d70 <MX_GPIO_Init+0x98>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a17      	ldr	r2, [pc, #92]	@ (8000d70 <MX_GPIO_Init+0x98>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <MX_GPIO_Init+0x98>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2120      	movs	r1, #32
 8000d2a:	4812      	ldr	r0, [pc, #72]	@ (8000d74 <MX_GPIO_Init+0x9c>)
 8000d2c:	f000 fd2c 	bl	8001788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000d30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 030c 	add.w	r3, r7, #12
 8000d42:	4619      	mov	r1, r3
 8000d44:	480c      	ldr	r0, [pc, #48]	@ (8000d78 <MX_GPIO_Init+0xa0>)
 8000d46:	f000 fb8b 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d4a:	2320      	movs	r3, #32
 8000d4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 030c 	add.w	r3, r7, #12
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4804      	ldr	r0, [pc, #16]	@ (8000d74 <MX_GPIO_Init+0x9c>)
 8000d62:	f000 fb7d 	bl	8001460 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d66:	bf00      	nop
 8000d68:	3720      	adds	r7, #32
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020000 	.word	0x40020000
 8000d78:	40020800 	.word	0x40020800

08000d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
}
 8000d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <Error_Handler+0x8>

08000d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	4b10      	ldr	r3, [pc, #64]	@ (8000dd4 <HAL_MspInit+0x4c>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d96:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd4 <HAL_MspInit+0x4c>)
 8000d98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd4 <HAL_MspInit+0x4c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]
 8000dae:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <HAL_MspInit+0x4c>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db2:	4a08      	ldr	r2, [pc, #32]	@ (8000dd4 <HAL_MspInit+0x4c>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dba:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <HAL_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800

08000dd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0e      	ldr	r2, [pc, #56]	@ (8000e20 <HAL_TIM_Base_MspInit+0x48>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d115      	bne.n	8000e16 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	4b0d      	ldr	r3, [pc, #52]	@ (8000e24 <HAL_TIM_Base_MspInit+0x4c>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df2:	4a0c      	ldr	r2, [pc, #48]	@ (8000e24 <HAL_TIM_Base_MspInit+0x4c>)
 8000df4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <HAL_TIM_Base_MspInit+0x4c>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2018      	movs	r0, #24
 8000e0c:	f000 fa5f 	bl	80012ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000e10:	2018      	movs	r0, #24
 8000e12:	f000 fa78 	bl	8001306 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM9_MspInit 1 */

  }

}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40014000 	.word	0x40014000
 8000e24:	40023800 	.word	0x40023800

08000e28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	@ 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a1d      	ldr	r2, [pc, #116]	@ (8000ebc <HAL_UART_MspInit+0x94>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d133      	bne.n	8000eb2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec0 <HAL_UART_MspInit+0x98>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e52:	4a1b      	ldr	r2, [pc, #108]	@ (8000ec0 <HAL_UART_MspInit+0x98>)
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ec0 <HAL_UART_MspInit+0x98>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <HAL_UART_MspInit+0x98>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	4a14      	ldr	r2, [pc, #80]	@ (8000ec0 <HAL_UART_MspInit+0x98>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e76:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <HAL_UART_MspInit+0x98>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e82:	230c      	movs	r3, #12
 8000e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e92:	2307      	movs	r3, #7
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4809      	ldr	r0, [pc, #36]	@ (8000ec4 <HAL_UART_MspInit+0x9c>)
 8000e9e:	f000 fadf 	bl	8001460 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2026      	movs	r0, #38	@ 0x26
 8000ea8:	f000 fa11 	bl	80012ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000eac:	2026      	movs	r0, #38	@ 0x26
 8000eae:	f000 fa2a 	bl	8001306 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3728      	adds	r7, #40	@ 0x28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40004400 	.word	0x40004400
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020000 	.word	0x40020000

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <NMI_Handler+0x4>

08000ed0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <MemManage_Handler+0x4>

08000ee0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <BusFault_Handler+0x4>

08000ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <UsageFault_Handler+0x4>

08000ef0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1e:	f000 f8db 	bl	80010d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000f2c:	4802      	ldr	r0, [pc, #8]	@ (8000f38 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000f2e:	f001 fad1 	bl	80024d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000078 	.word	0x20000078

08000f3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f40:	4802      	ldr	r0, [pc, #8]	@ (8000f4c <USART2_IRQHandler+0x10>)
 8000f42:	f001 ff01 	bl	8002d48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200000c0 	.word	0x200000c0

08000f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f58:	4a14      	ldr	r2, [pc, #80]	@ (8000fac <_sbrk+0x5c>)
 8000f5a:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <_sbrk+0x60>)
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f64:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d102      	bne.n	8000f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	@ (8000fb4 <_sbrk+0x64>)
 8000f6e:	4a12      	ldr	r2, [pc, #72]	@ (8000fb8 <_sbrk+0x68>)
 8000f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f72:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d207      	bcs.n	8000f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f80:	f003 f9ea 	bl	8004358 <__errno>
 8000f84:	4603      	mov	r3, r0
 8000f86:	220c      	movs	r2, #12
 8000f88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	e009      	b.n	8000fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f90:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <_sbrk+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f96:	4b07      	ldr	r3, [pc, #28]	@ (8000fb4 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	4a05      	ldr	r2, [pc, #20]	@ (8000fb4 <_sbrk+0x64>)
 8000fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20020000 	.word	0x20020000
 8000fb0:	00000400 	.word	0x00000400
 8000fb4:	20000344 	.word	0x20000344
 8000fb8:	20000498 	.word	0x20000498

08000fbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <SystemInit+0x20>)
 8000fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fc6:	4a05      	ldr	r2, [pc, #20]	@ (8000fdc <SystemInit+0x20>)
 8000fc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fe0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001018 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fe4:	f7ff ffea 	bl	8000fbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe8:	480c      	ldr	r0, [pc, #48]	@ (800101c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fea:	490d      	ldr	r1, [pc, #52]	@ (8001020 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fec:	4a0d      	ldr	r2, [pc, #52]	@ (8001024 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001000:	4c0a      	ldr	r4, [pc, #40]	@ (800102c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800100e:	f003 f9a9 	bl	8004364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001012:	f7ff fceb 	bl	80009ec <main>
  bx  lr    
 8001016:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001018:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800101c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001020:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001024:	08004d64 	.word	0x08004d64
  ldr r2, =_sbss
 8001028:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800102c:	20000494 	.word	0x20000494

08001030 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC_IRQHandler>
	...

08001034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001038:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0d      	ldr	r2, [pc, #52]	@ (8001074 <HAL_Init+0x40>)
 800103e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001042:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001044:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0a      	ldr	r2, [pc, #40]	@ (8001074 <HAL_Init+0x40>)
 800104a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800104e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a07      	ldr	r2, [pc, #28]	@ (8001074 <HAL_Init+0x40>)
 8001056:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800105a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105c:	2003      	movs	r0, #3
 800105e:	f000 f92b 	bl	80012b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001062:	200f      	movs	r0, #15
 8001064:	f000 f808 	bl	8001078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001068:	f7ff fe8e 	bl	8000d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023c00 	.word	0x40023c00

08001078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001080:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <HAL_InitTick+0x54>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <HAL_InitTick+0x58>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800108e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001092:	fbb2 f3f3 	udiv	r3, r2, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f943 	bl	8001322 <HAL_SYSTICK_Config>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00e      	b.n	80010c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b0f      	cmp	r3, #15
 80010aa:	d80a      	bhi.n	80010c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ac:	2200      	movs	r2, #0
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f000 f90b 	bl	80012ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b8:	4a06      	ldr	r2, [pc, #24]	@ (80010d4 <HAL_InitTick+0x5c>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	e000      	b.n	80010c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000000 	.word	0x20000000
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000004 	.word	0x20000004

080010d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010dc:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <HAL_IncTick+0x20>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_IncTick+0x24>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	4a04      	ldr	r2, [pc, #16]	@ (80010fc <HAL_IncTick+0x24>)
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000008 	.word	0x20000008
 80010fc:	20000348 	.word	0x20000348

08001100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return uwTick;
 8001104:	4b03      	ldr	r3, [pc, #12]	@ (8001114 <HAL_GetTick+0x14>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000348 	.word	0x20000348

08001118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001128:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001140:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114a:	4a04      	ldr	r2, [pc, #16]	@ (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60d3      	str	r3, [r2, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001164:	4b04      	ldr	r3, [pc, #16]	@ (8001178 <__NVIC_GetPriorityGrouping+0x18>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f003 0307 	and.w	r3, r3, #7
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	2b00      	cmp	r3, #0
 800118c:	db0b      	blt.n	80011a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	f003 021f 	and.w	r2, r3, #31
 8001194:	4907      	ldr	r1, [pc, #28]	@ (80011b4 <__NVIC_EnableIRQ+0x38>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	095b      	lsrs	r3, r3, #5
 800119c:	2001      	movs	r0, #1
 800119e:	fa00 f202 	lsl.w	r2, r0, r2
 80011a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000e100 	.word	0xe000e100

080011b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db0a      	blt.n	80011e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	490c      	ldr	r1, [pc, #48]	@ (8001204 <__NVIC_SetPriority+0x4c>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	0112      	lsls	r2, r2, #4
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	440b      	add	r3, r1
 80011dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e0:	e00a      	b.n	80011f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4908      	ldr	r1, [pc, #32]	@ (8001208 <__NVIC_SetPriority+0x50>)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	3b04      	subs	r3, #4
 80011f0:	0112      	lsls	r2, r2, #4
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	440b      	add	r3, r1
 80011f6:	761a      	strb	r2, [r3, #24]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000e100 	.word	0xe000e100
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	@ 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f1c3 0307 	rsb	r3, r3, #7
 8001226:	2b04      	cmp	r3, #4
 8001228:	bf28      	it	cs
 800122a:	2304      	movcs	r3, #4
 800122c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3304      	adds	r3, #4
 8001232:	2b06      	cmp	r3, #6
 8001234:	d902      	bls.n	800123c <NVIC_EncodePriority+0x30>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3b03      	subs	r3, #3
 800123a:	e000      	b.n	800123e <NVIC_EncodePriority+0x32>
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	f04f 32ff 	mov.w	r2, #4294967295
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43d9      	mvns	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	4313      	orrs	r3, r2
         );
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	@ 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001284:	d301      	bcc.n	800128a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001286:	2301      	movs	r3, #1
 8001288:	e00f      	b.n	80012aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800128a:	4a0a      	ldr	r2, [pc, #40]	@ (80012b4 <SysTick_Config+0x40>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001292:	210f      	movs	r1, #15
 8001294:	f04f 30ff 	mov.w	r0, #4294967295
 8001298:	f7ff ff8e 	bl	80011b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800129c:	4b05      	ldr	r3, [pc, #20]	@ (80012b4 <SysTick_Config+0x40>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012a2:	4b04      	ldr	r3, [pc, #16]	@ (80012b4 <SysTick_Config+0x40>)
 80012a4:	2207      	movs	r2, #7
 80012a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	e000e010 	.word	0xe000e010

080012b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ff29 	bl	8001118 <__NVIC_SetPriorityGrouping>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b086      	sub	sp, #24
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
 80012da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e0:	f7ff ff3e 	bl	8001160 <__NVIC_GetPriorityGrouping>
 80012e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	68b9      	ldr	r1, [r7, #8]
 80012ea:	6978      	ldr	r0, [r7, #20]
 80012ec:	f7ff ff8e 	bl	800120c <NVIC_EncodePriority>
 80012f0:	4602      	mov	r2, r0
 80012f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff5d 	bl	80011b8 <__NVIC_SetPriority>
}
 80012fe:	bf00      	nop
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	4603      	mov	r3, r0
 800130e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff31 	bl	800117c <__NVIC_EnableIRQ>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ffa2 	bl	8001274 <SysTick_Config>
 8001330:	4603      	mov	r3, r0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b084      	sub	sp, #16
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001346:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001348:	f7ff feda 	bl	8001100 <HAL_GetTick>
 800134c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d008      	beq.n	800136c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2280      	movs	r2, #128	@ 0x80
 800135e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e052      	b.n	8001412 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0216 	bic.w	r2, r2, #22
 800137a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	695a      	ldr	r2, [r3, #20]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800138a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001390:	2b00      	cmp	r3, #0
 8001392:	d103      	bne.n	800139c <HAL_DMA_Abort+0x62>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001398:	2b00      	cmp	r3, #0
 800139a:	d007      	beq.n	80013ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0208 	bic.w	r2, r2, #8
 80013aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0201 	bic.w	r2, r2, #1
 80013ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013bc:	e013      	b.n	80013e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013be:	f7ff fe9f 	bl	8001100 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b05      	cmp	r3, #5
 80013ca:	d90c      	bls.n	80013e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2220      	movs	r2, #32
 80013d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2203      	movs	r2, #3
 80013d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e015      	b.n	8001412 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1e4      	bne.n	80013be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013f8:	223f      	movs	r2, #63	@ 0x3f
 80013fa:	409a      	lsls	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d004      	beq.n	8001438 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2280      	movs	r2, #128	@ 0x80
 8001432:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e00c      	b.n	8001452 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2205      	movs	r2, #5
 800143c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 0201 	bic.w	r2, r2, #1
 800144e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	@ 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001472:	2300      	movs	r3, #0
 8001474:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
 800147a:	e165      	b.n	8001748 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800147c:	2201      	movs	r2, #1
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	429a      	cmp	r2, r3
 8001496:	f040 8154 	bne.w	8001742 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d005      	beq.n	80014b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d130      	bne.n	8001514 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	2203      	movs	r2, #3
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014e8:	2201      	movs	r2, #1
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	f003 0201 	and.w	r2, r3, #1
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	2b03      	cmp	r3, #3
 800151e:	d017      	beq.n	8001550 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	2203      	movs	r2, #3
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d123      	bne.n	80015a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	08da      	lsrs	r2, r3, #3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3208      	adds	r2, #8
 8001564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	220f      	movs	r2, #15
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	691a      	ldr	r2, [r3, #16]
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	08da      	lsrs	r2, r3, #3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3208      	adds	r2, #8
 800159e:	69b9      	ldr	r1, [r7, #24]
 80015a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	2203      	movs	r2, #3
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 0203 	and.w	r2, r3, #3
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 80ae 	beq.w	8001742 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001760 <HAL_GPIO_Init+0x300>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ee:	4a5c      	ldr	r2, [pc, #368]	@ (8001760 <HAL_GPIO_Init+0x300>)
 80015f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001760 <HAL_GPIO_Init+0x300>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001602:	4a58      	ldr	r2, [pc, #352]	@ (8001764 <HAL_GPIO_Init+0x304>)
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	089b      	lsrs	r3, r3, #2
 8001608:	3302      	adds	r3, #2
 800160a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	220f      	movs	r2, #15
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a4f      	ldr	r2, [pc, #316]	@ (8001768 <HAL_GPIO_Init+0x308>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d025      	beq.n	800167a <HAL_GPIO_Init+0x21a>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a4e      	ldr	r2, [pc, #312]	@ (800176c <HAL_GPIO_Init+0x30c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d01f      	beq.n	8001676 <HAL_GPIO_Init+0x216>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a4d      	ldr	r2, [pc, #308]	@ (8001770 <HAL_GPIO_Init+0x310>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d019      	beq.n	8001672 <HAL_GPIO_Init+0x212>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a4c      	ldr	r2, [pc, #304]	@ (8001774 <HAL_GPIO_Init+0x314>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d013      	beq.n	800166e <HAL_GPIO_Init+0x20e>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a4b      	ldr	r2, [pc, #300]	@ (8001778 <HAL_GPIO_Init+0x318>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d00d      	beq.n	800166a <HAL_GPIO_Init+0x20a>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a4a      	ldr	r2, [pc, #296]	@ (800177c <HAL_GPIO_Init+0x31c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d007      	beq.n	8001666 <HAL_GPIO_Init+0x206>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a49      	ldr	r2, [pc, #292]	@ (8001780 <HAL_GPIO_Init+0x320>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d101      	bne.n	8001662 <HAL_GPIO_Init+0x202>
 800165e:	2306      	movs	r3, #6
 8001660:	e00c      	b.n	800167c <HAL_GPIO_Init+0x21c>
 8001662:	2307      	movs	r3, #7
 8001664:	e00a      	b.n	800167c <HAL_GPIO_Init+0x21c>
 8001666:	2305      	movs	r3, #5
 8001668:	e008      	b.n	800167c <HAL_GPIO_Init+0x21c>
 800166a:	2304      	movs	r3, #4
 800166c:	e006      	b.n	800167c <HAL_GPIO_Init+0x21c>
 800166e:	2303      	movs	r3, #3
 8001670:	e004      	b.n	800167c <HAL_GPIO_Init+0x21c>
 8001672:	2302      	movs	r3, #2
 8001674:	e002      	b.n	800167c <HAL_GPIO_Init+0x21c>
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <HAL_GPIO_Init+0x21c>
 800167a:	2300      	movs	r3, #0
 800167c:	69fa      	ldr	r2, [r7, #28]
 800167e:	f002 0203 	and.w	r2, r2, #3
 8001682:	0092      	lsls	r2, r2, #2
 8001684:	4093      	lsls	r3, r2
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800168c:	4935      	ldr	r1, [pc, #212]	@ (8001764 <HAL_GPIO_Init+0x304>)
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	089b      	lsrs	r3, r3, #2
 8001692:	3302      	adds	r3, #2
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800169a:	4b3a      	ldr	r3, [pc, #232]	@ (8001784 <HAL_GPIO_Init+0x324>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016be:	4a31      	ldr	r2, [pc, #196]	@ (8001784 <HAL_GPIO_Init+0x324>)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001784 <HAL_GPIO_Init+0x324>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016e8:	4a26      	ldr	r2, [pc, #152]	@ (8001784 <HAL_GPIO_Init+0x324>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016ee:	4b25      	ldr	r3, [pc, #148]	@ (8001784 <HAL_GPIO_Init+0x324>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	43db      	mvns	r3, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4013      	ands	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001712:	4a1c      	ldr	r2, [pc, #112]	@ (8001784 <HAL_GPIO_Init+0x324>)
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001718:	4b1a      	ldr	r3, [pc, #104]	@ (8001784 <HAL_GPIO_Init+0x324>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800173c:	4a11      	ldr	r2, [pc, #68]	@ (8001784 <HAL_GPIO_Init+0x324>)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3301      	adds	r3, #1
 8001746:	61fb      	str	r3, [r7, #28]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	2b0f      	cmp	r3, #15
 800174c:	f67f ae96 	bls.w	800147c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3724      	adds	r7, #36	@ 0x24
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800
 8001764:	40013800 	.word	0x40013800
 8001768:	40020000 	.word	0x40020000
 800176c:	40020400 	.word	0x40020400
 8001770:	40020800 	.word	0x40020800
 8001774:	40020c00 	.word	0x40020c00
 8001778:	40021000 	.word	0x40021000
 800177c:	40021400 	.word	0x40021400
 8001780:	40021800 	.word	0x40021800
 8001784:	40013c00 	.word	0x40013c00

08001788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	807b      	strh	r3, [r7, #2]
 8001794:	4613      	mov	r3, r2
 8001796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001798:	787b      	ldrb	r3, [r7, #1]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800179e:	887a      	ldrh	r2, [r7, #2]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017a4:	e003      	b.n	80017ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017a6:	887b      	ldrh	r3, [r7, #2]
 80017a8:	041a      	lsls	r2, r3, #16
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	619a      	str	r2, [r3, #24]
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b085      	sub	sp, #20
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	460b      	mov	r3, r1
 80017c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017cc:	887a      	ldrh	r2, [r7, #2]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4013      	ands	r3, r2
 80017d2:	041a      	lsls	r2, r3, #16
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	43d9      	mvns	r1, r3
 80017d8:	887b      	ldrh	r3, [r7, #2]
 80017da:	400b      	ands	r3, r1
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	619a      	str	r2, [r3, #24]
}
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	603b      	str	r3, [r7, #0]
 80017fe:	4b20      	ldr	r3, [pc, #128]	@ (8001880 <HAL_PWREx_EnableOverDrive+0x90>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	4a1f      	ldr	r2, [pc, #124]	@ (8001880 <HAL_PWREx_EnableOverDrive+0x90>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001808:	6413      	str	r3, [r2, #64]	@ 0x40
 800180a:	4b1d      	ldr	r3, [pc, #116]	@ (8001880 <HAL_PWREx_EnableOverDrive+0x90>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001816:	4b1b      	ldr	r3, [pc, #108]	@ (8001884 <HAL_PWREx_EnableOverDrive+0x94>)
 8001818:	2201      	movs	r2, #1
 800181a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800181c:	f7ff fc70 	bl	8001100 <HAL_GetTick>
 8001820:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001822:	e009      	b.n	8001838 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001824:	f7ff fc6c 	bl	8001100 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001832:	d901      	bls.n	8001838 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e01f      	b.n	8001878 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001838:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <HAL_PWREx_EnableOverDrive+0x98>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001844:	d1ee      	bne.n	8001824 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001846:	4b11      	ldr	r3, [pc, #68]	@ (800188c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001848:	2201      	movs	r2, #1
 800184a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800184c:	f7ff fc58 	bl	8001100 <HAL_GetTick>
 8001850:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001852:	e009      	b.n	8001868 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001854:	f7ff fc54 	bl	8001100 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001862:	d901      	bls.n	8001868 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e007      	b.n	8001878 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001868:	4b07      	ldr	r3, [pc, #28]	@ (8001888 <HAL_PWREx_EnableOverDrive+0x98>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001870:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001874:	d1ee      	bne.n	8001854 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40023800 	.word	0x40023800
 8001884:	420e0040 	.word	0x420e0040
 8001888:	40007000 	.word	0x40007000
 800188c:	420e0044 	.word	0x420e0044

08001890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0cc      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018a4:	4b68      	ldr	r3, [pc, #416]	@ (8001a48 <HAL_RCC_ClockConfig+0x1b8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 030f 	and.w	r3, r3, #15
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d90c      	bls.n	80018cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b2:	4b65      	ldr	r3, [pc, #404]	@ (8001a48 <HAL_RCC_ClockConfig+0x1b8>)
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ba:	4b63      	ldr	r3, [pc, #396]	@ (8001a48 <HAL_RCC_ClockConfig+0x1b8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d001      	beq.n	80018cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e0b8      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d020      	beq.n	800191a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018e4:	4b59      	ldr	r3, [pc, #356]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	4a58      	ldr	r2, [pc, #352]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018fc:	4b53      	ldr	r3, [pc, #332]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	4a52      	ldr	r2, [pc, #328]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001906:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001908:	4b50      	ldr	r3, [pc, #320]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	494d      	ldr	r1, [pc, #308]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d044      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d107      	bne.n	800193e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192e:	4b47      	ldr	r3, [pc, #284]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d119      	bne.n	800196e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e07f      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b02      	cmp	r3, #2
 8001944:	d003      	beq.n	800194e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800194a:	2b03      	cmp	r3, #3
 800194c:	d107      	bne.n	800195e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d109      	bne.n	800196e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e06f      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e067      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800196e:	4b37      	ldr	r3, [pc, #220]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f023 0203 	bic.w	r2, r3, #3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	4934      	ldr	r1, [pc, #208]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	4313      	orrs	r3, r2
 800197e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001980:	f7ff fbbe 	bl	8001100 <HAL_GetTick>
 8001984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001986:	e00a      	b.n	800199e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001988:	f7ff fbba 	bl	8001100 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001996:	4293      	cmp	r3, r2
 8001998:	d901      	bls.n	800199e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e04f      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 020c 	and.w	r2, r3, #12
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d1eb      	bne.n	8001988 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019b0:	4b25      	ldr	r3, [pc, #148]	@ (8001a48 <HAL_RCC_ClockConfig+0x1b8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 030f 	and.w	r3, r3, #15
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d20c      	bcs.n	80019d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019be:	4b22      	ldr	r3, [pc, #136]	@ (8001a48 <HAL_RCC_ClockConfig+0x1b8>)
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c6:	4b20      	ldr	r3, [pc, #128]	@ (8001a48 <HAL_RCC_ClockConfig+0x1b8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e032      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d008      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e4:	4b19      	ldr	r3, [pc, #100]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	4916      	ldr	r1, [pc, #88]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d009      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a02:	4b12      	ldr	r3, [pc, #72]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	490e      	ldr	r1, [pc, #56]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a16:	f000 f855 	bl	8001ac4 <HAL_RCC_GetSysClockFreq>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	091b      	lsrs	r3, r3, #4
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	490a      	ldr	r1, [pc, #40]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c0>)
 8001a28:	5ccb      	ldrb	r3, [r1, r3]
 8001a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2e:	4a09      	ldr	r2, [pc, #36]	@ (8001a54 <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a32:	4b09      	ldr	r3, [pc, #36]	@ (8001a58 <HAL_RCC_ClockConfig+0x1c8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fb1e 	bl	8001078 <HAL_InitTick>

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023c00 	.word	0x40023c00
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	08004d08 	.word	0x08004d08
 8001a54:	20000000 	.word	0x20000000
 8001a58:	20000004 	.word	0x20000004

08001a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a60:	4b03      	ldr	r3, [pc, #12]	@ (8001a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000000 	.word	0x20000000

08001a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a78:	f7ff fff0 	bl	8001a5c <HAL_RCC_GetHCLKFreq>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	0a9b      	lsrs	r3, r3, #10
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	4903      	ldr	r1, [pc, #12]	@ (8001a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a8a:	5ccb      	ldrb	r3, [r1, r3]
 8001a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40023800 	.word	0x40023800
 8001a98:	08004d18 	.word	0x08004d18

08001a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001aa0:	f7ff ffdc 	bl	8001a5c <HAL_RCC_GetHCLKFreq>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	0b5b      	lsrs	r3, r3, #13
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	4903      	ldr	r1, [pc, #12]	@ (8001ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ab2:	5ccb      	ldrb	r3, [r1, r3]
 8001ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	08004d18 	.word	0x08004d18

08001ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ac8:	b0a6      	sub	sp, #152	@ 0x98
 8001aca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aea:	4bc8      	ldr	r3, [pc, #800]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0x348>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b0c      	cmp	r3, #12
 8001af4:	f200 817e 	bhi.w	8001df4 <HAL_RCC_GetSysClockFreq+0x330>
 8001af8:	a201      	add	r2, pc, #4	@ (adr r2, 8001b00 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afe:	bf00      	nop
 8001b00:	08001b35 	.word	0x08001b35
 8001b04:	08001df5 	.word	0x08001df5
 8001b08:	08001df5 	.word	0x08001df5
 8001b0c:	08001df5 	.word	0x08001df5
 8001b10:	08001b3d 	.word	0x08001b3d
 8001b14:	08001df5 	.word	0x08001df5
 8001b18:	08001df5 	.word	0x08001df5
 8001b1c:	08001df5 	.word	0x08001df5
 8001b20:	08001b45 	.word	0x08001b45
 8001b24:	08001df5 	.word	0x08001df5
 8001b28:	08001df5 	.word	0x08001df5
 8001b2c:	08001df5 	.word	0x08001df5
 8001b30:	08001caf 	.word	0x08001caf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b34:	4bb6      	ldr	r3, [pc, #728]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001b36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8001b3a:	e15f      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b3c:	4bb5      	ldr	r3, [pc, #724]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001b42:	e15b      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b44:	4bb1      	ldr	r3, [pc, #708]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0x348>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b50:	4bae      	ldr	r3, [pc, #696]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0x348>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d031      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b5c:	4bab      	ldr	r3, [pc, #684]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0x348>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	099b      	lsrs	r3, r3, #6
 8001b62:	2200      	movs	r2, #0
 8001b64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001b66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001b68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001b70:	2300      	movs	r3, #0
 8001b72:	667b      	str	r3, [r7, #100]	@ 0x64
 8001b74:	4ba7      	ldr	r3, [pc, #668]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b76:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001b7a:	462a      	mov	r2, r5
 8001b7c:	fb03 f202 	mul.w	r2, r3, r2
 8001b80:	2300      	movs	r3, #0
 8001b82:	4621      	mov	r1, r4
 8001b84:	fb01 f303 	mul.w	r3, r1, r3
 8001b88:	4413      	add	r3, r2
 8001b8a:	4aa2      	ldr	r2, [pc, #648]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b8c:	4621      	mov	r1, r4
 8001b8e:	fba1 1202 	umull	r1, r2, r1, r2
 8001b92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001b94:	460a      	mov	r2, r1
 8001b96:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001b98:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001b9a:	4413      	add	r3, r2
 8001b9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001b9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001ba6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001ba8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001bac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001bb0:	f7fe fb86 	bl	80002c0 <__aeabi_uldivmod>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4613      	mov	r3, r2
 8001bba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001bbe:	e064      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc0:	4b92      	ldr	r3, [pc, #584]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0x348>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	099b      	lsrs	r3, r3, #6
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8001bca:	657a      	str	r2, [r7, #84]	@ 0x54
 8001bcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bd8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001bdc:	4622      	mov	r2, r4
 8001bde:	462b      	mov	r3, r5
 8001be0:	f04f 0000 	mov.w	r0, #0
 8001be4:	f04f 0100 	mov.w	r1, #0
 8001be8:	0159      	lsls	r1, r3, #5
 8001bea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bee:	0150      	lsls	r0, r2, #5
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4621      	mov	r1, r4
 8001bf6:	1a51      	subs	r1, r2, r1
 8001bf8:	6139      	str	r1, [r7, #16]
 8001bfa:	4629      	mov	r1, r5
 8001bfc:	eb63 0301 	sbc.w	r3, r3, r1
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c0e:	4659      	mov	r1, fp
 8001c10:	018b      	lsls	r3, r1, #6
 8001c12:	4651      	mov	r1, sl
 8001c14:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c18:	4651      	mov	r1, sl
 8001c1a:	018a      	lsls	r2, r1, #6
 8001c1c:	4651      	mov	r1, sl
 8001c1e:	ebb2 0801 	subs.w	r8, r2, r1
 8001c22:	4659      	mov	r1, fp
 8001c24:	eb63 0901 	sbc.w	r9, r3, r1
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	f04f 0300 	mov.w	r3, #0
 8001c30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c3c:	4690      	mov	r8, r2
 8001c3e:	4699      	mov	r9, r3
 8001c40:	4623      	mov	r3, r4
 8001c42:	eb18 0303 	adds.w	r3, r8, r3
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	462b      	mov	r3, r5
 8001c4a:	eb49 0303 	adc.w	r3, r9, r3
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c5c:	4629      	mov	r1, r5
 8001c5e:	028b      	lsls	r3, r1, #10
 8001c60:	4621      	mov	r1, r4
 8001c62:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c66:	4621      	mov	r1, r4
 8001c68:	028a      	lsls	r2, r1, #10
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c72:	2200      	movs	r2, #0
 8001c74:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c76:	647a      	str	r2, [r7, #68]	@ 0x44
 8001c78:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001c7c:	f7fe fb20 	bl	80002c0 <__aeabi_uldivmod>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4613      	mov	r3, r2
 8001c86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c8a:	4b60      	ldr	r3, [pc, #384]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0x348>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	0c1b      	lsrs	r3, r3, #16
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	3301      	adds	r3, #1
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8001c9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001ca0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001cac:	e0a6      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cae:	4b57      	ldr	r3, [pc, #348]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0x348>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cba:	4b54      	ldr	r3, [pc, #336]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0x348>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d02a      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc6:	4b51      	ldr	r3, [pc, #324]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0x348>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	099b      	lsrs	r3, r3, #6
 8001ccc:	2200      	movs	r2, #0
 8001cce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cd4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4b4e      	ldr	r3, [pc, #312]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x350>)
 8001cdc:	fb03 f201 	mul.w	r2, r3, r1
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	fb00 f303 	mul.w	r3, r0, r3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4a4a      	ldr	r2, [pc, #296]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x350>)
 8001cea:	fba0 1202 	umull	r1, r2, r0, r2
 8001cee:	677a      	str	r2, [r7, #116]	@ 0x74
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	673a      	str	r2, [r7, #112]	@ 0x70
 8001cf4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001cf6:	4413      	add	r3, r2
 8001cf8:	677b      	str	r3, [r7, #116]	@ 0x74
 8001cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cfe:	2200      	movs	r2, #0
 8001d00:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d02:	637a      	str	r2, [r7, #52]	@ 0x34
 8001d04:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d08:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001d0c:	f7fe fad8 	bl	80002c0 <__aeabi_uldivmod>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4613      	mov	r3, r2
 8001d16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001d1a:	e05b      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d1c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0x348>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	099b      	lsrs	r3, r3, #6
 8001d22:	2200      	movs	r2, #0
 8001d24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d2e:	623b      	str	r3, [r7, #32]
 8001d30:	2300      	movs	r3, #0
 8001d32:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d38:	4642      	mov	r2, r8
 8001d3a:	464b      	mov	r3, r9
 8001d3c:	f04f 0000 	mov.w	r0, #0
 8001d40:	f04f 0100 	mov.w	r1, #0
 8001d44:	0159      	lsls	r1, r3, #5
 8001d46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d4a:	0150      	lsls	r0, r2, #5
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4641      	mov	r1, r8
 8001d52:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d56:	4649      	mov	r1, r9
 8001d58:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	f04f 0300 	mov.w	r3, #0
 8001d64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d70:	ebb2 040a 	subs.w	r4, r2, sl
 8001d74:	eb63 050b 	sbc.w	r5, r3, fp
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	f04f 0300 	mov.w	r3, #0
 8001d80:	00eb      	lsls	r3, r5, #3
 8001d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d86:	00e2      	lsls	r2, r4, #3
 8001d88:	4614      	mov	r4, r2
 8001d8a:	461d      	mov	r5, r3
 8001d8c:	4643      	mov	r3, r8
 8001d8e:	18e3      	adds	r3, r4, r3
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	464b      	mov	r3, r9
 8001d94:	eb45 0303 	adc.w	r3, r5, r3
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001da6:	4629      	mov	r1, r5
 8001da8:	028b      	lsls	r3, r1, #10
 8001daa:	4621      	mov	r1, r4
 8001dac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001db0:	4621      	mov	r1, r4
 8001db2:	028a      	lsls	r2, r1, #10
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	61bb      	str	r3, [r7, #24]
 8001dc0:	61fa      	str	r2, [r7, #28]
 8001dc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dc6:	f7fe fa7b 	bl	80002c0 <__aeabi_uldivmod>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4613      	mov	r3, r2
 8001dd0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0x348>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	0f1b      	lsrs	r3, r3, #28
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8001de2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001de6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001df2:	e003      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001df4:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001df6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001dfa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3798      	adds	r7, #152	@ 0x98
 8001e04:	46bd      	mov	sp, r7
 8001e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	00f42400 	.word	0x00f42400
 8001e14:	017d7840 	.word	0x017d7840

08001e18 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e28d      	b.n	8002346 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 8083 	beq.w	8001f3e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e38:	4b94      	ldr	r3, [pc, #592]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 030c 	and.w	r3, r3, #12
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d019      	beq.n	8001e78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e44:	4b91      	ldr	r3, [pc, #580]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d106      	bne.n	8001e5e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e50:	4b8e      	ldr	r3, [pc, #568]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e5c:	d00c      	beq.n	8001e78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e5e:	4b8b      	ldr	r3, [pc, #556]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e66:	2b0c      	cmp	r3, #12
 8001e68:	d112      	bne.n	8001e90 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e6a:	4b88      	ldr	r3, [pc, #544]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e76:	d10b      	bne.n	8001e90 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e78:	4b84      	ldr	r3, [pc, #528]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d05b      	beq.n	8001f3c <HAL_RCC_OscConfig+0x124>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d157      	bne.n	8001f3c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e25a      	b.n	8002346 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e98:	d106      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x90>
 8001e9a:	4b7c      	ldr	r3, [pc, #496]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a7b      	ldr	r2, [pc, #492]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	e01d      	b.n	8001ee4 <HAL_RCC_OscConfig+0xcc>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001eb0:	d10c      	bne.n	8001ecc <HAL_RCC_OscConfig+0xb4>
 8001eb2:	4b76      	ldr	r3, [pc, #472]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a75      	ldr	r2, [pc, #468]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001eb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	4b73      	ldr	r3, [pc, #460]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a72      	ldr	r2, [pc, #456]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	e00b      	b.n	8001ee4 <HAL_RCC_OscConfig+0xcc>
 8001ecc:	4b6f      	ldr	r3, [pc, #444]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a6e      	ldr	r2, [pc, #440]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001ed2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	4b6c      	ldr	r3, [pc, #432]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a6b      	ldr	r2, [pc, #428]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001ede:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d013      	beq.n	8001f14 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eec:	f7ff f908 	bl	8001100 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef4:	f7ff f904 	bl	8001100 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b64      	cmp	r3, #100	@ 0x64
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e21f      	b.n	8002346 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f06:	4b61      	ldr	r3, [pc, #388]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0xdc>
 8001f12:	e014      	b.n	8001f3e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7ff f8f4 	bl	8001100 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f1c:	f7ff f8f0 	bl	8001100 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b64      	cmp	r3, #100	@ 0x64
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e20b      	b.n	8002346 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2e:	4b57      	ldr	r3, [pc, #348]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x104>
 8001f3a:	e000      	b.n	8001f3e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d06f      	beq.n	800202a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f4a:	4b50      	ldr	r3, [pc, #320]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d017      	beq.n	8001f86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f56:	4b4d      	ldr	r3, [pc, #308]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d105      	bne.n	8001f6e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f62:	4b4a      	ldr	r3, [pc, #296]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00b      	beq.n	8001f86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f6e:	4b47      	ldr	r3, [pc, #284]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f76:	2b0c      	cmp	r3, #12
 8001f78:	d11c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f7a:	4b44      	ldr	r3, [pc, #272]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d116      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f86:	4b41      	ldr	r3, [pc, #260]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d005      	beq.n	8001f9e <HAL_RCC_OscConfig+0x186>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d001      	beq.n	8001f9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e1d3      	b.n	8002346 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9e:	4b3b      	ldr	r3, [pc, #236]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4937      	ldr	r1, [pc, #220]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb2:	e03a      	b.n	800202a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d020      	beq.n	8001ffe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fbc:	4b34      	ldr	r3, [pc, #208]	@ (8002090 <HAL_RCC_OscConfig+0x278>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc2:	f7ff f89d 	bl	8001100 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fca:	f7ff f899 	bl	8001100 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e1b4      	b.n	8002346 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe8:	4b28      	ldr	r3, [pc, #160]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4925      	ldr	r1, [pc, #148]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	600b      	str	r3, [r1, #0]
 8001ffc:	e015      	b.n	800202a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ffe:	4b24      	ldr	r3, [pc, #144]	@ (8002090 <HAL_RCC_OscConfig+0x278>)
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002004:	f7ff f87c 	bl	8001100 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800200c:	f7ff f878 	bl	8001100 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e193      	b.n	8002346 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201e:	4b1b      	ldr	r3, [pc, #108]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d036      	beq.n	80020a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d016      	beq.n	800206c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800203e:	4b15      	ldr	r3, [pc, #84]	@ (8002094 <HAL_RCC_OscConfig+0x27c>)
 8002040:	2201      	movs	r2, #1
 8002042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002044:	f7ff f85c 	bl	8001100 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800204c:	f7ff f858 	bl	8001100 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e173      	b.n	8002346 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205e:	4b0b      	ldr	r3, [pc, #44]	@ (800208c <HAL_RCC_OscConfig+0x274>)
 8002060:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0x234>
 800206a:	e01b      	b.n	80020a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800206c:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <HAL_RCC_OscConfig+0x27c>)
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002072:	f7ff f845 	bl	8001100 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002078:	e00e      	b.n	8002098 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800207a:	f7ff f841 	bl	8001100 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d907      	bls.n	8002098 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e15c      	b.n	8002346 <HAL_RCC_OscConfig+0x52e>
 800208c:	40023800 	.word	0x40023800
 8002090:	42470000 	.word	0x42470000
 8002094:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002098:	4b8a      	ldr	r3, [pc, #552]	@ (80022c4 <HAL_RCC_OscConfig+0x4ac>)
 800209a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1ea      	bne.n	800207a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 8097 	beq.w	80021e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b6:	4b83      	ldr	r3, [pc, #524]	@ (80022c4 <HAL_RCC_OscConfig+0x4ac>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10f      	bne.n	80020e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	4b7f      	ldr	r3, [pc, #508]	@ (80022c4 <HAL_RCC_OscConfig+0x4ac>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ca:	4a7e      	ldr	r2, [pc, #504]	@ (80022c4 <HAL_RCC_OscConfig+0x4ac>)
 80020cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020d2:	4b7c      	ldr	r3, [pc, #496]	@ (80022c4 <HAL_RCC_OscConfig+0x4ac>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020de:	2301      	movs	r3, #1
 80020e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e2:	4b79      	ldr	r3, [pc, #484]	@ (80022c8 <HAL_RCC_OscConfig+0x4b0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d118      	bne.n	8002120 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ee:	4b76      	ldr	r3, [pc, #472]	@ (80022c8 <HAL_RCC_OscConfig+0x4b0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a75      	ldr	r2, [pc, #468]	@ (80022c8 <HAL_RCC_OscConfig+0x4b0>)
 80020f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020fa:	f7ff f801 	bl	8001100 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002102:	f7fe fffd 	bl	8001100 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e118      	b.n	8002346 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002114:	4b6c      	ldr	r3, [pc, #432]	@ (80022c8 <HAL_RCC_OscConfig+0x4b0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0f0      	beq.n	8002102 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d106      	bne.n	8002136 <HAL_RCC_OscConfig+0x31e>
 8002128:	4b66      	ldr	r3, [pc, #408]	@ (80022c4 <HAL_RCC_OscConfig+0x4ac>)
 800212a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800212c:	4a65      	ldr	r2, [pc, #404]	@ (80022c4 <HAL_RCC_OscConfig+0x4ac>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6713      	str	r3, [r2, #112]	@ 0x70
 8002134:	e01c      	b.n	8002170 <HAL_RCC_OscConfig+0x358>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2b05      	cmp	r3, #5
 800213c:	d10c      	bne.n	8002158 <HAL_RCC_OscConfig+0x340>
 800213e:	4b61      	ldr	r3, [pc, #388]	@ (80022c4 <HAL_RCC_OscConfig+0x4ac>)
 8002140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002142:	4a60      	ldr	r2, [pc, #384]	@ (80022c4 <HAL_RCC_OscConfig+0x4ac>)
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	6713      	str	r3, [r2, #112]	@ 0x70
 800214a:	4b5e      	ldr	r3, [pc, #376]	@ (80022c4 <HAL_RCC_OscConfig+0x4ac>)
 800214c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800214e:	4a5d      	ldr	r2, [pc, #372]	@ (80022c4 <HAL_RCC_OscConfig+0x4ac>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	6713      	str	r3, [r2, #112]	@ 0x70
 8002156:	e00b      	b.n	8002170 <HAL_RCC_OscConfig+0x358>
 8002158:	4b5a      	ldr	r3, [pc, #360]	@ (80022c4 <HAL_RCC_OscConfig+0x4ac>)
 800215a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215c:	4a59      	ldr	r2, [pc, #356]	@ (80022c4 <HAL_RCC_OscConfig+0x4ac>)
 800215e:	f023 0301 	bic.w	r3, r3, #1
 8002162:	6713      	str	r3, [r2, #112]	@ 0x70
 8002164:	4b57      	ldr	r3, [pc, #348]	@ (80022c4 <HAL_RCC_OscConfig+0x4ac>)
 8002166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002168:	4a56      	ldr	r2, [pc, #344]	@ (80022c4 <HAL_RCC_OscConfig+0x4ac>)
 800216a:	f023 0304 	bic.w	r3, r3, #4
 800216e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d015      	beq.n	80021a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002178:	f7fe ffc2 	bl	8001100 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217e:	e00a      	b.n	8002196 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002180:	f7fe ffbe 	bl	8001100 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e0d7      	b.n	8002346 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002196:	4b4b      	ldr	r3, [pc, #300]	@ (80022c4 <HAL_RCC_OscConfig+0x4ac>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0ee      	beq.n	8002180 <HAL_RCC_OscConfig+0x368>
 80021a2:	e014      	b.n	80021ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a4:	f7fe ffac 	bl	8001100 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ac:	f7fe ffa8 	bl	8001100 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e0c1      	b.n	8002346 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c2:	4b40      	ldr	r3, [pc, #256]	@ (80022c4 <HAL_RCC_OscConfig+0x4ac>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1ee      	bne.n	80021ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ce:	7dfb      	ldrb	r3, [r7, #23]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d105      	bne.n	80021e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d4:	4b3b      	ldr	r3, [pc, #236]	@ (80022c4 <HAL_RCC_OscConfig+0x4ac>)
 80021d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d8:	4a3a      	ldr	r2, [pc, #232]	@ (80022c4 <HAL_RCC_OscConfig+0x4ac>)
 80021da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 80ad 	beq.w	8002344 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ea:	4b36      	ldr	r3, [pc, #216]	@ (80022c4 <HAL_RCC_OscConfig+0x4ac>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d060      	beq.n	80022b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d145      	bne.n	800228a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fe:	4b33      	ldr	r3, [pc, #204]	@ (80022cc <HAL_RCC_OscConfig+0x4b4>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002204:	f7fe ff7c 	bl	8001100 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800220c:	f7fe ff78 	bl	8001100 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e093      	b.n	8002346 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221e:	4b29      	ldr	r3, [pc, #164]	@ (80022c4 <HAL_RCC_OscConfig+0x4ac>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69da      	ldr	r2, [r3, #28]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002238:	019b      	lsls	r3, r3, #6
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002240:	085b      	lsrs	r3, r3, #1
 8002242:	3b01      	subs	r3, #1
 8002244:	041b      	lsls	r3, r3, #16
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224c:	061b      	lsls	r3, r3, #24
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002254:	071b      	lsls	r3, r3, #28
 8002256:	491b      	ldr	r1, [pc, #108]	@ (80022c4 <HAL_RCC_OscConfig+0x4ac>)
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800225c:	4b1b      	ldr	r3, [pc, #108]	@ (80022cc <HAL_RCC_OscConfig+0x4b4>)
 800225e:	2201      	movs	r2, #1
 8002260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002262:	f7fe ff4d 	bl	8001100 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226a:	f7fe ff49 	bl	8001100 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e064      	b.n	8002346 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227c:	4b11      	ldr	r3, [pc, #68]	@ (80022c4 <HAL_RCC_OscConfig+0x4ac>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f0      	beq.n	800226a <HAL_RCC_OscConfig+0x452>
 8002288:	e05c      	b.n	8002344 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228a:	4b10      	ldr	r3, [pc, #64]	@ (80022cc <HAL_RCC_OscConfig+0x4b4>)
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002290:	f7fe ff36 	bl	8001100 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002298:	f7fe ff32 	bl	8001100 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e04d      	b.n	8002346 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022aa:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <HAL_RCC_OscConfig+0x4ac>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x480>
 80022b6:	e045      	b.n	8002344 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d107      	bne.n	80022d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e040      	b.n	8002346 <HAL_RCC_OscConfig+0x52e>
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40007000 	.word	0x40007000
 80022cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002350 <HAL_RCC_OscConfig+0x538>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d030      	beq.n	8002340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d129      	bne.n	8002340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d122      	bne.n	8002340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002300:	4013      	ands	r3, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002306:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002308:	4293      	cmp	r3, r2
 800230a:	d119      	bne.n	8002340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002316:	085b      	lsrs	r3, r3, #1
 8002318:	3b01      	subs	r3, #1
 800231a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800231c:	429a      	cmp	r2, r3
 800231e:	d10f      	bne.n	8002340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d107      	bne.n	8002340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800

08002354 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e041      	b.n	80023ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7fe fd2c 	bl	8000dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3304      	adds	r3, #4
 8002390:	4619      	mov	r1, r3
 8002392:	4610      	mov	r0, r2
 8002394:	f000 fa7e 	bl	8002894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b01      	cmp	r3, #1
 8002406:	d001      	beq.n	800240c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e04e      	b.n	80024aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a23      	ldr	r2, [pc, #140]	@ (80024b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d022      	beq.n	8002474 <HAL_TIM_Base_Start_IT+0x80>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002436:	d01d      	beq.n	8002474 <HAL_TIM_Base_Start_IT+0x80>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a1f      	ldr	r2, [pc, #124]	@ (80024bc <HAL_TIM_Base_Start_IT+0xc8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d018      	beq.n	8002474 <HAL_TIM_Base_Start_IT+0x80>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a1e      	ldr	r2, [pc, #120]	@ (80024c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d013      	beq.n	8002474 <HAL_TIM_Base_Start_IT+0x80>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a1c      	ldr	r2, [pc, #112]	@ (80024c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d00e      	beq.n	8002474 <HAL_TIM_Base_Start_IT+0x80>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a1b      	ldr	r2, [pc, #108]	@ (80024c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d009      	beq.n	8002474 <HAL_TIM_Base_Start_IT+0x80>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a19      	ldr	r2, [pc, #100]	@ (80024cc <HAL_TIM_Base_Start_IT+0xd8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d004      	beq.n	8002474 <HAL_TIM_Base_Start_IT+0x80>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a18      	ldr	r2, [pc, #96]	@ (80024d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d111      	bne.n	8002498 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2b06      	cmp	r3, #6
 8002484:	d010      	beq.n	80024a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 0201 	orr.w	r2, r2, #1
 8002494:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002496:	e007      	b.n	80024a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40010000 	.word	0x40010000
 80024bc:	40000400 	.word	0x40000400
 80024c0:	40000800 	.word	0x40000800
 80024c4:	40000c00 	.word	0x40000c00
 80024c8:	40010400 	.word	0x40010400
 80024cc:	40014000 	.word	0x40014000
 80024d0:	40001800 	.word	0x40001800

080024d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d020      	beq.n	8002538 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d01b      	beq.n	8002538 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0202 	mvn.w	r2, #2
 8002508:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f999 	bl	8002856 <HAL_TIM_IC_CaptureCallback>
 8002524:	e005      	b.n	8002532 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f98b 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f99c 	bl	800286a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b00      	cmp	r3, #0
 8002540:	d020      	beq.n	8002584 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d01b      	beq.n	8002584 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f06f 0204 	mvn.w	r2, #4
 8002554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2202      	movs	r2, #2
 800255a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f973 	bl	8002856 <HAL_TIM_IC_CaptureCallback>
 8002570:	e005      	b.n	800257e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f965 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f976 	bl	800286a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d020      	beq.n	80025d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d01b      	beq.n	80025d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f06f 0208 	mvn.w	r2, #8
 80025a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2204      	movs	r2, #4
 80025a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f94d 	bl	8002856 <HAL_TIM_IC_CaptureCallback>
 80025bc:	e005      	b.n	80025ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f93f 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f950 	bl	800286a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d020      	beq.n	800261c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d01b      	beq.n	800261c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0210 	mvn.w	r2, #16
 80025ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2208      	movs	r2, #8
 80025f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f927 	bl	8002856 <HAL_TIM_IC_CaptureCallback>
 8002608:	e005      	b.n	8002616 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f919 	bl	8002842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f92a 	bl	800286a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00c      	beq.n	8002640 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d007      	beq.n	8002640 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0201 	mvn.w	r2, #1
 8002638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fe f988 	bl	8000950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00c      	beq.n	8002664 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002650:	2b00      	cmp	r3, #0
 8002652:	d007      	beq.n	8002664 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800265c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 fa68 	bl	8002b34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00c      	beq.n	8002688 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002674:	2b00      	cmp	r3, #0
 8002676:	d007      	beq.n	8002688 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f8fb 	bl	800287e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f003 0320 	and.w	r3, r3, #32
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00c      	beq.n	80026ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d007      	beq.n	80026ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f06f 0220 	mvn.w	r2, #32
 80026a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fa3a 	bl	8002b20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026ac:	bf00      	nop
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_TIM_ConfigClockSource+0x1c>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e0b4      	b.n	800283a <HAL_TIM_ConfigClockSource+0x186>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80026ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002708:	d03e      	beq.n	8002788 <HAL_TIM_ConfigClockSource+0xd4>
 800270a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800270e:	f200 8087 	bhi.w	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002716:	f000 8086 	beq.w	8002826 <HAL_TIM_ConfigClockSource+0x172>
 800271a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800271e:	d87f      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002720:	2b70      	cmp	r3, #112	@ 0x70
 8002722:	d01a      	beq.n	800275a <HAL_TIM_ConfigClockSource+0xa6>
 8002724:	2b70      	cmp	r3, #112	@ 0x70
 8002726:	d87b      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002728:	2b60      	cmp	r3, #96	@ 0x60
 800272a:	d050      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0x11a>
 800272c:	2b60      	cmp	r3, #96	@ 0x60
 800272e:	d877      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002730:	2b50      	cmp	r3, #80	@ 0x50
 8002732:	d03c      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0xfa>
 8002734:	2b50      	cmp	r3, #80	@ 0x50
 8002736:	d873      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002738:	2b40      	cmp	r3, #64	@ 0x40
 800273a:	d058      	beq.n	80027ee <HAL_TIM_ConfigClockSource+0x13a>
 800273c:	2b40      	cmp	r3, #64	@ 0x40
 800273e:	d86f      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002740:	2b30      	cmp	r3, #48	@ 0x30
 8002742:	d064      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x15a>
 8002744:	2b30      	cmp	r3, #48	@ 0x30
 8002746:	d86b      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002748:	2b20      	cmp	r3, #32
 800274a:	d060      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x15a>
 800274c:	2b20      	cmp	r3, #32
 800274e:	d867      	bhi.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
 8002750:	2b00      	cmp	r3, #0
 8002752:	d05c      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x15a>
 8002754:	2b10      	cmp	r3, #16
 8002756:	d05a      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x15a>
 8002758:	e062      	b.n	8002820 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800276a:	f000 f9b9 	bl	8002ae0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800277c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	609a      	str	r2, [r3, #8]
      break;
 8002786:	e04f      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002798:	f000 f9a2 	bl	8002ae0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027aa:	609a      	str	r2, [r3, #8]
      break;
 80027ac:	e03c      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ba:	461a      	mov	r2, r3
 80027bc:	f000 f916 	bl	80029ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2150      	movs	r1, #80	@ 0x50
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 f96f 	bl	8002aaa <TIM_ITRx_SetConfig>
      break;
 80027cc:	e02c      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027da:	461a      	mov	r2, r3
 80027dc:	f000 f935 	bl	8002a4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2160      	movs	r1, #96	@ 0x60
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f95f 	bl	8002aaa <TIM_ITRx_SetConfig>
      break;
 80027ec:	e01c      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027fa:	461a      	mov	r2, r3
 80027fc:	f000 f8f6 	bl	80029ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2140      	movs	r1, #64	@ 0x40
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f94f 	bl	8002aaa <TIM_ITRx_SetConfig>
      break;
 800280c:	e00c      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4619      	mov	r1, r3
 8002818:	4610      	mov	r0, r2
 800281a:	f000 f946 	bl	8002aaa <TIM_ITRx_SetConfig>
      break;
 800281e:	e003      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
      break;
 8002824:	e000      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002826:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002838:	7bfb      	ldrb	r3, [r7, #15]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a46      	ldr	r2, [pc, #280]	@ (80029c0 <TIM_Base_SetConfig+0x12c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d013      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028b2:	d00f      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a43      	ldr	r2, [pc, #268]	@ (80029c4 <TIM_Base_SetConfig+0x130>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00b      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a42      	ldr	r2, [pc, #264]	@ (80029c8 <TIM_Base_SetConfig+0x134>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d007      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a41      	ldr	r2, [pc, #260]	@ (80029cc <TIM_Base_SetConfig+0x138>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d003      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a40      	ldr	r2, [pc, #256]	@ (80029d0 <TIM_Base_SetConfig+0x13c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d108      	bne.n	80028e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a35      	ldr	r2, [pc, #212]	@ (80029c0 <TIM_Base_SetConfig+0x12c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d02b      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028f4:	d027      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a32      	ldr	r2, [pc, #200]	@ (80029c4 <TIM_Base_SetConfig+0x130>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d023      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a31      	ldr	r2, [pc, #196]	@ (80029c8 <TIM_Base_SetConfig+0x134>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d01f      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a30      	ldr	r2, [pc, #192]	@ (80029cc <TIM_Base_SetConfig+0x138>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d01b      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a2f      	ldr	r2, [pc, #188]	@ (80029d0 <TIM_Base_SetConfig+0x13c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d017      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a2e      	ldr	r2, [pc, #184]	@ (80029d4 <TIM_Base_SetConfig+0x140>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d013      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a2d      	ldr	r2, [pc, #180]	@ (80029d8 <TIM_Base_SetConfig+0x144>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00f      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a2c      	ldr	r2, [pc, #176]	@ (80029dc <TIM_Base_SetConfig+0x148>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00b      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a2b      	ldr	r2, [pc, #172]	@ (80029e0 <TIM_Base_SetConfig+0x14c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d007      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a2a      	ldr	r2, [pc, #168]	@ (80029e4 <TIM_Base_SetConfig+0x150>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d003      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a29      	ldr	r2, [pc, #164]	@ (80029e8 <TIM_Base_SetConfig+0x154>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d108      	bne.n	8002958 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800294c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4313      	orrs	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a10      	ldr	r2, [pc, #64]	@ (80029c0 <TIM_Base_SetConfig+0x12c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d003      	beq.n	800298c <TIM_Base_SetConfig+0xf8>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a12      	ldr	r2, [pc, #72]	@ (80029d0 <TIM_Base_SetConfig+0x13c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d103      	bne.n	8002994 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d105      	bne.n	80029b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f023 0201 	bic.w	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	611a      	str	r2, [r3, #16]
  }
}
 80029b2:	bf00      	nop
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40010000 	.word	0x40010000
 80029c4:	40000400 	.word	0x40000400
 80029c8:	40000800 	.word	0x40000800
 80029cc:	40000c00 	.word	0x40000c00
 80029d0:	40010400 	.word	0x40010400
 80029d4:	40014000 	.word	0x40014000
 80029d8:	40014400 	.word	0x40014400
 80029dc:	40014800 	.word	0x40014800
 80029e0:	40001800 	.word	0x40001800
 80029e4:	40001c00 	.word	0x40001c00
 80029e8:	40002000 	.word	0x40002000

080029ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	f023 0201 	bic.w	r2, r3, #1
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f023 030a 	bic.w	r3, r3, #10
 8002a28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	621a      	str	r2, [r3, #32]
}
 8002a3e:	bf00      	nop
 8002a40:	371c      	adds	r7, #28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b087      	sub	sp, #28
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	f023 0210 	bic.w	r2, r3, #16
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	031b      	lsls	r3, r3, #12
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	621a      	str	r2, [r3, #32]
}
 8002a9e:	bf00      	nop
 8002aa0:	371c      	adds	r7, #28
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b085      	sub	sp, #20
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ac0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f043 0307 	orr.w	r3, r3, #7
 8002acc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	609a      	str	r2, [r3, #8]
}
 8002ad4:	bf00      	nop
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002afa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	021a      	lsls	r2, r3, #8
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	431a      	orrs	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	609a      	str	r2, [r3, #8]
}
 8002b14:	bf00      	nop
 8002b16:	371c      	adds	r7, #28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e042      	b.n	8002be0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d106      	bne.n	8002b74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7fe f95a 	bl	8000e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2224      	movs	r2, #36	@ 0x24
 8002b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 fdbd 	bl	800370c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ba0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695a      	ldr	r2, [r3, #20]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002bc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08a      	sub	sp, #40	@ 0x28
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b20      	cmp	r3, #32
 8002c06:	d175      	bne.n	8002cf4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d002      	beq.n	8002c14 <HAL_UART_Transmit+0x2c>
 8002c0e:	88fb      	ldrh	r3, [r7, #6]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e06e      	b.n	8002cf6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2221      	movs	r2, #33	@ 0x21
 8002c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c26:	f7fe fa6b 	bl	8001100 <HAL_GetTick>
 8002c2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	88fa      	ldrh	r2, [r7, #6]
 8002c30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	88fa      	ldrh	r2, [r7, #6]
 8002c36:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c40:	d108      	bne.n	8002c54 <HAL_UART_Transmit+0x6c>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d104      	bne.n	8002c54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	e003      	b.n	8002c5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c5c:	e02e      	b.n	8002cbc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2200      	movs	r2, #0
 8002c66:	2180      	movs	r1, #128	@ 0x80
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 fb1f 	bl	80032ac <UART_WaitOnFlagUntilTimeout>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e03a      	b.n	8002cf6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10b      	bne.n	8002c9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	3302      	adds	r3, #2
 8002c9a:	61bb      	str	r3, [r7, #24]
 8002c9c:	e007      	b.n	8002cae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	781a      	ldrb	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	3301      	adds	r3, #1
 8002cac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1cb      	bne.n	8002c5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2140      	movs	r1, #64	@ 0x40
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 faeb 	bl	80032ac <UART_WaitOnFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e006      	b.n	8002cf6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	e000      	b.n	8002cf6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002cf4:	2302      	movs	r3, #2
  }
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3720      	adds	r7, #32
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b20      	cmp	r3, #32
 8002d16:	d112      	bne.n	8002d3e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <HAL_UART_Receive_IT+0x26>
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e00b      	b.n	8002d40 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	461a      	mov	r2, r3
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 fb12 	bl	800335e <UART_Start_Receive_IT>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	e000      	b.n	8002d40 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002d3e:	2302      	movs	r3, #2
  }
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b0ba      	sub	sp, #232	@ 0xe8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002d86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10f      	bne.n	8002dae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d92:	f003 0320 	and.w	r3, r3, #32
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d009      	beq.n	8002dae <HAL_UART_IRQHandler+0x66>
 8002d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 fbf2 	bl	8003590 <UART_Receive_IT>
      return;
 8002dac:	e25b      	b.n	8003266 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002dae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 80de 	beq.w	8002f74 <HAL_UART_IRQHandler+0x22c>
 8002db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d106      	bne.n	8002dd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dc8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 80d1 	beq.w	8002f74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00b      	beq.n	8002df6 <HAL_UART_IRQHandler+0xae>
 8002dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dee:	f043 0201 	orr.w	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00b      	beq.n	8002e1a <HAL_UART_IRQHandler+0xd2>
 8002e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d005      	beq.n	8002e1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e12:	f043 0202 	orr.w	r2, r3, #2
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00b      	beq.n	8002e3e <HAL_UART_IRQHandler+0xf6>
 8002e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d005      	beq.n	8002e3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e36:	f043 0204 	orr.w	r2, r3, #4
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d011      	beq.n	8002e6e <HAL_UART_IRQHandler+0x126>
 8002e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d105      	bne.n	8002e62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e66:	f043 0208 	orr.w	r2, r3, #8
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 81f2 	beq.w	800325c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e7c:	f003 0320 	and.w	r3, r3, #32
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <HAL_UART_IRQHandler+0x14e>
 8002e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 fb7d 	bl	8003590 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea0:	2b40      	cmp	r3, #64	@ 0x40
 8002ea2:	bf0c      	ite	eq
 8002ea4:	2301      	moveq	r3, #1
 8002ea6:	2300      	movne	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d103      	bne.n	8002ec2 <HAL_UART_IRQHandler+0x17a>
 8002eba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d04f      	beq.n	8002f62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 fa85 	bl	80033d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed2:	2b40      	cmp	r3, #64	@ 0x40
 8002ed4:	d141      	bne.n	8002f5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	3314      	adds	r3, #20
 8002edc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ee4:	e853 3f00 	ldrex	r3, [r3]
 8002ee8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ef0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	3314      	adds	r3, #20
 8002efe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f12:	e841 2300 	strex	r3, r2, [r1]
 8002f16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1d9      	bne.n	8002ed6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d013      	beq.n	8002f52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f2e:	4a7e      	ldr	r2, [pc, #504]	@ (8003128 <HAL_UART_IRQHandler+0x3e0>)
 8002f30:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fe fa6f 	bl	800141a <HAL_DMA_Abort_IT>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d016      	beq.n	8002f70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f4c:	4610      	mov	r0, r2
 8002f4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f50:	e00e      	b.n	8002f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f994 	bl	8003280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f58:	e00a      	b.n	8002f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f990 	bl	8003280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f60:	e006      	b.n	8002f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f98c 	bl	8003280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002f6e:	e175      	b.n	800325c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f70:	bf00      	nop
    return;
 8002f72:	e173      	b.n	800325c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	f040 814f 	bne.w	800321c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 8148 	beq.w	800321c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 8141 	beq.w	800321c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fba:	2b40      	cmp	r3, #64	@ 0x40
 8002fbc:	f040 80b6 	bne.w	800312c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 8145 	beq.w	8003260 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002fda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	f080 813e 	bcs.w	8003260 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ff6:	f000 8088 	beq.w	800310a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	330c      	adds	r3, #12
 8003000:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003004:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003008:	e853 3f00 	ldrex	r3, [r3]
 800300c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003010:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003014:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003018:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	330c      	adds	r3, #12
 8003022:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003026:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800302a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003032:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003036:	e841 2300 	strex	r3, r2, [r1]
 800303a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800303e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1d9      	bne.n	8002ffa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	3314      	adds	r3, #20
 800304c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003050:	e853 3f00 	ldrex	r3, [r3]
 8003054:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003056:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003058:	f023 0301 	bic.w	r3, r3, #1
 800305c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3314      	adds	r3, #20
 8003066:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800306a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800306e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003070:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003072:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003076:	e841 2300 	strex	r3, r2, [r1]
 800307a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800307c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1e1      	bne.n	8003046 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	3314      	adds	r3, #20
 8003088:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800308c:	e853 3f00 	ldrex	r3, [r3]
 8003090:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003092:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003094:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003098:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3314      	adds	r3, #20
 80030a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80030a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80030a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80030ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80030ae:	e841 2300 	strex	r3, r2, [r1]
 80030b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80030b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1e3      	bne.n	8003082 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	330c      	adds	r3, #12
 80030ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030d2:	e853 3f00 	ldrex	r3, [r3]
 80030d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80030d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030da:	f023 0310 	bic.w	r3, r3, #16
 80030de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	330c      	adds	r3, #12
 80030e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80030ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80030ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80030f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030f4:	e841 2300 	strex	r3, r2, [r1]
 80030f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80030fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1e3      	bne.n	80030c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003104:	4618      	mov	r0, r3
 8003106:	f7fe f918 	bl	800133a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2202      	movs	r2, #2
 800310e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003118:	b29b      	uxth	r3, r3
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	b29b      	uxth	r3, r3
 800311e:	4619      	mov	r1, r3
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f8b7 	bl	8003294 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003126:	e09b      	b.n	8003260 <HAL_UART_IRQHandler+0x518>
 8003128:	08003499 	.word	0x08003499
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003134:	b29b      	uxth	r3, r3
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003140:	b29b      	uxth	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 808e 	beq.w	8003264 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003148:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 8089 	beq.w	8003264 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	330c      	adds	r3, #12
 8003158:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800315c:	e853 3f00 	ldrex	r3, [r3]
 8003160:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003164:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003168:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	330c      	adds	r3, #12
 8003172:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003176:	647a      	str	r2, [r7, #68]	@ 0x44
 8003178:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800317c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800317e:	e841 2300 	strex	r3, r2, [r1]
 8003182:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1e3      	bne.n	8003152 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3314      	adds	r3, #20
 8003190:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	e853 3f00 	ldrex	r3, [r3]
 8003198:	623b      	str	r3, [r7, #32]
   return(result);
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	f023 0301 	bic.w	r3, r3, #1
 80031a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	3314      	adds	r3, #20
 80031aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80031ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80031b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031b6:	e841 2300 	strex	r3, r2, [r1]
 80031ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1e3      	bne.n	800318a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	330c      	adds	r3, #12
 80031d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	e853 3f00 	ldrex	r3, [r3]
 80031de:	60fb      	str	r3, [r7, #12]
   return(result);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 0310 	bic.w	r3, r3, #16
 80031e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	330c      	adds	r3, #12
 80031f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80031f4:	61fa      	str	r2, [r7, #28]
 80031f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f8:	69b9      	ldr	r1, [r7, #24]
 80031fa:	69fa      	ldr	r2, [r7, #28]
 80031fc:	e841 2300 	strex	r3, r2, [r1]
 8003200:	617b      	str	r3, [r7, #20]
   return(result);
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1e3      	bne.n	80031d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800320e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003212:	4619      	mov	r1, r3
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f83d 	bl	8003294 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800321a:	e023      	b.n	8003264 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800321c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003224:	2b00      	cmp	r3, #0
 8003226:	d009      	beq.n	800323c <HAL_UART_IRQHandler+0x4f4>
 8003228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800322c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f943 	bl	80034c0 <UART_Transmit_IT>
    return;
 800323a:	e014      	b.n	8003266 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800323c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00e      	beq.n	8003266 <HAL_UART_IRQHandler+0x51e>
 8003248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800324c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003250:	2b00      	cmp	r3, #0
 8003252:	d008      	beq.n	8003266 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f983 	bl	8003560 <UART_EndTransmit_IT>
    return;
 800325a:	e004      	b.n	8003266 <HAL_UART_IRQHandler+0x51e>
    return;
 800325c:	bf00      	nop
 800325e:	e002      	b.n	8003266 <HAL_UART_IRQHandler+0x51e>
      return;
 8003260:	bf00      	nop
 8003262:	e000      	b.n	8003266 <HAL_UART_IRQHandler+0x51e>
      return;
 8003264:	bf00      	nop
  }
}
 8003266:	37e8      	adds	r7, #232	@ 0xe8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	460b      	mov	r3, r1
 800329e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	603b      	str	r3, [r7, #0]
 80032b8:	4613      	mov	r3, r2
 80032ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032bc:	e03b      	b.n	8003336 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c4:	d037      	beq.n	8003336 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c6:	f7fd ff1b 	bl	8001100 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	6a3a      	ldr	r2, [r7, #32]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d302      	bcc.n	80032dc <UART_WaitOnFlagUntilTimeout+0x30>
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e03a      	b.n	8003356 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d023      	beq.n	8003336 <UART_WaitOnFlagUntilTimeout+0x8a>
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2b80      	cmp	r3, #128	@ 0x80
 80032f2:	d020      	beq.n	8003336 <UART_WaitOnFlagUntilTimeout+0x8a>
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b40      	cmp	r3, #64	@ 0x40
 80032f8:	d01d      	beq.n	8003336 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b08      	cmp	r3, #8
 8003306:	d116      	bne.n	8003336 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f857 	bl	80033d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2208      	movs	r2, #8
 8003328:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e00f      	b.n	8003356 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4013      	ands	r3, r2
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	429a      	cmp	r2, r3
 8003344:	bf0c      	ite	eq
 8003346:	2301      	moveq	r3, #1
 8003348:	2300      	movne	r3, #0
 800334a:	b2db      	uxtb	r3, r3
 800334c:	461a      	mov	r2, r3
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	429a      	cmp	r2, r3
 8003352:	d0b4      	beq.n	80032be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800335e:	b480      	push	{r7}
 8003360:	b085      	sub	sp, #20
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	4613      	mov	r3, r2
 800336a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	88fa      	ldrh	r2, [r7, #6]
 8003376:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	88fa      	ldrh	r2, [r7, #6]
 800337c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2222      	movs	r2, #34	@ 0x22
 8003388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d007      	beq.n	80033a4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033a2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695a      	ldr	r2, [r3, #20]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0201 	orr.w	r2, r2, #1
 80033b2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0220 	orr.w	r2, r2, #32
 80033c2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b095      	sub	sp, #84	@ 0x54
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	330c      	adds	r3, #12
 80033e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033e4:	e853 3f00 	ldrex	r3, [r3]
 80033e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80033ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	330c      	adds	r3, #12
 80033f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80033fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003400:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003402:	e841 2300 	strex	r3, r2, [r1]
 8003406:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1e5      	bne.n	80033da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	3314      	adds	r3, #20
 8003414:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	e853 3f00 	ldrex	r3, [r3]
 800341c:	61fb      	str	r3, [r7, #28]
   return(result);
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	f023 0301 	bic.w	r3, r3, #1
 8003424:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	3314      	adds	r3, #20
 800342c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800342e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003430:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003432:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003434:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003436:	e841 2300 	strex	r3, r2, [r1]
 800343a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800343c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1e5      	bne.n	800340e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003446:	2b01      	cmp	r3, #1
 8003448:	d119      	bne.n	800347e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	330c      	adds	r3, #12
 8003450:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	e853 3f00 	ldrex	r3, [r3]
 8003458:	60bb      	str	r3, [r7, #8]
   return(result);
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f023 0310 	bic.w	r3, r3, #16
 8003460:	647b      	str	r3, [r7, #68]	@ 0x44
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	330c      	adds	r3, #12
 8003468:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800346a:	61ba      	str	r2, [r7, #24]
 800346c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346e:	6979      	ldr	r1, [r7, #20]
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	e841 2300 	strex	r3, r2, [r1]
 8003476:	613b      	str	r3, [r7, #16]
   return(result);
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1e5      	bne.n	800344a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800348c:	bf00      	nop
 800348e:	3754      	adds	r7, #84	@ 0x54
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f7ff fee4 	bl	8003280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034b8:	bf00      	nop
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b21      	cmp	r3, #33	@ 0x21
 80034d2:	d13e      	bne.n	8003552 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034dc:	d114      	bne.n	8003508 <UART_Transmit_IT+0x48>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d110      	bne.n	8003508 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	461a      	mov	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	1c9a      	adds	r2, r3, #2
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	621a      	str	r2, [r3, #32]
 8003506:	e008      	b.n	800351a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	1c59      	adds	r1, r3, #1
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6211      	str	r1, [r2, #32]
 8003512:	781a      	ldrb	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800351e:	b29b      	uxth	r3, r3
 8003520:	3b01      	subs	r3, #1
 8003522:	b29b      	uxth	r3, r3
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	4619      	mov	r1, r3
 8003528:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10f      	bne.n	800354e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800353c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800354c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	e000      	b.n	8003554 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003552:	2302      	movs	r3, #2
  }
}
 8003554:	4618      	mov	r0, r3
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003576:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff fe73 	bl	800326c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08c      	sub	sp, #48	@ 0x30
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b22      	cmp	r3, #34	@ 0x22
 80035a2:	f040 80ae 	bne.w	8003702 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035ae:	d117      	bne.n	80035e0 <UART_Receive_IT+0x50>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d113      	bne.n	80035e0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d8:	1c9a      	adds	r2, r3, #2
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80035de:	e026      	b.n	800362e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035f2:	d007      	beq.n	8003604 <UART_Receive_IT+0x74>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10a      	bne.n	8003612 <UART_Receive_IT+0x82>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d106      	bne.n	8003612 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	b2da      	uxtb	r2, r3
 800360c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800360e:	701a      	strb	r2, [r3, #0]
 8003610:	e008      	b.n	8003624 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800361e:	b2da      	uxtb	r2, r3
 8003620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003622:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29b      	uxth	r3, r3
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	4619      	mov	r1, r3
 800363c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800363e:	2b00      	cmp	r3, #0
 8003640:	d15d      	bne.n	80036fe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0220 	bic.w	r2, r2, #32
 8003650:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003660:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695a      	ldr	r2, [r3, #20]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0201 	bic.w	r2, r2, #1
 8003670:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003684:	2b01      	cmp	r3, #1
 8003686:	d135      	bne.n	80036f4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	330c      	adds	r3, #12
 8003694:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	e853 3f00 	ldrex	r3, [r3]
 800369c:	613b      	str	r3, [r7, #16]
   return(result);
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f023 0310 	bic.w	r3, r3, #16
 80036a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	330c      	adds	r3, #12
 80036ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ae:	623a      	str	r2, [r7, #32]
 80036b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b2:	69f9      	ldr	r1, [r7, #28]
 80036b4:	6a3a      	ldr	r2, [r7, #32]
 80036b6:	e841 2300 	strex	r3, r2, [r1]
 80036ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1e5      	bne.n	800368e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0310 	and.w	r3, r3, #16
 80036cc:	2b10      	cmp	r3, #16
 80036ce:	d10a      	bne.n	80036e6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036d0:	2300      	movs	r3, #0
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80036ea:	4619      	mov	r1, r3
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff fdd1 	bl	8003294 <HAL_UARTEx_RxEventCallback>
 80036f2:	e002      	b.n	80036fa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7fd f94b 	bl	8000990 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	e002      	b.n	8003704 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	e000      	b.n	8003704 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003702:	2302      	movs	r3, #2
  }
}
 8003704:	4618      	mov	r0, r3
 8003706:	3730      	adds	r7, #48	@ 0x30
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800370c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003710:	b0c0      	sub	sp, #256	@ 0x100
 8003712:	af00      	add	r7, sp, #0
 8003714:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003728:	68d9      	ldr	r1, [r3, #12]
 800372a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	ea40 0301 	orr.w	r3, r0, r1
 8003734:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	431a      	orrs	r2, r3
 8003744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	431a      	orrs	r2, r3
 800374c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003764:	f021 010c 	bic.w	r1, r1, #12
 8003768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003772:	430b      	orrs	r3, r1
 8003774:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003786:	6999      	ldr	r1, [r3, #24]
 8003788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	ea40 0301 	orr.w	r3, r0, r1
 8003792:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	4b8f      	ldr	r3, [pc, #572]	@ (80039d8 <UART_SetConfig+0x2cc>)
 800379c:	429a      	cmp	r2, r3
 800379e:	d005      	beq.n	80037ac <UART_SetConfig+0xa0>
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	4b8d      	ldr	r3, [pc, #564]	@ (80039dc <UART_SetConfig+0x2d0>)
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d104      	bne.n	80037b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037ac:	f7fe f976 	bl	8001a9c <HAL_RCC_GetPCLK2Freq>
 80037b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80037b4:	e003      	b.n	80037be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037b6:	f7fe f95d 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 80037ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037c8:	f040 810c 	bne.w	80039e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037d0:	2200      	movs	r2, #0
 80037d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80037d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80037da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80037de:	4622      	mov	r2, r4
 80037e0:	462b      	mov	r3, r5
 80037e2:	1891      	adds	r1, r2, r2
 80037e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80037e6:	415b      	adcs	r3, r3
 80037e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80037ee:	4621      	mov	r1, r4
 80037f0:	eb12 0801 	adds.w	r8, r2, r1
 80037f4:	4629      	mov	r1, r5
 80037f6:	eb43 0901 	adc.w	r9, r3, r1
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003806:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800380a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800380e:	4690      	mov	r8, r2
 8003810:	4699      	mov	r9, r3
 8003812:	4623      	mov	r3, r4
 8003814:	eb18 0303 	adds.w	r3, r8, r3
 8003818:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800381c:	462b      	mov	r3, r5
 800381e:	eb49 0303 	adc.w	r3, r9, r3
 8003822:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003832:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003836:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800383a:	460b      	mov	r3, r1
 800383c:	18db      	adds	r3, r3, r3
 800383e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003840:	4613      	mov	r3, r2
 8003842:	eb42 0303 	adc.w	r3, r2, r3
 8003846:	657b      	str	r3, [r7, #84]	@ 0x54
 8003848:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800384c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003850:	f7fc fd36 	bl	80002c0 <__aeabi_uldivmod>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4b61      	ldr	r3, [pc, #388]	@ (80039e0 <UART_SetConfig+0x2d4>)
 800385a:	fba3 2302 	umull	r2, r3, r3, r2
 800385e:	095b      	lsrs	r3, r3, #5
 8003860:	011c      	lsls	r4, r3, #4
 8003862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003866:	2200      	movs	r2, #0
 8003868:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800386c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003870:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003874:	4642      	mov	r2, r8
 8003876:	464b      	mov	r3, r9
 8003878:	1891      	adds	r1, r2, r2
 800387a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800387c:	415b      	adcs	r3, r3
 800387e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003880:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003884:	4641      	mov	r1, r8
 8003886:	eb12 0a01 	adds.w	sl, r2, r1
 800388a:	4649      	mov	r1, r9
 800388c:	eb43 0b01 	adc.w	fp, r3, r1
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800389c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038a4:	4692      	mov	sl, r2
 80038a6:	469b      	mov	fp, r3
 80038a8:	4643      	mov	r3, r8
 80038aa:	eb1a 0303 	adds.w	r3, sl, r3
 80038ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038b2:	464b      	mov	r3, r9
 80038b4:	eb4b 0303 	adc.w	r3, fp, r3
 80038b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80038cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80038d0:	460b      	mov	r3, r1
 80038d2:	18db      	adds	r3, r3, r3
 80038d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80038d6:	4613      	mov	r3, r2
 80038d8:	eb42 0303 	adc.w	r3, r2, r3
 80038dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80038de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80038e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80038e6:	f7fc fceb 	bl	80002c0 <__aeabi_uldivmod>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4611      	mov	r1, r2
 80038f0:	4b3b      	ldr	r3, [pc, #236]	@ (80039e0 <UART_SetConfig+0x2d4>)
 80038f2:	fba3 2301 	umull	r2, r3, r3, r1
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	2264      	movs	r2, #100	@ 0x64
 80038fa:	fb02 f303 	mul.w	r3, r2, r3
 80038fe:	1acb      	subs	r3, r1, r3
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003906:	4b36      	ldr	r3, [pc, #216]	@ (80039e0 <UART_SetConfig+0x2d4>)
 8003908:	fba3 2302 	umull	r2, r3, r3, r2
 800390c:	095b      	lsrs	r3, r3, #5
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003914:	441c      	add	r4, r3
 8003916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800391a:	2200      	movs	r2, #0
 800391c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003920:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003924:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003928:	4642      	mov	r2, r8
 800392a:	464b      	mov	r3, r9
 800392c:	1891      	adds	r1, r2, r2
 800392e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003930:	415b      	adcs	r3, r3
 8003932:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003934:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003938:	4641      	mov	r1, r8
 800393a:	1851      	adds	r1, r2, r1
 800393c:	6339      	str	r1, [r7, #48]	@ 0x30
 800393e:	4649      	mov	r1, r9
 8003940:	414b      	adcs	r3, r1
 8003942:	637b      	str	r3, [r7, #52]	@ 0x34
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003950:	4659      	mov	r1, fp
 8003952:	00cb      	lsls	r3, r1, #3
 8003954:	4651      	mov	r1, sl
 8003956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800395a:	4651      	mov	r1, sl
 800395c:	00ca      	lsls	r2, r1, #3
 800395e:	4610      	mov	r0, r2
 8003960:	4619      	mov	r1, r3
 8003962:	4603      	mov	r3, r0
 8003964:	4642      	mov	r2, r8
 8003966:	189b      	adds	r3, r3, r2
 8003968:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800396c:	464b      	mov	r3, r9
 800396e:	460a      	mov	r2, r1
 8003970:	eb42 0303 	adc.w	r3, r2, r3
 8003974:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003984:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003988:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800398c:	460b      	mov	r3, r1
 800398e:	18db      	adds	r3, r3, r3
 8003990:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003992:	4613      	mov	r3, r2
 8003994:	eb42 0303 	adc.w	r3, r2, r3
 8003998:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800399a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800399e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80039a2:	f7fc fc8d 	bl	80002c0 <__aeabi_uldivmod>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4b0d      	ldr	r3, [pc, #52]	@ (80039e0 <UART_SetConfig+0x2d4>)
 80039ac:	fba3 1302 	umull	r1, r3, r3, r2
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	2164      	movs	r1, #100	@ 0x64
 80039b4:	fb01 f303 	mul.w	r3, r1, r3
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	3332      	adds	r3, #50	@ 0x32
 80039be:	4a08      	ldr	r2, [pc, #32]	@ (80039e0 <UART_SetConfig+0x2d4>)
 80039c0:	fba2 2303 	umull	r2, r3, r2, r3
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	f003 0207 	and.w	r2, r3, #7
 80039ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4422      	add	r2, r4
 80039d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039d4:	e106      	b.n	8003be4 <UART_SetConfig+0x4d8>
 80039d6:	bf00      	nop
 80039d8:	40011000 	.word	0x40011000
 80039dc:	40011400 	.word	0x40011400
 80039e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039e8:	2200      	movs	r2, #0
 80039ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80039ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80039f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80039f6:	4642      	mov	r2, r8
 80039f8:	464b      	mov	r3, r9
 80039fa:	1891      	adds	r1, r2, r2
 80039fc:	6239      	str	r1, [r7, #32]
 80039fe:	415b      	adcs	r3, r3
 8003a00:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a06:	4641      	mov	r1, r8
 8003a08:	1854      	adds	r4, r2, r1
 8003a0a:	4649      	mov	r1, r9
 8003a0c:	eb43 0501 	adc.w	r5, r3, r1
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	00eb      	lsls	r3, r5, #3
 8003a1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a1e:	00e2      	lsls	r2, r4, #3
 8003a20:	4614      	mov	r4, r2
 8003a22:	461d      	mov	r5, r3
 8003a24:	4643      	mov	r3, r8
 8003a26:	18e3      	adds	r3, r4, r3
 8003a28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a2c:	464b      	mov	r3, r9
 8003a2e:	eb45 0303 	adc.w	r3, r5, r3
 8003a32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a46:	f04f 0200 	mov.w	r2, #0
 8003a4a:	f04f 0300 	mov.w	r3, #0
 8003a4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a52:	4629      	mov	r1, r5
 8003a54:	008b      	lsls	r3, r1, #2
 8003a56:	4621      	mov	r1, r4
 8003a58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a5c:	4621      	mov	r1, r4
 8003a5e:	008a      	lsls	r2, r1, #2
 8003a60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003a64:	f7fc fc2c 	bl	80002c0 <__aeabi_uldivmod>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4b60      	ldr	r3, [pc, #384]	@ (8003bf0 <UART_SetConfig+0x4e4>)
 8003a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	011c      	lsls	r4, r3, #4
 8003a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a80:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003a88:	4642      	mov	r2, r8
 8003a8a:	464b      	mov	r3, r9
 8003a8c:	1891      	adds	r1, r2, r2
 8003a8e:	61b9      	str	r1, [r7, #24]
 8003a90:	415b      	adcs	r3, r3
 8003a92:	61fb      	str	r3, [r7, #28]
 8003a94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a98:	4641      	mov	r1, r8
 8003a9a:	1851      	adds	r1, r2, r1
 8003a9c:	6139      	str	r1, [r7, #16]
 8003a9e:	4649      	mov	r1, r9
 8003aa0:	414b      	adcs	r3, r1
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ab0:	4659      	mov	r1, fp
 8003ab2:	00cb      	lsls	r3, r1, #3
 8003ab4:	4651      	mov	r1, sl
 8003ab6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aba:	4651      	mov	r1, sl
 8003abc:	00ca      	lsls	r2, r1, #3
 8003abe:	4610      	mov	r0, r2
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	4642      	mov	r2, r8
 8003ac6:	189b      	adds	r3, r3, r2
 8003ac8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003acc:	464b      	mov	r3, r9
 8003ace:	460a      	mov	r2, r1
 8003ad0:	eb42 0303 	adc.w	r3, r2, r3
 8003ad4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ae2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003af0:	4649      	mov	r1, r9
 8003af2:	008b      	lsls	r3, r1, #2
 8003af4:	4641      	mov	r1, r8
 8003af6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003afa:	4641      	mov	r1, r8
 8003afc:	008a      	lsls	r2, r1, #2
 8003afe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b02:	f7fc fbdd 	bl	80002c0 <__aeabi_uldivmod>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	4b38      	ldr	r3, [pc, #224]	@ (8003bf0 <UART_SetConfig+0x4e4>)
 8003b0e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	2264      	movs	r2, #100	@ 0x64
 8003b16:	fb02 f303 	mul.w	r3, r2, r3
 8003b1a:	1acb      	subs	r3, r1, r3
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	3332      	adds	r3, #50	@ 0x32
 8003b20:	4a33      	ldr	r2, [pc, #204]	@ (8003bf0 <UART_SetConfig+0x4e4>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	095b      	lsrs	r3, r3, #5
 8003b28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b2c:	441c      	add	r4, r3
 8003b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b32:	2200      	movs	r2, #0
 8003b34:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b36:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b3c:	4642      	mov	r2, r8
 8003b3e:	464b      	mov	r3, r9
 8003b40:	1891      	adds	r1, r2, r2
 8003b42:	60b9      	str	r1, [r7, #8]
 8003b44:	415b      	adcs	r3, r3
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b4c:	4641      	mov	r1, r8
 8003b4e:	1851      	adds	r1, r2, r1
 8003b50:	6039      	str	r1, [r7, #0]
 8003b52:	4649      	mov	r1, r9
 8003b54:	414b      	adcs	r3, r1
 8003b56:	607b      	str	r3, [r7, #4]
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b64:	4659      	mov	r1, fp
 8003b66:	00cb      	lsls	r3, r1, #3
 8003b68:	4651      	mov	r1, sl
 8003b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b6e:	4651      	mov	r1, sl
 8003b70:	00ca      	lsls	r2, r1, #3
 8003b72:	4610      	mov	r0, r2
 8003b74:	4619      	mov	r1, r3
 8003b76:	4603      	mov	r3, r0
 8003b78:	4642      	mov	r2, r8
 8003b7a:	189b      	adds	r3, r3, r2
 8003b7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b7e:	464b      	mov	r3, r9
 8003b80:	460a      	mov	r2, r1
 8003b82:	eb42 0303 	adc.w	r3, r2, r3
 8003b86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b92:	667a      	str	r2, [r7, #100]	@ 0x64
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ba0:	4649      	mov	r1, r9
 8003ba2:	008b      	lsls	r3, r1, #2
 8003ba4:	4641      	mov	r1, r8
 8003ba6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003baa:	4641      	mov	r1, r8
 8003bac:	008a      	lsls	r2, r1, #2
 8003bae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003bb2:	f7fc fb85 	bl	80002c0 <__aeabi_uldivmod>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf0 <UART_SetConfig+0x4e4>)
 8003bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	2164      	movs	r1, #100	@ 0x64
 8003bc4:	fb01 f303 	mul.w	r3, r1, r3
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	3332      	adds	r3, #50	@ 0x32
 8003bce:	4a08      	ldr	r2, [pc, #32]	@ (8003bf0 <UART_SetConfig+0x4e4>)
 8003bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd4:	095b      	lsrs	r3, r3, #5
 8003bd6:	f003 020f 	and.w	r2, r3, #15
 8003bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4422      	add	r2, r4
 8003be2:	609a      	str	r2, [r3, #8]
}
 8003be4:	bf00      	nop
 8003be6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003bea:	46bd      	mov	sp, r7
 8003bec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bf0:	51eb851f 	.word	0x51eb851f

08003bf4 <textualProtocolInit>:

#include "textualProtocol.h"

// ======== Init =========== //
void textualProtocolInit(TextualProtocol *textualProtocol, uint8_t starterChar, uint8_t delimeter, UART_HandleTypeDef huart)
{
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b082      	sub	sp, #8
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	460b      	mov	r3, r1
 8003c02:	70fb      	strb	r3, [r7, #3]
 8003c04:	4613      	mov	r3, r2
 8003c06:	70bb      	strb	r3, [r7, #2]
	textualProtocol->starterChar = starterChar;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	78fa      	ldrb	r2, [r7, #3]
 8003c0c:	701a      	strb	r2, [r3, #0]
	textualProtocol->delimiter = delimeter;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	78ba      	ldrb	r2, [r7, #2]
 8003c12:	705a      	strb	r2, [r3, #1]
	textualProtocol->enableEcho = TRUE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	719a      	strb	r2, [r3, #6]
	textualProtocol->huart = huart;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 8003c20:	f107 0114 	add.w	r1, r7, #20
 8003c24:	2248      	movs	r2, #72	@ 0x48
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fbc2 	bl	80043b0 <memcpy>

	textualProtocolClear(textualProtocol, CLEAR_ALL);
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f85a 	bl	8003ce8 <textualProtocolClear>
}
 8003c34:	bf00      	nop
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c3e:	b002      	add	sp, #8
 8003c40:	4770      	bx	lr

08003c42 <textualProtocolAppendByte>:

void textualProtocolAppendByte(TextualProtocol *textualProtocol, uint8_t receivedByte)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b082      	sub	sp, #8
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	70fb      	strb	r3, [r7, #3]
	if ((receivedByte == CHAR_CR) || (receivedByte == CHAR_LF))
 8003c4e:	78fb      	ldrb	r3, [r7, #3]
 8003c50:	2b0d      	cmp	r3, #13
 8003c52:	d002      	beq.n	8003c5a <textualProtocolAppendByte+0x18>
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	2b0a      	cmp	r3, #10
 8003c58:	d117      	bne.n	8003c8a <textualProtocolAppendByte+0x48>
	{
		if (textualProtocol->length >= QTY_MIN_RX_DATA_BYTES)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	78db      	ldrb	r3, [r3, #3]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d90a      	bls.n	8003c78 <textualProtocolAppendByte+0x36>
		{
			if (textualProtocol->enableEcho == TRUE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	799b      	ldrb	r3, [r3, #6]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d102      	bne.n	8003c70 <textualProtocolAppendByte+0x2e>
			{
				textualProtocolSendNewLine(textualProtocol);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f94a 	bl	8003f04 <textualProtocolSendNewLine>
			}
			textualProtocol->enableDecoding = TRUE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	715a      	strb	r2, [r3, #5]
		if (textualProtocol->length >= QTY_MIN_RX_DATA_BYTES)
 8003c76:	e033      	b.n	8003ce0 <textualProtocolAppendByte+0x9e>
		}
		else
		{
			textualProtocolClear(textualProtocol, CLEAR_ALL);
 8003c78:	2101      	movs	r1, #1
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f834 	bl	8003ce8 <textualProtocolClear>
			textualProtocolSendStatusMessage(textualProtocol, STATUS_MESSAGE_SYNTAX_ERROR);
 8003c80:	21ab      	movs	r1, #171	@ 0xab
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f8f2 	bl	8003e6c <textualProtocolSendStatusMessage>
		if (textualProtocol->length >= QTY_MIN_RX_DATA_BYTES)
 8003c88:	e02a      	b.n	8003ce0 <textualProtocolAppendByte+0x9e>
		}
	}
	else if ((receivedByte >= ' ') && (receivedByte <= 'z') && (textualProtocol->enableDecoding == FALSE))
 8003c8a:	78fb      	ldrb	r3, [r7, #3]
 8003c8c:	2b1f      	cmp	r3, #31
 8003c8e:	d927      	bls.n	8003ce0 <textualProtocolAppendByte+0x9e>
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	2b7a      	cmp	r3, #122	@ 0x7a
 8003c94:	d824      	bhi.n	8003ce0 <textualProtocolAppendByte+0x9e>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	795b      	ldrb	r3, [r3, #5]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d120      	bne.n	8003ce0 <textualProtocolAppendByte+0x9e>
	{
		if (textualProtocol->byteIndex < QTY_MAX_RX_DATA_BYTES)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	791b      	ldrb	r3, [r3, #4]
 8003ca2:	2bea      	cmp	r3, #234	@ 0xea
 8003ca4:	d813      	bhi.n	8003cce <textualProtocolAppendByte+0x8c>
		{
			textualProtocol->dataPacket[textualProtocol->byteIndex] = receivedByte;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	791b      	ldrb	r3, [r3, #4]
 8003caa:	461a      	mov	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4413      	add	r3, r2
 8003cb0:	78fa      	ldrb	r2, [r7, #3]
 8003cb2:	721a      	strb	r2, [r3, #8]
			textualProtocol->byteIndex++;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	791b      	ldrb	r3, [r3, #4]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	711a      	strb	r2, [r3, #4]
			textualProtocol->length++;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	78db      	ldrb	r3, [r3, #3]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	70da      	strb	r2, [r3, #3]
		{
			textualProtocolClear(textualProtocol, CLEAR_ALL);
			textualProtocolSendStatusMessage(textualProtocol, STATUS_MESSAGE_SYNTAX_ERROR);
		}
	}
}
 8003ccc:	e008      	b.n	8003ce0 <textualProtocolAppendByte+0x9e>
			textualProtocolClear(textualProtocol, CLEAR_ALL);
 8003cce:	2101      	movs	r1, #1
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f809 	bl	8003ce8 <textualProtocolClear>
			textualProtocolSendStatusMessage(textualProtocol, STATUS_MESSAGE_SYNTAX_ERROR);
 8003cd6:	21ab      	movs	r1, #171	@ 0xab
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f8c7 	bl	8003e6c <textualProtocolSendStatusMessage>
}
 8003cde:	e7ff      	b.n	8003ce0 <textualProtocolAppendByte+0x9e>
 8003ce0:	bf00      	nop
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <textualProtocolClear>:

void textualProtocolClear(TextualProtocol *textualProtocol, TextualProtocolClear clear)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	73fb      	strb	r3, [r7, #15]

	switch (clear)
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	2b05      	cmp	r3, #5
 8003cfe:	f200 80af 	bhi.w	8003e60 <textualProtocolClear+0x178>
 8003d02:	a201      	add	r2, pc, #4	@ (adr r2, 8003d08 <textualProtocolClear+0x20>)
 8003d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d08:	08003d21 	.word	0x08003d21
 8003d0c:	08003da9 	.word	0x08003da9
 8003d10:	08003ddd 	.word	0x08003ddd
 8003d14:	08003df9 	.word	0x08003df9
 8003d18:	08003e11 	.word	0x08003e11
 8003d1c:	08003e29 	.word	0x08003e29
	{
		case CLEAR_ALL:
			textualProtocol->length = 0;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	70da      	strb	r2, [r3, #3]
			textualProtocol->byteIndex = 0;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	711a      	strb	r2, [r3, #4]
			textualProtocol->qtyOfDelimiters = 0;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	71da      	strb	r2, [r3, #7]
			textualProtocol->enableDecoding = FALSE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	715a      	strb	r2, [r3, #5]
			textualProtocol->textualProtocolRxStatus = INVALID_RX_TEXTUAL_PROTOCOL;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 21da 	strb.w	r2, [r3, #474]	@ 0x1da
			textualProtocol->commandLength = 0;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	709a      	strb	r2, [r3, #2]
			memset(textualProtocol->dataPacket, 0x00, QTY_MAX_RX_DATA_BYTES);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3308      	adds	r3, #8
 8003d4a:	22eb      	movs	r2, #235	@ 0xeb
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fafa 	bl	8004348 <memset>
			memset(textualProtocol->indexesOfDelimiters, 0x00, QTY_MAX_OF_DELIMITERS);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f203 13c5 	addw	r3, r3, #453	@ 0x1c5
 8003d5a:	220a      	movs	r2, #10
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 faf2 	bl	8004348 <memset>
			memset(textualProtocol->command, 0x00, QTY_MAX_OF_BYTES_IN_COMMAND);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f203 13cf 	addw	r3, r3, #463	@ 0x1cf
 8003d6a:	220b      	movs	r2, #11
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 faea 	bl	8004348 <memset>

			for (i = 0; i < QTY_MAX_OF_VALUES; i++)
 8003d74:	2300      	movs	r3, #0
 8003d76:	73fb      	strb	r3, [r7, #15]
 8003d78:	e012      	b.n	8003da0 <textualProtocolClear+0xb8>
			{
				memset(textualProtocol->values[i], 0x00, QTY_MAX_OF_BYTES_PER_VALUE);
 8003d7a:	7bfa      	ldrb	r2, [r7, #15]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	4413      	add	r3, r2
 8003d82:	00da      	lsls	r2, r3, #3
 8003d84:	1ad2      	subs	r2, r2, r3
 8003d86:	f102 03f0 	add.w	r3, r2, #240	@ 0xf0
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	3303      	adds	r3, #3
 8003d90:	2215      	movs	r2, #21
 8003d92:	2100      	movs	r1, #0
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fad7 	bl	8004348 <memset>
			for (i = 0; i < QTY_MAX_OF_VALUES; i++)
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	73fb      	strb	r3, [r7, #15]
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
 8003da2:	2b09      	cmp	r3, #9
 8003da4:	d9e9      	bls.n	8003d7a <textualProtocolClear+0x92>
			}

			break;
 8003da6:	e05c      	b.n	8003e62 <textualProtocolClear+0x17a>

		case CLEAR_VALUES:
			for (i = 0; i < QTY_MAX_OF_VALUES; i++)
 8003da8:	2300      	movs	r3, #0
 8003daa:	73fb      	strb	r3, [r7, #15]
 8003dac:	e012      	b.n	8003dd4 <textualProtocolClear+0xec>
			{
				memset(textualProtocol->values[i], 0x00, QTY_MAX_OF_BYTES_PER_VALUE);
 8003dae:	7bfa      	ldrb	r2, [r7, #15]
 8003db0:	4613      	mov	r3, r2
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	4413      	add	r3, r2
 8003db6:	00da      	lsls	r2, r3, #3
 8003db8:	1ad2      	subs	r2, r2, r3
 8003dba:	f102 03f0 	add.w	r3, r2, #240	@ 0xf0
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	3303      	adds	r3, #3
 8003dc4:	2215      	movs	r2, #21
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fabd 	bl	8004348 <memset>
			for (i = 0; i < QTY_MAX_OF_VALUES; i++)
 8003dce:	7bfb      	ldrb	r3, [r7, #15]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	73fb      	strb	r3, [r7, #15]
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	2b09      	cmp	r3, #9
 8003dd8:	d9e9      	bls.n	8003dae <textualProtocolClear+0xc6>
			}
			break;
 8003dda:	e042      	b.n	8003e62 <textualProtocolClear+0x17a>

		case CLEAR_DATA_PACKET:
			textualProtocol->length = 0;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	70da      	strb	r2, [r3, #3]
			textualProtocol->byteIndex = 0;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	711a      	strb	r2, [r3, #4]
			memset(textualProtocol->dataPacket, 0x00, QTY_MAX_RX_DATA_BYTES);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3308      	adds	r3, #8
 8003dec:	22eb      	movs	r2, #235	@ 0xeb
 8003dee:	2100      	movs	r1, #0
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 faa9 	bl	8004348 <memset>
			break;
 8003df6:	e034      	b.n	8003e62 <textualProtocolClear+0x17a>

		case CLEAR_INDEXES_OF_DELIMITERS:
			textualProtocol->qtyOfDelimiters = 0;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	71da      	strb	r2, [r3, #7]
			memset(textualProtocol->indexesOfDelimiters, 0x00, QTY_MAX_OF_DELIMITERS);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f203 13c5 	addw	r3, r3, #453	@ 0x1c5
 8003e04:	220a      	movs	r2, #10
 8003e06:	2100      	movs	r1, #0
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 fa9d 	bl	8004348 <memset>
			break;
 8003e0e:	e028      	b.n	8003e62 <textualProtocolClear+0x17a>

		case CLEAR_COMMAND:
			textualProtocol->commandLength = 0;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	709a      	strb	r2, [r3, #2]
			memset(textualProtocol->command, 0x00, QTY_MAX_OF_BYTES_IN_COMMAND);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f203 13cf 	addw	r3, r3, #463	@ 0x1cf
 8003e1c:	220b      	movs	r2, #11
 8003e1e:	2100      	movs	r1, #0
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 fa91 	bl	8004348 <memset>
			break;
 8003e26:	e01c      	b.n	8003e62 <textualProtocolClear+0x17a>

		case CLEAR_AFTER_DECODE:
			textualProtocol->length = 0;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	70da      	strb	r2, [r3, #3]
			textualProtocol->byteIndex = 0;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	711a      	strb	r2, [r3, #4]
			textualProtocol->qtyOfDelimiters = 0;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	71da      	strb	r2, [r3, #7]
			textualProtocol->enableDecoding = FALSE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	715a      	strb	r2, [r3, #5]
			memset(textualProtocol->dataPacket, 0x00, QTY_MAX_RX_DATA_BYTES);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3308      	adds	r3, #8
 8003e44:	22eb      	movs	r2, #235	@ 0xeb
 8003e46:	2100      	movs	r1, #0
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fa7d 	bl	8004348 <memset>
			memset(textualProtocol->indexesOfDelimiters, 0x00, QTY_MAX_OF_DELIMITERS);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f203 13c5 	addw	r3, r3, #453	@ 0x1c5
 8003e54:	220a      	movs	r2, #10
 8003e56:	2100      	movs	r1, #0
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 fa75 	bl	8004348 <memset>
			break;
 8003e5e:	e000      	b.n	8003e62 <textualProtocolClear+0x17a>

		default:
			break;
 8003e60:	bf00      	nop
	}
}
 8003e62:	bf00      	nop
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop

08003e6c <textualProtocolSendStatusMessage>:

void textualProtocolSendStatusMessage(TextualProtocol *textualProtocol, TextualProtocolStatusMessages statusMessage)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	70fb      	strb	r3, [r7, #3]
	switch (statusMessage)
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	3baa      	subs	r3, #170	@ 0xaa
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d833      	bhi.n	8003ee8 <textualProtocolSendStatusMessage+0x7c>
 8003e80:	a201      	add	r2, pc, #4	@ (adr r2, 8003e88 <textualProtocolSendStatusMessage+0x1c>)
 8003e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e86:	bf00      	nop
 8003e88:	08003e99 	.word	0x08003e99
 8003e8c:	08003ead 	.word	0x08003ead
 8003e90:	08003ec1 	.word	0x08003ec1
 8003e94:	08003ed5 	.word	0x08003ed5
	{
		case STATUS_MESSAGE_OK:
			HAL_UART_Transmit(&textualProtocol->huart, (uint8_t *) "OK\r\n", 4, HAL_MAX_DELAY);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 8003e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea2:	2204      	movs	r2, #4
 8003ea4:	4913      	ldr	r1, [pc, #76]	@ (8003ef4 <textualProtocolSendStatusMessage+0x88>)
 8003ea6:	f7fe fe9f 	bl	8002be8 <HAL_UART_Transmit>
			break;
 8003eaa:	e01e      	b.n	8003eea <textualProtocolSendStatusMessage+0x7e>

		case STATUS_MESSAGE_SYNTAX_ERROR:
			HAL_UART_Transmit(&textualProtocol->huart, (uint8_t *) "Syntax Error\r\n", 14, HAL_MAX_DELAY);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 8003eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb6:	220e      	movs	r2, #14
 8003eb8:	490f      	ldr	r1, [pc, #60]	@ (8003ef8 <textualProtocolSendStatusMessage+0x8c>)
 8003eba:	f7fe fe95 	bl	8002be8 <HAL_UART_Transmit>
			break;
 8003ebe:	e014      	b.n	8003eea <textualProtocolSendStatusMessage+0x7e>

		case STATUS_MESSAGE_UNKNOWN_COMMAND:
			HAL_UART_Transmit(&textualProtocol->huart, (uint8_t *) "Unknown Command\r\n", 17, HAL_MAX_DELAY);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 8003ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eca:	2211      	movs	r2, #17
 8003ecc:	490b      	ldr	r1, [pc, #44]	@ (8003efc <textualProtocolSendStatusMessage+0x90>)
 8003ece:	f7fe fe8b 	bl	8002be8 <HAL_UART_Transmit>
			break;
 8003ed2:	e00a      	b.n	8003eea <textualProtocolSendStatusMessage+0x7e>

		case STATUS_MESSAGE_VALUE_ERROR:
			HAL_UART_Transmit(&textualProtocol->huart, (uint8_t *) "Value Error\r\n", 13, HAL_MAX_DELAY);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 8003eda:	f04f 33ff 	mov.w	r3, #4294967295
 8003ede:	220d      	movs	r2, #13
 8003ee0:	4907      	ldr	r1, [pc, #28]	@ (8003f00 <textualProtocolSendStatusMessage+0x94>)
 8003ee2:	f7fe fe81 	bl	8002be8 <HAL_UART_Transmit>
			break;
 8003ee6:	e000      	b.n	8003eea <textualProtocolSendStatusMessage+0x7e>

		default:
			break;
 8003ee8:	bf00      	nop
	}
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	08004c60 	.word	0x08004c60
 8003ef8:	08004c68 	.word	0x08004c68
 8003efc:	08004c78 	.word	0x08004c78
 8003f00:	08004c8c 	.word	0x08004c8c

08003f04 <textualProtocolSendNewLine>:

void textualProtocolSendNewLine(TextualProtocol *textualProtocol)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&textualProtocol->huart, (uint8_t *) "\r\n", 2, HAL_MAX_DELAY);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 8003f12:	f04f 33ff 	mov.w	r3, #4294967295
 8003f16:	2202      	movs	r2, #2
 8003f18:	4903      	ldr	r1, [pc, #12]	@ (8003f28 <textualProtocolSendNewLine+0x24>)
 8003f1a:	f7fe fe65 	bl	8002be8 <HAL_UART_Transmit>
}
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	08004c9c 	.word	0x08004c9c

08003f2c <textualProtocolDecode>:

void textualProtocolDecode(TextualProtocol *textualProtocol)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
	if (textualProtocol->dataPacket[0] != textualProtocol->starterChar)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	7a1a      	ldrb	r2, [r3, #8]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d008      	beq.n	8003f52 <textualProtocolDecode+0x26>
	{
		textualProtocolSendStatusMessage(textualProtocol, STATUS_MESSAGE_SYNTAX_ERROR);
 8003f40:	21ab      	movs	r1, #171	@ 0xab
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff ff92 	bl	8003e6c <textualProtocolSendStatusMessage>
		textualProtocolClear(textualProtocol, CLEAR_ALL);
 8003f48:	2101      	movs	r1, #1
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff fecc 	bl	8003ce8 <textualProtocolClear>
		return;
 8003f50:	e010      	b.n	8003f74 <textualProtocolDecode+0x48>
	}

	textualProtocolExtractCommand(textualProtocol);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f811 	bl	8003f7a <textualProtocolExtractCommand>
	textualProtocolFindDelimiters(textualProtocol);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f865 	bl	8004028 <textualProtocolFindDelimiters>

	if (textualProtocol->qtyOfDelimiters > 0)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	79db      	ldrb	r3, [r3, #7]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <textualProtocolDecode+0x40>
	{
		textualProtocolExtractValues(textualProtocol);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f890 	bl	800408c <textualProtocolExtractValues>
	}

	textualProtocolClear(textualProtocol, CLEAR_AFTER_DECODE);
 8003f6c:	2106      	movs	r1, #6
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff feba 	bl	8003ce8 <textualProtocolClear>
}
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <textualProtocolExtractCommand>:

void textualProtocolExtractCommand(TextualProtocol *textualProtocol)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
	uint8_t i = 1;
 8003f82:	2301      	movs	r3, #1
 8003f84:	73fb      	strb	r3, [r7, #15]

	if (((textualProtocol->dataPacket[1] >= 'A') && (textualProtocol->dataPacket[1] <= 'Z'))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	7a5b      	ldrb	r3, [r3, #9]
 8003f8a:	2b40      	cmp	r3, #64	@ 0x40
 8003f8c:	d903      	bls.n	8003f96 <textualProtocolExtractCommand+0x1c>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	7a5b      	ldrb	r3, [r3, #9]
 8003f92:	2b5a      	cmp	r3, #90	@ 0x5a
 8003f94:	d907      	bls.n	8003fa6 <textualProtocolExtractCommand+0x2c>
		||
		((textualProtocol->dataPacket[1] >= 'a') && (textualProtocol->dataPacket[1] <= 'z')))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	7a5b      	ldrb	r3, [r3, #9]
		||
 8003f9a:	2b60      	cmp	r3, #96	@ 0x60
 8003f9c:	d935      	bls.n	800400a <textualProtocolExtractCommand+0x90>
		((textualProtocol->dataPacket[1] >= 'a') && (textualProtocol->dataPacket[1] <= 'z')))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	7a5b      	ldrb	r3, [r3, #9]
 8003fa2:	2b7a      	cmp	r3, #122	@ 0x7a
 8003fa4:	d831      	bhi.n	800400a <textualProtocolExtractCommand+0x90>
	{
		textualProtocol->textualProtocolRxStatus = VALID_RX_TEXTUAL_PROTOCOL;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 21da 	strb.w	r2, [r3, #474]	@ 0x1da
		while (textualProtocol->commandLength < (QTY_MAX_OF_BYTES_IN_COMMAND - 1))
 8003fae:	e027      	b.n	8004000 <textualProtocolExtractCommand+0x86>
		{
			if (textualProtocol->dataPacket[i] == textualProtocol->delimiter)
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	7a1a      	ldrb	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	785b      	ldrb	r3, [r3, #1]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d02d      	beq.n	800401c <textualProtocolExtractCommand+0xa2>
			{
				return;
			}
			else if ((textualProtocol->dataPacket[i] >= ' ') && (textualProtocol->dataPacket[i] <= '}'))
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	7a1b      	ldrb	r3, [r3, #8]
 8003fc8:	2b1f      	cmp	r3, #31
 8003fca:	d929      	bls.n	8004020 <textualProtocolExtractCommand+0xa6>
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	7a1b      	ldrb	r3, [r3, #8]
 8003fd4:	2b7d      	cmp	r3, #125	@ 0x7d
 8003fd6:	d823      	bhi.n	8004020 <textualProtocolExtractCommand+0xa6>
			{
				textualProtocol->command[textualProtocol->commandLength] = textualProtocol->dataPacket[i];
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	7892      	ldrb	r2, [r2, #2]
 8003fde:	4611      	mov	r1, r2
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	7a1a      	ldrb	r2, [r3, #8]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	440b      	add	r3, r1
 8003fea:	f883 21cf 	strb.w	r2, [r3, #463]	@ 0x1cf
				textualProtocol->commandLength++;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	789b      	ldrb	r3, [r3, #2]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	709a      	strb	r2, [r3, #2]
				i++;
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	73fb      	strb	r3, [r7, #15]
		while (textualProtocol->commandLength < (QTY_MAX_OF_BYTES_IN_COMMAND - 1))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	789b      	ldrb	r3, [r3, #2]
 8004004:	2b09      	cmp	r3, #9
 8004006:	d9d3      	bls.n	8003fb0 <textualProtocolExtractCommand+0x36>
	if (((textualProtocol->dataPacket[1] >= 'A') && (textualProtocol->dataPacket[1] <= 'Z'))
 8004008:	e00b      	b.n	8004022 <textualProtocolExtractCommand+0xa8>
			}
		}
	}
	else
	{
		textualProtocolSendStatusMessage(textualProtocol, STATUS_MESSAGE_UNKNOWN_COMMAND);
 800400a:	21ac      	movs	r1, #172	@ 0xac
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff ff2d 	bl	8003e6c <textualProtocolSendStatusMessage>
		textualProtocolClear(textualProtocol, CLEAR_ALL);
 8004012:	2101      	movs	r1, #1
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7ff fe67 	bl	8003ce8 <textualProtocolClear>
		return;
 800401a:	e002      	b.n	8004022 <textualProtocolExtractCommand+0xa8>
				return;
 800401c:	bf00      	nop
 800401e:	e000      	b.n	8004022 <textualProtocolExtractCommand+0xa8>
				return;
 8004020:	bf00      	nop
	}
}
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <textualProtocolFindDelimiters>:

void textualProtocolFindDelimiters(TextualProtocol *textualProtocol)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8004030:	2300      	movs	r3, #0
 8004032:	73fb      	strb	r3, [r7, #15]
	uint8_t i_delimeters = 0;
 8004034:	2300      	movs	r3, #0
 8004036:	73bb      	strb	r3, [r7, #14]

	for (i = 0; i < QTY_MAX_RX_DATA_BYTES; i++)
 8004038:	2300      	movs	r3, #0
 800403a:	73fb      	strb	r3, [r7, #15]
 800403c:	e01c      	b.n	8004078 <textualProtocolFindDelimiters+0x50>
	{
		if (i_delimeters < QTY_MAX_OF_DELIMITERS)
 800403e:	7bbb      	ldrb	r3, [r7, #14]
 8004040:	2b09      	cmp	r3, #9
 8004042:	d816      	bhi.n	8004072 <textualProtocolFindDelimiters+0x4a>
		{
			if (textualProtocol->dataPacket[i] == textualProtocol->delimiter)
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	4413      	add	r3, r2
 800404a:	7a1a      	ldrb	r2, [r3, #8]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	785b      	ldrb	r3, [r3, #1]
 8004050:	429a      	cmp	r2, r3
 8004052:	d10e      	bne.n	8004072 <textualProtocolFindDelimiters+0x4a>
			{
				textualProtocol->indexesOfDelimiters[i_delimeters] = i;
 8004054:	7bbb      	ldrb	r3, [r7, #14]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	4413      	add	r3, r2
 800405a:	7bfa      	ldrb	r2, [r7, #15]
 800405c:	f883 21c5 	strb.w	r2, [r3, #453]	@ 0x1c5
				textualProtocol->qtyOfDelimiters++;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	79db      	ldrb	r3, [r3, #7]
 8004064:	3301      	adds	r3, #1
 8004066:	b2da      	uxtb	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	71da      	strb	r2, [r3, #7]
				i_delimeters++;
 800406c:	7bbb      	ldrb	r3, [r7, #14]
 800406e:	3301      	adds	r3, #1
 8004070:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < QTY_MAX_RX_DATA_BYTES; i++)
 8004072:	7bfb      	ldrb	r3, [r7, #15]
 8004074:	3301      	adds	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	2bea      	cmp	r3, #234	@ 0xea
 800407c:	d9df      	bls.n	800403e <textualProtocolFindDelimiters+0x16>
			}
		}
	}
}
 800407e:	bf00      	nop
 8004080:	bf00      	nop
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <textualProtocolExtractValues>:

void textualProtocolExtractValues(TextualProtocol *textualProtocol)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
	uint8_t value = 0;
 8004094:	2300      	movs	r3, #0
 8004096:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 8004098:	2300      	movs	r3, #0
 800409a:	73bb      	strb	r3, [r7, #14]
	for (value = 0; value < textualProtocol->qtyOfDelimiters; value++)
 800409c:	2300      	movs	r3, #0
 800409e:	73fb      	strb	r3, [r7, #15]
 80040a0:	e02c      	b.n	80040fc <textualProtocolExtractValues+0x70>
	{
		for (byte = 0; byte < (QTY_MAX_OF_BYTES_PER_VALUE - 1); byte++)
 80040a2:	2300      	movs	r3, #0
 80040a4:	73bb      	strb	r3, [r7, #14]
 80040a6:	e023      	b.n	80040f0 <textualProtocolExtractValues+0x64>
		{
			uint8_t index_delimiter = textualProtocol->indexesOfDelimiters[value];
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	4413      	add	r3, r2
 80040ae:	f893 31c5 	ldrb.w	r3, [r3, #453]	@ 0x1c5
 80040b2:	737b      	strb	r3, [r7, #13]
			uint8_t data = textualProtocol->dataPacket[index_delimiter + byte + 1];
 80040b4:	7b7a      	ldrb	r2, [r7, #13]
 80040b6:	7bbb      	ldrb	r3, [r7, #14]
 80040b8:	4413      	add	r3, r2
 80040ba:	3301      	adds	r3, #1
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	4413      	add	r3, r2
 80040c0:	7a1b      	ldrb	r3, [r3, #8]
 80040c2:	733b      	strb	r3, [r7, #12]
			if ((data == ',') || (data == 0))
 80040c4:	7b3b      	ldrb	r3, [r7, #12]
 80040c6:	2b2c      	cmp	r3, #44	@ 0x2c
 80040c8:	d015      	beq.n	80040f6 <textualProtocolExtractValues+0x6a>
 80040ca:	7b3b      	ldrb	r3, [r7, #12]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d012      	beq.n	80040f6 <textualProtocolExtractValues+0x6a>
			{
				break;
			}

			textualProtocol->values[value][byte] = data;
 80040d0:	7bfa      	ldrb	r2, [r7, #15]
 80040d2:	7bb9      	ldrb	r1, [r7, #14]
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	4613      	mov	r3, r2
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	4413      	add	r3, r2
 80040dc:	00da      	lsls	r2, r3, #3
 80040de:	1ad2      	subs	r2, r2, r3
 80040e0:	1883      	adds	r3, r0, r2
 80040e2:	440b      	add	r3, r1
 80040e4:	33f3      	adds	r3, #243	@ 0xf3
 80040e6:	7b3a      	ldrb	r2, [r7, #12]
 80040e8:	701a      	strb	r2, [r3, #0]
		for (byte = 0; byte < (QTY_MAX_OF_BYTES_PER_VALUE - 1); byte++)
 80040ea:	7bbb      	ldrb	r3, [r7, #14]
 80040ec:	3301      	adds	r3, #1
 80040ee:	73bb      	strb	r3, [r7, #14]
 80040f0:	7bbb      	ldrb	r3, [r7, #14]
 80040f2:	2b13      	cmp	r3, #19
 80040f4:	d9d8      	bls.n	80040a8 <textualProtocolExtractValues+0x1c>
	for (value = 0; value < textualProtocol->qtyOfDelimiters; value++)
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
 80040f8:	3301      	adds	r3, #1
 80040fa:	73fb      	strb	r3, [r7, #15]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	79db      	ldrb	r3, [r3, #7]
 8004100:	7bfa      	ldrb	r2, [r7, #15]
 8004102:	429a      	cmp	r2, r3
 8004104:	d3cd      	bcc.n	80040a2 <textualProtocolExtractValues+0x16>
		}
	}
}
 8004106:	bf00      	nop
 8004108:	bf00      	nop
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <textualProtocolPrintCurrentData>:

void textualProtocolPrintCurrentData(TextualProtocol *textualProtocol)
{
 8004114:	b590      	push	{r4, r7, lr}
 8004116:	b08d      	sub	sp, #52	@ 0x34
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	char message[35];
	uint8_t value = 0;
 800411c:	2300      	movs	r3, #0
 800411e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	memset(message, 0x00, 35);
 8004122:	f107 030c 	add.w	r3, r7, #12
 8004126:	2223      	movs	r2, #35	@ 0x23
 8004128:	2100      	movs	r1, #0
 800412a:	4618      	mov	r0, r3
 800412c:	f000 f90c 	bl	8004348 <memset>
	sprintf(message, "==============================\r\n");
 8004130:	f107 030c 	add.w	r3, r7, #12
 8004134:	4969      	ldr	r1, [pc, #420]	@ (80042dc <textualProtocolPrintCurrentData+0x1c8>)
 8004136:	4618      	mov	r0, r3
 8004138:	f000 f8e6 	bl	8004308 <siprintf>
	HAL_UART_Transmit(&textualProtocol->huart, ((uint8_t *) message), strlen(message), HAL_MAX_DELAY);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f503 74ee 	add.w	r4, r3, #476	@ 0x1dc
 8004142:	f107 030c 	add.w	r3, r7, #12
 8004146:	4618      	mov	r0, r3
 8004148:	f7fc f862 	bl	8000210 <strlen>
 800414c:	4603      	mov	r3, r0
 800414e:	b29a      	uxth	r2, r3
 8004150:	f107 010c 	add.w	r1, r7, #12
 8004154:	f04f 33ff 	mov.w	r3, #4294967295
 8004158:	4620      	mov	r0, r4
 800415a:	f7fe fd45 	bl	8002be8 <HAL_UART_Transmit>

	memset(message, 0x00, 35);
 800415e:	f107 030c 	add.w	r3, r7, #12
 8004162:	2223      	movs	r2, #35	@ 0x23
 8004164:	2100      	movs	r1, #0
 8004166:	4618      	mov	r0, r3
 8004168:	f000 f8ee 	bl	8004348 <memset>
	sprintf(message, "Starter: '%c'\r\n", textualProtocol->starterChar);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	461a      	mov	r2, r3
 8004172:	f107 030c 	add.w	r3, r7, #12
 8004176:	495a      	ldr	r1, [pc, #360]	@ (80042e0 <textualProtocolPrintCurrentData+0x1cc>)
 8004178:	4618      	mov	r0, r3
 800417a:	f000 f8c5 	bl	8004308 <siprintf>
	HAL_UART_Transmit(&textualProtocol->huart, ((uint8_t *) message), strlen(message), HAL_MAX_DELAY);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f503 74ee 	add.w	r4, r3, #476	@ 0x1dc
 8004184:	f107 030c 	add.w	r3, r7, #12
 8004188:	4618      	mov	r0, r3
 800418a:	f7fc f841 	bl	8000210 <strlen>
 800418e:	4603      	mov	r3, r0
 8004190:	b29a      	uxth	r2, r3
 8004192:	f107 010c 	add.w	r1, r7, #12
 8004196:	f04f 33ff 	mov.w	r3, #4294967295
 800419a:	4620      	mov	r0, r4
 800419c:	f7fe fd24 	bl	8002be8 <HAL_UART_Transmit>

	memset(message, 0x00, 35);
 80041a0:	f107 030c 	add.w	r3, r7, #12
 80041a4:	2223      	movs	r2, #35	@ 0x23
 80041a6:	2100      	movs	r1, #0
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 f8cd 	bl	8004348 <memset>
	sprintf(message, "Command: '%s'\r\n", textualProtocol->command);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f203 12cf 	addw	r2, r3, #463	@ 0x1cf
 80041b4:	f107 030c 	add.w	r3, r7, #12
 80041b8:	494a      	ldr	r1, [pc, #296]	@ (80042e4 <textualProtocolPrintCurrentData+0x1d0>)
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 f8a4 	bl	8004308 <siprintf>
	HAL_UART_Transmit(&textualProtocol->huart, ((uint8_t *) message), strlen(message), HAL_MAX_DELAY);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f503 74ee 	add.w	r4, r3, #476	@ 0x1dc
 80041c6:	f107 030c 	add.w	r3, r7, #12
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fc f820 	bl	8000210 <strlen>
 80041d0:	4603      	mov	r3, r0
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	f107 010c 	add.w	r1, r7, #12
 80041d8:	f04f 33ff 	mov.w	r3, #4294967295
 80041dc:	4620      	mov	r0, r4
 80041de:	f7fe fd03 	bl	8002be8 <HAL_UART_Transmit>

	memset(message, 0x00, 35);
 80041e2:	f107 030c 	add.w	r3, r7, #12
 80041e6:	2223      	movs	r2, #35	@ 0x23
 80041e8:	2100      	movs	r1, #0
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 f8ac 	bl	8004348 <memset>
	sprintf(message, "Delimiter: '%c'\r\n", textualProtocol->delimiter);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	785b      	ldrb	r3, [r3, #1]
 80041f4:	461a      	mov	r2, r3
 80041f6:	f107 030c 	add.w	r3, r7, #12
 80041fa:	493b      	ldr	r1, [pc, #236]	@ (80042e8 <textualProtocolPrintCurrentData+0x1d4>)
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 f883 	bl	8004308 <siprintf>
	HAL_UART_Transmit(&textualProtocol->huart, ((uint8_t *) message), strlen(message), HAL_MAX_DELAY);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f503 74ee 	add.w	r4, r3, #476	@ 0x1dc
 8004208:	f107 030c 	add.w	r3, r7, #12
 800420c:	4618      	mov	r0, r3
 800420e:	f7fb ffff 	bl	8000210 <strlen>
 8004212:	4603      	mov	r3, r0
 8004214:	b29a      	uxth	r2, r3
 8004216:	f107 010c 	add.w	r1, r7, #12
 800421a:	f04f 33ff 	mov.w	r3, #4294967295
 800421e:	4620      	mov	r0, r4
 8004220:	f7fe fce2 	bl	8002be8 <HAL_UART_Transmit>

	for (value = 0; value < QTY_MAX_OF_VALUES; value++)
 8004224:	2300      	movs	r3, #0
 8004226:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800422a:	e030      	b.n	800428e <textualProtocolPrintCurrentData+0x17a>
	{
		memset(message, 0x00, 35);
 800422c:	f107 030c 	add.w	r3, r7, #12
 8004230:	2223      	movs	r2, #35	@ 0x23
 8004232:	2100      	movs	r1, #0
 8004234:	4618      	mov	r0, r3
 8004236:	f000 f887 	bl	8004348 <memset>
		sprintf(message, "Value %d: %s\r\n", value, textualProtocol->values[value]);
 800423a:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800423e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8004242:	4613      	mov	r3, r2
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	4413      	add	r3, r2
 8004248:	00da      	lsls	r2, r3, #3
 800424a:	1ad2      	subs	r2, r2, r3
 800424c:	f102 03f0 	add.w	r3, r2, #240	@ 0xf0
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	4413      	add	r3, r2
 8004254:	3303      	adds	r3, #3
 8004256:	f107 000c 	add.w	r0, r7, #12
 800425a:	460a      	mov	r2, r1
 800425c:	4923      	ldr	r1, [pc, #140]	@ (80042ec <textualProtocolPrintCurrentData+0x1d8>)
 800425e:	f000 f853 	bl	8004308 <siprintf>
		HAL_UART_Transmit(&textualProtocol->huart, ((uint8_t *) message), strlen(message), HAL_MAX_DELAY);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f503 74ee 	add.w	r4, r3, #476	@ 0x1dc
 8004268:	f107 030c 	add.w	r3, r7, #12
 800426c:	4618      	mov	r0, r3
 800426e:	f7fb ffcf 	bl	8000210 <strlen>
 8004272:	4603      	mov	r3, r0
 8004274:	b29a      	uxth	r2, r3
 8004276:	f107 010c 	add.w	r1, r7, #12
 800427a:	f04f 33ff 	mov.w	r3, #4294967295
 800427e:	4620      	mov	r0, r4
 8004280:	f7fe fcb2 	bl	8002be8 <HAL_UART_Transmit>
	for (value = 0; value < QTY_MAX_OF_VALUES; value++)
 8004284:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004288:	3301      	adds	r3, #1
 800428a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800428e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004292:	2b09      	cmp	r3, #9
 8004294:	d9ca      	bls.n	800422c <textualProtocolPrintCurrentData+0x118>
	}

	memset(message, 0x00, 35);
 8004296:	f107 030c 	add.w	r3, r7, #12
 800429a:	2223      	movs	r2, #35	@ 0x23
 800429c:	2100      	movs	r1, #0
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 f852 	bl	8004348 <memset>
	sprintf(message, "==============================\r\n");
 80042a4:	f107 030c 	add.w	r3, r7, #12
 80042a8:	490c      	ldr	r1, [pc, #48]	@ (80042dc <textualProtocolPrintCurrentData+0x1c8>)
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 f82c 	bl	8004308 <siprintf>
	HAL_UART_Transmit(&textualProtocol->huart, ((uint8_t *) message), strlen(message), HAL_MAX_DELAY);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f503 74ee 	add.w	r4, r3, #476	@ 0x1dc
 80042b6:	f107 030c 	add.w	r3, r7, #12
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fb ffa8 	bl	8000210 <strlen>
 80042c0:	4603      	mov	r3, r0
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	f107 010c 	add.w	r1, r7, #12
 80042c8:	f04f 33ff 	mov.w	r3, #4294967295
 80042cc:	4620      	mov	r0, r4
 80042ce:	f7fe fc8b 	bl	8002be8 <HAL_UART_Transmit>
}
 80042d2:	bf00      	nop
 80042d4:	3734      	adds	r7, #52	@ 0x34
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd90      	pop	{r4, r7, pc}
 80042da:	bf00      	nop
 80042dc:	08004ca0 	.word	0x08004ca0
 80042e0:	08004cc4 	.word	0x08004cc4
 80042e4:	08004cd4 	.word	0x08004cd4
 80042e8:	08004ce4 	.word	0x08004ce4
 80042ec:	08004cf8 	.word	0x08004cf8

080042f0 <textualProtocolGetEchoEnable>:

Bool textualProtocolGetEchoEnable(TextualProtocol *textualProtocol)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
	return textualProtocol->enableEcho;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	799b      	ldrb	r3, [r3, #6]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <siprintf>:
 8004308:	b40e      	push	{r1, r2, r3}
 800430a:	b500      	push	{lr}
 800430c:	b09c      	sub	sp, #112	@ 0x70
 800430e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004310:	9002      	str	r0, [sp, #8]
 8004312:	9006      	str	r0, [sp, #24]
 8004314:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004318:	4809      	ldr	r0, [pc, #36]	@ (8004340 <siprintf+0x38>)
 800431a:	9107      	str	r1, [sp, #28]
 800431c:	9104      	str	r1, [sp, #16]
 800431e:	4909      	ldr	r1, [pc, #36]	@ (8004344 <siprintf+0x3c>)
 8004320:	f853 2b04 	ldr.w	r2, [r3], #4
 8004324:	9105      	str	r1, [sp, #20]
 8004326:	6800      	ldr	r0, [r0, #0]
 8004328:	9301      	str	r3, [sp, #4]
 800432a:	a902      	add	r1, sp, #8
 800432c:	f000 f9a2 	bl	8004674 <_svfiprintf_r>
 8004330:	9b02      	ldr	r3, [sp, #8]
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	b01c      	add	sp, #112	@ 0x70
 8004338:	f85d eb04 	ldr.w	lr, [sp], #4
 800433c:	b003      	add	sp, #12
 800433e:	4770      	bx	lr
 8004340:	2000000c 	.word	0x2000000c
 8004344:	ffff0208 	.word	0xffff0208

08004348 <memset>:
 8004348:	4402      	add	r2, r0
 800434a:	4603      	mov	r3, r0
 800434c:	4293      	cmp	r3, r2
 800434e:	d100      	bne.n	8004352 <memset+0xa>
 8004350:	4770      	bx	lr
 8004352:	f803 1b01 	strb.w	r1, [r3], #1
 8004356:	e7f9      	b.n	800434c <memset+0x4>

08004358 <__errno>:
 8004358:	4b01      	ldr	r3, [pc, #4]	@ (8004360 <__errno+0x8>)
 800435a:	6818      	ldr	r0, [r3, #0]
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	2000000c 	.word	0x2000000c

08004364 <__libc_init_array>:
 8004364:	b570      	push	{r4, r5, r6, lr}
 8004366:	4d0d      	ldr	r5, [pc, #52]	@ (800439c <__libc_init_array+0x38>)
 8004368:	4c0d      	ldr	r4, [pc, #52]	@ (80043a0 <__libc_init_array+0x3c>)
 800436a:	1b64      	subs	r4, r4, r5
 800436c:	10a4      	asrs	r4, r4, #2
 800436e:	2600      	movs	r6, #0
 8004370:	42a6      	cmp	r6, r4
 8004372:	d109      	bne.n	8004388 <__libc_init_array+0x24>
 8004374:	4d0b      	ldr	r5, [pc, #44]	@ (80043a4 <__libc_init_array+0x40>)
 8004376:	4c0c      	ldr	r4, [pc, #48]	@ (80043a8 <__libc_init_array+0x44>)
 8004378:	f000 fc66 	bl	8004c48 <_init>
 800437c:	1b64      	subs	r4, r4, r5
 800437e:	10a4      	asrs	r4, r4, #2
 8004380:	2600      	movs	r6, #0
 8004382:	42a6      	cmp	r6, r4
 8004384:	d105      	bne.n	8004392 <__libc_init_array+0x2e>
 8004386:	bd70      	pop	{r4, r5, r6, pc}
 8004388:	f855 3b04 	ldr.w	r3, [r5], #4
 800438c:	4798      	blx	r3
 800438e:	3601      	adds	r6, #1
 8004390:	e7ee      	b.n	8004370 <__libc_init_array+0xc>
 8004392:	f855 3b04 	ldr.w	r3, [r5], #4
 8004396:	4798      	blx	r3
 8004398:	3601      	adds	r6, #1
 800439a:	e7f2      	b.n	8004382 <__libc_init_array+0x1e>
 800439c:	08004d5c 	.word	0x08004d5c
 80043a0:	08004d5c 	.word	0x08004d5c
 80043a4:	08004d5c 	.word	0x08004d5c
 80043a8:	08004d60 	.word	0x08004d60

080043ac <__retarget_lock_acquire_recursive>:
 80043ac:	4770      	bx	lr

080043ae <__retarget_lock_release_recursive>:
 80043ae:	4770      	bx	lr

080043b0 <memcpy>:
 80043b0:	440a      	add	r2, r1
 80043b2:	4291      	cmp	r1, r2
 80043b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80043b8:	d100      	bne.n	80043bc <memcpy+0xc>
 80043ba:	4770      	bx	lr
 80043bc:	b510      	push	{r4, lr}
 80043be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043c6:	4291      	cmp	r1, r2
 80043c8:	d1f9      	bne.n	80043be <memcpy+0xe>
 80043ca:	bd10      	pop	{r4, pc}

080043cc <_free_r>:
 80043cc:	b538      	push	{r3, r4, r5, lr}
 80043ce:	4605      	mov	r5, r0
 80043d0:	2900      	cmp	r1, #0
 80043d2:	d041      	beq.n	8004458 <_free_r+0x8c>
 80043d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043d8:	1f0c      	subs	r4, r1, #4
 80043da:	2b00      	cmp	r3, #0
 80043dc:	bfb8      	it	lt
 80043de:	18e4      	addlt	r4, r4, r3
 80043e0:	f000 f8e0 	bl	80045a4 <__malloc_lock>
 80043e4:	4a1d      	ldr	r2, [pc, #116]	@ (800445c <_free_r+0x90>)
 80043e6:	6813      	ldr	r3, [r2, #0]
 80043e8:	b933      	cbnz	r3, 80043f8 <_free_r+0x2c>
 80043ea:	6063      	str	r3, [r4, #4]
 80043ec:	6014      	str	r4, [r2, #0]
 80043ee:	4628      	mov	r0, r5
 80043f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043f4:	f000 b8dc 	b.w	80045b0 <__malloc_unlock>
 80043f8:	42a3      	cmp	r3, r4
 80043fa:	d908      	bls.n	800440e <_free_r+0x42>
 80043fc:	6820      	ldr	r0, [r4, #0]
 80043fe:	1821      	adds	r1, r4, r0
 8004400:	428b      	cmp	r3, r1
 8004402:	bf01      	itttt	eq
 8004404:	6819      	ldreq	r1, [r3, #0]
 8004406:	685b      	ldreq	r3, [r3, #4]
 8004408:	1809      	addeq	r1, r1, r0
 800440a:	6021      	streq	r1, [r4, #0]
 800440c:	e7ed      	b.n	80043ea <_free_r+0x1e>
 800440e:	461a      	mov	r2, r3
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	b10b      	cbz	r3, 8004418 <_free_r+0x4c>
 8004414:	42a3      	cmp	r3, r4
 8004416:	d9fa      	bls.n	800440e <_free_r+0x42>
 8004418:	6811      	ldr	r1, [r2, #0]
 800441a:	1850      	adds	r0, r2, r1
 800441c:	42a0      	cmp	r0, r4
 800441e:	d10b      	bne.n	8004438 <_free_r+0x6c>
 8004420:	6820      	ldr	r0, [r4, #0]
 8004422:	4401      	add	r1, r0
 8004424:	1850      	adds	r0, r2, r1
 8004426:	4283      	cmp	r3, r0
 8004428:	6011      	str	r1, [r2, #0]
 800442a:	d1e0      	bne.n	80043ee <_free_r+0x22>
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	6053      	str	r3, [r2, #4]
 8004432:	4408      	add	r0, r1
 8004434:	6010      	str	r0, [r2, #0]
 8004436:	e7da      	b.n	80043ee <_free_r+0x22>
 8004438:	d902      	bls.n	8004440 <_free_r+0x74>
 800443a:	230c      	movs	r3, #12
 800443c:	602b      	str	r3, [r5, #0]
 800443e:	e7d6      	b.n	80043ee <_free_r+0x22>
 8004440:	6820      	ldr	r0, [r4, #0]
 8004442:	1821      	adds	r1, r4, r0
 8004444:	428b      	cmp	r3, r1
 8004446:	bf04      	itt	eq
 8004448:	6819      	ldreq	r1, [r3, #0]
 800444a:	685b      	ldreq	r3, [r3, #4]
 800444c:	6063      	str	r3, [r4, #4]
 800444e:	bf04      	itt	eq
 8004450:	1809      	addeq	r1, r1, r0
 8004452:	6021      	streq	r1, [r4, #0]
 8004454:	6054      	str	r4, [r2, #4]
 8004456:	e7ca      	b.n	80043ee <_free_r+0x22>
 8004458:	bd38      	pop	{r3, r4, r5, pc}
 800445a:	bf00      	nop
 800445c:	20000490 	.word	0x20000490

08004460 <sbrk_aligned>:
 8004460:	b570      	push	{r4, r5, r6, lr}
 8004462:	4e0f      	ldr	r6, [pc, #60]	@ (80044a0 <sbrk_aligned+0x40>)
 8004464:	460c      	mov	r4, r1
 8004466:	6831      	ldr	r1, [r6, #0]
 8004468:	4605      	mov	r5, r0
 800446a:	b911      	cbnz	r1, 8004472 <sbrk_aligned+0x12>
 800446c:	f000 fba6 	bl	8004bbc <_sbrk_r>
 8004470:	6030      	str	r0, [r6, #0]
 8004472:	4621      	mov	r1, r4
 8004474:	4628      	mov	r0, r5
 8004476:	f000 fba1 	bl	8004bbc <_sbrk_r>
 800447a:	1c43      	adds	r3, r0, #1
 800447c:	d103      	bne.n	8004486 <sbrk_aligned+0x26>
 800447e:	f04f 34ff 	mov.w	r4, #4294967295
 8004482:	4620      	mov	r0, r4
 8004484:	bd70      	pop	{r4, r5, r6, pc}
 8004486:	1cc4      	adds	r4, r0, #3
 8004488:	f024 0403 	bic.w	r4, r4, #3
 800448c:	42a0      	cmp	r0, r4
 800448e:	d0f8      	beq.n	8004482 <sbrk_aligned+0x22>
 8004490:	1a21      	subs	r1, r4, r0
 8004492:	4628      	mov	r0, r5
 8004494:	f000 fb92 	bl	8004bbc <_sbrk_r>
 8004498:	3001      	adds	r0, #1
 800449a:	d1f2      	bne.n	8004482 <sbrk_aligned+0x22>
 800449c:	e7ef      	b.n	800447e <sbrk_aligned+0x1e>
 800449e:	bf00      	nop
 80044a0:	2000048c 	.word	0x2000048c

080044a4 <_malloc_r>:
 80044a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044a8:	1ccd      	adds	r5, r1, #3
 80044aa:	f025 0503 	bic.w	r5, r5, #3
 80044ae:	3508      	adds	r5, #8
 80044b0:	2d0c      	cmp	r5, #12
 80044b2:	bf38      	it	cc
 80044b4:	250c      	movcc	r5, #12
 80044b6:	2d00      	cmp	r5, #0
 80044b8:	4606      	mov	r6, r0
 80044ba:	db01      	blt.n	80044c0 <_malloc_r+0x1c>
 80044bc:	42a9      	cmp	r1, r5
 80044be:	d904      	bls.n	80044ca <_malloc_r+0x26>
 80044c0:	230c      	movs	r3, #12
 80044c2:	6033      	str	r3, [r6, #0]
 80044c4:	2000      	movs	r0, #0
 80044c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045a0 <_malloc_r+0xfc>
 80044ce:	f000 f869 	bl	80045a4 <__malloc_lock>
 80044d2:	f8d8 3000 	ldr.w	r3, [r8]
 80044d6:	461c      	mov	r4, r3
 80044d8:	bb44      	cbnz	r4, 800452c <_malloc_r+0x88>
 80044da:	4629      	mov	r1, r5
 80044dc:	4630      	mov	r0, r6
 80044de:	f7ff ffbf 	bl	8004460 <sbrk_aligned>
 80044e2:	1c43      	adds	r3, r0, #1
 80044e4:	4604      	mov	r4, r0
 80044e6:	d158      	bne.n	800459a <_malloc_r+0xf6>
 80044e8:	f8d8 4000 	ldr.w	r4, [r8]
 80044ec:	4627      	mov	r7, r4
 80044ee:	2f00      	cmp	r7, #0
 80044f0:	d143      	bne.n	800457a <_malloc_r+0xd6>
 80044f2:	2c00      	cmp	r4, #0
 80044f4:	d04b      	beq.n	800458e <_malloc_r+0xea>
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	4639      	mov	r1, r7
 80044fa:	4630      	mov	r0, r6
 80044fc:	eb04 0903 	add.w	r9, r4, r3
 8004500:	f000 fb5c 	bl	8004bbc <_sbrk_r>
 8004504:	4581      	cmp	r9, r0
 8004506:	d142      	bne.n	800458e <_malloc_r+0xea>
 8004508:	6821      	ldr	r1, [r4, #0]
 800450a:	1a6d      	subs	r5, r5, r1
 800450c:	4629      	mov	r1, r5
 800450e:	4630      	mov	r0, r6
 8004510:	f7ff ffa6 	bl	8004460 <sbrk_aligned>
 8004514:	3001      	adds	r0, #1
 8004516:	d03a      	beq.n	800458e <_malloc_r+0xea>
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	442b      	add	r3, r5
 800451c:	6023      	str	r3, [r4, #0]
 800451e:	f8d8 3000 	ldr.w	r3, [r8]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	bb62      	cbnz	r2, 8004580 <_malloc_r+0xdc>
 8004526:	f8c8 7000 	str.w	r7, [r8]
 800452a:	e00f      	b.n	800454c <_malloc_r+0xa8>
 800452c:	6822      	ldr	r2, [r4, #0]
 800452e:	1b52      	subs	r2, r2, r5
 8004530:	d420      	bmi.n	8004574 <_malloc_r+0xd0>
 8004532:	2a0b      	cmp	r2, #11
 8004534:	d917      	bls.n	8004566 <_malloc_r+0xc2>
 8004536:	1961      	adds	r1, r4, r5
 8004538:	42a3      	cmp	r3, r4
 800453a:	6025      	str	r5, [r4, #0]
 800453c:	bf18      	it	ne
 800453e:	6059      	strne	r1, [r3, #4]
 8004540:	6863      	ldr	r3, [r4, #4]
 8004542:	bf08      	it	eq
 8004544:	f8c8 1000 	streq.w	r1, [r8]
 8004548:	5162      	str	r2, [r4, r5]
 800454a:	604b      	str	r3, [r1, #4]
 800454c:	4630      	mov	r0, r6
 800454e:	f000 f82f 	bl	80045b0 <__malloc_unlock>
 8004552:	f104 000b 	add.w	r0, r4, #11
 8004556:	1d23      	adds	r3, r4, #4
 8004558:	f020 0007 	bic.w	r0, r0, #7
 800455c:	1ac2      	subs	r2, r0, r3
 800455e:	bf1c      	itt	ne
 8004560:	1a1b      	subne	r3, r3, r0
 8004562:	50a3      	strne	r3, [r4, r2]
 8004564:	e7af      	b.n	80044c6 <_malloc_r+0x22>
 8004566:	6862      	ldr	r2, [r4, #4]
 8004568:	42a3      	cmp	r3, r4
 800456a:	bf0c      	ite	eq
 800456c:	f8c8 2000 	streq.w	r2, [r8]
 8004570:	605a      	strne	r2, [r3, #4]
 8004572:	e7eb      	b.n	800454c <_malloc_r+0xa8>
 8004574:	4623      	mov	r3, r4
 8004576:	6864      	ldr	r4, [r4, #4]
 8004578:	e7ae      	b.n	80044d8 <_malloc_r+0x34>
 800457a:	463c      	mov	r4, r7
 800457c:	687f      	ldr	r7, [r7, #4]
 800457e:	e7b6      	b.n	80044ee <_malloc_r+0x4a>
 8004580:	461a      	mov	r2, r3
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	42a3      	cmp	r3, r4
 8004586:	d1fb      	bne.n	8004580 <_malloc_r+0xdc>
 8004588:	2300      	movs	r3, #0
 800458a:	6053      	str	r3, [r2, #4]
 800458c:	e7de      	b.n	800454c <_malloc_r+0xa8>
 800458e:	230c      	movs	r3, #12
 8004590:	6033      	str	r3, [r6, #0]
 8004592:	4630      	mov	r0, r6
 8004594:	f000 f80c 	bl	80045b0 <__malloc_unlock>
 8004598:	e794      	b.n	80044c4 <_malloc_r+0x20>
 800459a:	6005      	str	r5, [r0, #0]
 800459c:	e7d6      	b.n	800454c <_malloc_r+0xa8>
 800459e:	bf00      	nop
 80045a0:	20000490 	.word	0x20000490

080045a4 <__malloc_lock>:
 80045a4:	4801      	ldr	r0, [pc, #4]	@ (80045ac <__malloc_lock+0x8>)
 80045a6:	f7ff bf01 	b.w	80043ac <__retarget_lock_acquire_recursive>
 80045aa:	bf00      	nop
 80045ac:	20000488 	.word	0x20000488

080045b0 <__malloc_unlock>:
 80045b0:	4801      	ldr	r0, [pc, #4]	@ (80045b8 <__malloc_unlock+0x8>)
 80045b2:	f7ff befc 	b.w	80043ae <__retarget_lock_release_recursive>
 80045b6:	bf00      	nop
 80045b8:	20000488 	.word	0x20000488

080045bc <__ssputs_r>:
 80045bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045c0:	688e      	ldr	r6, [r1, #8]
 80045c2:	461f      	mov	r7, r3
 80045c4:	42be      	cmp	r6, r7
 80045c6:	680b      	ldr	r3, [r1, #0]
 80045c8:	4682      	mov	sl, r0
 80045ca:	460c      	mov	r4, r1
 80045cc:	4690      	mov	r8, r2
 80045ce:	d82d      	bhi.n	800462c <__ssputs_r+0x70>
 80045d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80045d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80045d8:	d026      	beq.n	8004628 <__ssputs_r+0x6c>
 80045da:	6965      	ldr	r5, [r4, #20]
 80045dc:	6909      	ldr	r1, [r1, #16]
 80045de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045e2:	eba3 0901 	sub.w	r9, r3, r1
 80045e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045ea:	1c7b      	adds	r3, r7, #1
 80045ec:	444b      	add	r3, r9
 80045ee:	106d      	asrs	r5, r5, #1
 80045f0:	429d      	cmp	r5, r3
 80045f2:	bf38      	it	cc
 80045f4:	461d      	movcc	r5, r3
 80045f6:	0553      	lsls	r3, r2, #21
 80045f8:	d527      	bpl.n	800464a <__ssputs_r+0x8e>
 80045fa:	4629      	mov	r1, r5
 80045fc:	f7ff ff52 	bl	80044a4 <_malloc_r>
 8004600:	4606      	mov	r6, r0
 8004602:	b360      	cbz	r0, 800465e <__ssputs_r+0xa2>
 8004604:	6921      	ldr	r1, [r4, #16]
 8004606:	464a      	mov	r2, r9
 8004608:	f7ff fed2 	bl	80043b0 <memcpy>
 800460c:	89a3      	ldrh	r3, [r4, #12]
 800460e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004616:	81a3      	strh	r3, [r4, #12]
 8004618:	6126      	str	r6, [r4, #16]
 800461a:	6165      	str	r5, [r4, #20]
 800461c:	444e      	add	r6, r9
 800461e:	eba5 0509 	sub.w	r5, r5, r9
 8004622:	6026      	str	r6, [r4, #0]
 8004624:	60a5      	str	r5, [r4, #8]
 8004626:	463e      	mov	r6, r7
 8004628:	42be      	cmp	r6, r7
 800462a:	d900      	bls.n	800462e <__ssputs_r+0x72>
 800462c:	463e      	mov	r6, r7
 800462e:	6820      	ldr	r0, [r4, #0]
 8004630:	4632      	mov	r2, r6
 8004632:	4641      	mov	r1, r8
 8004634:	f000 faa8 	bl	8004b88 <memmove>
 8004638:	68a3      	ldr	r3, [r4, #8]
 800463a:	1b9b      	subs	r3, r3, r6
 800463c:	60a3      	str	r3, [r4, #8]
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	4433      	add	r3, r6
 8004642:	6023      	str	r3, [r4, #0]
 8004644:	2000      	movs	r0, #0
 8004646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800464a:	462a      	mov	r2, r5
 800464c:	f000 fac6 	bl	8004bdc <_realloc_r>
 8004650:	4606      	mov	r6, r0
 8004652:	2800      	cmp	r0, #0
 8004654:	d1e0      	bne.n	8004618 <__ssputs_r+0x5c>
 8004656:	6921      	ldr	r1, [r4, #16]
 8004658:	4650      	mov	r0, sl
 800465a:	f7ff feb7 	bl	80043cc <_free_r>
 800465e:	230c      	movs	r3, #12
 8004660:	f8ca 3000 	str.w	r3, [sl]
 8004664:	89a3      	ldrh	r3, [r4, #12]
 8004666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800466a:	81a3      	strh	r3, [r4, #12]
 800466c:	f04f 30ff 	mov.w	r0, #4294967295
 8004670:	e7e9      	b.n	8004646 <__ssputs_r+0x8a>
	...

08004674 <_svfiprintf_r>:
 8004674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004678:	4698      	mov	r8, r3
 800467a:	898b      	ldrh	r3, [r1, #12]
 800467c:	061b      	lsls	r3, r3, #24
 800467e:	b09d      	sub	sp, #116	@ 0x74
 8004680:	4607      	mov	r7, r0
 8004682:	460d      	mov	r5, r1
 8004684:	4614      	mov	r4, r2
 8004686:	d510      	bpl.n	80046aa <_svfiprintf_r+0x36>
 8004688:	690b      	ldr	r3, [r1, #16]
 800468a:	b973      	cbnz	r3, 80046aa <_svfiprintf_r+0x36>
 800468c:	2140      	movs	r1, #64	@ 0x40
 800468e:	f7ff ff09 	bl	80044a4 <_malloc_r>
 8004692:	6028      	str	r0, [r5, #0]
 8004694:	6128      	str	r0, [r5, #16]
 8004696:	b930      	cbnz	r0, 80046a6 <_svfiprintf_r+0x32>
 8004698:	230c      	movs	r3, #12
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	f04f 30ff 	mov.w	r0, #4294967295
 80046a0:	b01d      	add	sp, #116	@ 0x74
 80046a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046a6:	2340      	movs	r3, #64	@ 0x40
 80046a8:	616b      	str	r3, [r5, #20]
 80046aa:	2300      	movs	r3, #0
 80046ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80046ae:	2320      	movs	r3, #32
 80046b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80046b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80046b8:	2330      	movs	r3, #48	@ 0x30
 80046ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004858 <_svfiprintf_r+0x1e4>
 80046be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80046c2:	f04f 0901 	mov.w	r9, #1
 80046c6:	4623      	mov	r3, r4
 80046c8:	469a      	mov	sl, r3
 80046ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046ce:	b10a      	cbz	r2, 80046d4 <_svfiprintf_r+0x60>
 80046d0:	2a25      	cmp	r2, #37	@ 0x25
 80046d2:	d1f9      	bne.n	80046c8 <_svfiprintf_r+0x54>
 80046d4:	ebba 0b04 	subs.w	fp, sl, r4
 80046d8:	d00b      	beq.n	80046f2 <_svfiprintf_r+0x7e>
 80046da:	465b      	mov	r3, fp
 80046dc:	4622      	mov	r2, r4
 80046de:	4629      	mov	r1, r5
 80046e0:	4638      	mov	r0, r7
 80046e2:	f7ff ff6b 	bl	80045bc <__ssputs_r>
 80046e6:	3001      	adds	r0, #1
 80046e8:	f000 80a7 	beq.w	800483a <_svfiprintf_r+0x1c6>
 80046ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046ee:	445a      	add	r2, fp
 80046f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80046f2:	f89a 3000 	ldrb.w	r3, [sl]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 809f 	beq.w	800483a <_svfiprintf_r+0x1c6>
 80046fc:	2300      	movs	r3, #0
 80046fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004702:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004706:	f10a 0a01 	add.w	sl, sl, #1
 800470a:	9304      	str	r3, [sp, #16]
 800470c:	9307      	str	r3, [sp, #28]
 800470e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004712:	931a      	str	r3, [sp, #104]	@ 0x68
 8004714:	4654      	mov	r4, sl
 8004716:	2205      	movs	r2, #5
 8004718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800471c:	484e      	ldr	r0, [pc, #312]	@ (8004858 <_svfiprintf_r+0x1e4>)
 800471e:	f7fb fd7f 	bl	8000220 <memchr>
 8004722:	9a04      	ldr	r2, [sp, #16]
 8004724:	b9d8      	cbnz	r0, 800475e <_svfiprintf_r+0xea>
 8004726:	06d0      	lsls	r0, r2, #27
 8004728:	bf44      	itt	mi
 800472a:	2320      	movmi	r3, #32
 800472c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004730:	0711      	lsls	r1, r2, #28
 8004732:	bf44      	itt	mi
 8004734:	232b      	movmi	r3, #43	@ 0x2b
 8004736:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800473a:	f89a 3000 	ldrb.w	r3, [sl]
 800473e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004740:	d015      	beq.n	800476e <_svfiprintf_r+0xfa>
 8004742:	9a07      	ldr	r2, [sp, #28]
 8004744:	4654      	mov	r4, sl
 8004746:	2000      	movs	r0, #0
 8004748:	f04f 0c0a 	mov.w	ip, #10
 800474c:	4621      	mov	r1, r4
 800474e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004752:	3b30      	subs	r3, #48	@ 0x30
 8004754:	2b09      	cmp	r3, #9
 8004756:	d94b      	bls.n	80047f0 <_svfiprintf_r+0x17c>
 8004758:	b1b0      	cbz	r0, 8004788 <_svfiprintf_r+0x114>
 800475a:	9207      	str	r2, [sp, #28]
 800475c:	e014      	b.n	8004788 <_svfiprintf_r+0x114>
 800475e:	eba0 0308 	sub.w	r3, r0, r8
 8004762:	fa09 f303 	lsl.w	r3, r9, r3
 8004766:	4313      	orrs	r3, r2
 8004768:	9304      	str	r3, [sp, #16]
 800476a:	46a2      	mov	sl, r4
 800476c:	e7d2      	b.n	8004714 <_svfiprintf_r+0xa0>
 800476e:	9b03      	ldr	r3, [sp, #12]
 8004770:	1d19      	adds	r1, r3, #4
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	9103      	str	r1, [sp, #12]
 8004776:	2b00      	cmp	r3, #0
 8004778:	bfbb      	ittet	lt
 800477a:	425b      	neglt	r3, r3
 800477c:	f042 0202 	orrlt.w	r2, r2, #2
 8004780:	9307      	strge	r3, [sp, #28]
 8004782:	9307      	strlt	r3, [sp, #28]
 8004784:	bfb8      	it	lt
 8004786:	9204      	strlt	r2, [sp, #16]
 8004788:	7823      	ldrb	r3, [r4, #0]
 800478a:	2b2e      	cmp	r3, #46	@ 0x2e
 800478c:	d10a      	bne.n	80047a4 <_svfiprintf_r+0x130>
 800478e:	7863      	ldrb	r3, [r4, #1]
 8004790:	2b2a      	cmp	r3, #42	@ 0x2a
 8004792:	d132      	bne.n	80047fa <_svfiprintf_r+0x186>
 8004794:	9b03      	ldr	r3, [sp, #12]
 8004796:	1d1a      	adds	r2, r3, #4
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	9203      	str	r2, [sp, #12]
 800479c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047a0:	3402      	adds	r4, #2
 80047a2:	9305      	str	r3, [sp, #20]
 80047a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004868 <_svfiprintf_r+0x1f4>
 80047a8:	7821      	ldrb	r1, [r4, #0]
 80047aa:	2203      	movs	r2, #3
 80047ac:	4650      	mov	r0, sl
 80047ae:	f7fb fd37 	bl	8000220 <memchr>
 80047b2:	b138      	cbz	r0, 80047c4 <_svfiprintf_r+0x150>
 80047b4:	9b04      	ldr	r3, [sp, #16]
 80047b6:	eba0 000a 	sub.w	r0, r0, sl
 80047ba:	2240      	movs	r2, #64	@ 0x40
 80047bc:	4082      	lsls	r2, r0
 80047be:	4313      	orrs	r3, r2
 80047c0:	3401      	adds	r4, #1
 80047c2:	9304      	str	r3, [sp, #16]
 80047c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047c8:	4824      	ldr	r0, [pc, #144]	@ (800485c <_svfiprintf_r+0x1e8>)
 80047ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80047ce:	2206      	movs	r2, #6
 80047d0:	f7fb fd26 	bl	8000220 <memchr>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d036      	beq.n	8004846 <_svfiprintf_r+0x1d2>
 80047d8:	4b21      	ldr	r3, [pc, #132]	@ (8004860 <_svfiprintf_r+0x1ec>)
 80047da:	bb1b      	cbnz	r3, 8004824 <_svfiprintf_r+0x1b0>
 80047dc:	9b03      	ldr	r3, [sp, #12]
 80047de:	3307      	adds	r3, #7
 80047e0:	f023 0307 	bic.w	r3, r3, #7
 80047e4:	3308      	adds	r3, #8
 80047e6:	9303      	str	r3, [sp, #12]
 80047e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047ea:	4433      	add	r3, r6
 80047ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80047ee:	e76a      	b.n	80046c6 <_svfiprintf_r+0x52>
 80047f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80047f4:	460c      	mov	r4, r1
 80047f6:	2001      	movs	r0, #1
 80047f8:	e7a8      	b.n	800474c <_svfiprintf_r+0xd8>
 80047fa:	2300      	movs	r3, #0
 80047fc:	3401      	adds	r4, #1
 80047fe:	9305      	str	r3, [sp, #20]
 8004800:	4619      	mov	r1, r3
 8004802:	f04f 0c0a 	mov.w	ip, #10
 8004806:	4620      	mov	r0, r4
 8004808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800480c:	3a30      	subs	r2, #48	@ 0x30
 800480e:	2a09      	cmp	r2, #9
 8004810:	d903      	bls.n	800481a <_svfiprintf_r+0x1a6>
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0c6      	beq.n	80047a4 <_svfiprintf_r+0x130>
 8004816:	9105      	str	r1, [sp, #20]
 8004818:	e7c4      	b.n	80047a4 <_svfiprintf_r+0x130>
 800481a:	fb0c 2101 	mla	r1, ip, r1, r2
 800481e:	4604      	mov	r4, r0
 8004820:	2301      	movs	r3, #1
 8004822:	e7f0      	b.n	8004806 <_svfiprintf_r+0x192>
 8004824:	ab03      	add	r3, sp, #12
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	462a      	mov	r2, r5
 800482a:	4b0e      	ldr	r3, [pc, #56]	@ (8004864 <_svfiprintf_r+0x1f0>)
 800482c:	a904      	add	r1, sp, #16
 800482e:	4638      	mov	r0, r7
 8004830:	f3af 8000 	nop.w
 8004834:	1c42      	adds	r2, r0, #1
 8004836:	4606      	mov	r6, r0
 8004838:	d1d6      	bne.n	80047e8 <_svfiprintf_r+0x174>
 800483a:	89ab      	ldrh	r3, [r5, #12]
 800483c:	065b      	lsls	r3, r3, #25
 800483e:	f53f af2d 	bmi.w	800469c <_svfiprintf_r+0x28>
 8004842:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004844:	e72c      	b.n	80046a0 <_svfiprintf_r+0x2c>
 8004846:	ab03      	add	r3, sp, #12
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	462a      	mov	r2, r5
 800484c:	4b05      	ldr	r3, [pc, #20]	@ (8004864 <_svfiprintf_r+0x1f0>)
 800484e:	a904      	add	r1, sp, #16
 8004850:	4638      	mov	r0, r7
 8004852:	f000 f879 	bl	8004948 <_printf_i>
 8004856:	e7ed      	b.n	8004834 <_svfiprintf_r+0x1c0>
 8004858:	08004d20 	.word	0x08004d20
 800485c:	08004d2a 	.word	0x08004d2a
 8004860:	00000000 	.word	0x00000000
 8004864:	080045bd 	.word	0x080045bd
 8004868:	08004d26 	.word	0x08004d26

0800486c <_printf_common>:
 800486c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004870:	4616      	mov	r6, r2
 8004872:	4698      	mov	r8, r3
 8004874:	688a      	ldr	r2, [r1, #8]
 8004876:	690b      	ldr	r3, [r1, #16]
 8004878:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800487c:	4293      	cmp	r3, r2
 800487e:	bfb8      	it	lt
 8004880:	4613      	movlt	r3, r2
 8004882:	6033      	str	r3, [r6, #0]
 8004884:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004888:	4607      	mov	r7, r0
 800488a:	460c      	mov	r4, r1
 800488c:	b10a      	cbz	r2, 8004892 <_printf_common+0x26>
 800488e:	3301      	adds	r3, #1
 8004890:	6033      	str	r3, [r6, #0]
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	0699      	lsls	r1, r3, #26
 8004896:	bf42      	ittt	mi
 8004898:	6833      	ldrmi	r3, [r6, #0]
 800489a:	3302      	addmi	r3, #2
 800489c:	6033      	strmi	r3, [r6, #0]
 800489e:	6825      	ldr	r5, [r4, #0]
 80048a0:	f015 0506 	ands.w	r5, r5, #6
 80048a4:	d106      	bne.n	80048b4 <_printf_common+0x48>
 80048a6:	f104 0a19 	add.w	sl, r4, #25
 80048aa:	68e3      	ldr	r3, [r4, #12]
 80048ac:	6832      	ldr	r2, [r6, #0]
 80048ae:	1a9b      	subs	r3, r3, r2
 80048b0:	42ab      	cmp	r3, r5
 80048b2:	dc26      	bgt.n	8004902 <_printf_common+0x96>
 80048b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80048b8:	6822      	ldr	r2, [r4, #0]
 80048ba:	3b00      	subs	r3, #0
 80048bc:	bf18      	it	ne
 80048be:	2301      	movne	r3, #1
 80048c0:	0692      	lsls	r2, r2, #26
 80048c2:	d42b      	bmi.n	800491c <_printf_common+0xb0>
 80048c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80048c8:	4641      	mov	r1, r8
 80048ca:	4638      	mov	r0, r7
 80048cc:	47c8      	blx	r9
 80048ce:	3001      	adds	r0, #1
 80048d0:	d01e      	beq.n	8004910 <_printf_common+0xa4>
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	6922      	ldr	r2, [r4, #16]
 80048d6:	f003 0306 	and.w	r3, r3, #6
 80048da:	2b04      	cmp	r3, #4
 80048dc:	bf02      	ittt	eq
 80048de:	68e5      	ldreq	r5, [r4, #12]
 80048e0:	6833      	ldreq	r3, [r6, #0]
 80048e2:	1aed      	subeq	r5, r5, r3
 80048e4:	68a3      	ldr	r3, [r4, #8]
 80048e6:	bf0c      	ite	eq
 80048e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048ec:	2500      	movne	r5, #0
 80048ee:	4293      	cmp	r3, r2
 80048f0:	bfc4      	itt	gt
 80048f2:	1a9b      	subgt	r3, r3, r2
 80048f4:	18ed      	addgt	r5, r5, r3
 80048f6:	2600      	movs	r6, #0
 80048f8:	341a      	adds	r4, #26
 80048fa:	42b5      	cmp	r5, r6
 80048fc:	d11a      	bne.n	8004934 <_printf_common+0xc8>
 80048fe:	2000      	movs	r0, #0
 8004900:	e008      	b.n	8004914 <_printf_common+0xa8>
 8004902:	2301      	movs	r3, #1
 8004904:	4652      	mov	r2, sl
 8004906:	4641      	mov	r1, r8
 8004908:	4638      	mov	r0, r7
 800490a:	47c8      	blx	r9
 800490c:	3001      	adds	r0, #1
 800490e:	d103      	bne.n	8004918 <_printf_common+0xac>
 8004910:	f04f 30ff 	mov.w	r0, #4294967295
 8004914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004918:	3501      	adds	r5, #1
 800491a:	e7c6      	b.n	80048aa <_printf_common+0x3e>
 800491c:	18e1      	adds	r1, r4, r3
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	2030      	movs	r0, #48	@ 0x30
 8004922:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004926:	4422      	add	r2, r4
 8004928:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800492c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004930:	3302      	adds	r3, #2
 8004932:	e7c7      	b.n	80048c4 <_printf_common+0x58>
 8004934:	2301      	movs	r3, #1
 8004936:	4622      	mov	r2, r4
 8004938:	4641      	mov	r1, r8
 800493a:	4638      	mov	r0, r7
 800493c:	47c8      	blx	r9
 800493e:	3001      	adds	r0, #1
 8004940:	d0e6      	beq.n	8004910 <_printf_common+0xa4>
 8004942:	3601      	adds	r6, #1
 8004944:	e7d9      	b.n	80048fa <_printf_common+0x8e>
	...

08004948 <_printf_i>:
 8004948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800494c:	7e0f      	ldrb	r7, [r1, #24]
 800494e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004950:	2f78      	cmp	r7, #120	@ 0x78
 8004952:	4691      	mov	r9, r2
 8004954:	4680      	mov	r8, r0
 8004956:	460c      	mov	r4, r1
 8004958:	469a      	mov	sl, r3
 800495a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800495e:	d807      	bhi.n	8004970 <_printf_i+0x28>
 8004960:	2f62      	cmp	r7, #98	@ 0x62
 8004962:	d80a      	bhi.n	800497a <_printf_i+0x32>
 8004964:	2f00      	cmp	r7, #0
 8004966:	f000 80d2 	beq.w	8004b0e <_printf_i+0x1c6>
 800496a:	2f58      	cmp	r7, #88	@ 0x58
 800496c:	f000 80b9 	beq.w	8004ae2 <_printf_i+0x19a>
 8004970:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004974:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004978:	e03a      	b.n	80049f0 <_printf_i+0xa8>
 800497a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800497e:	2b15      	cmp	r3, #21
 8004980:	d8f6      	bhi.n	8004970 <_printf_i+0x28>
 8004982:	a101      	add	r1, pc, #4	@ (adr r1, 8004988 <_printf_i+0x40>)
 8004984:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004988:	080049e1 	.word	0x080049e1
 800498c:	080049f5 	.word	0x080049f5
 8004990:	08004971 	.word	0x08004971
 8004994:	08004971 	.word	0x08004971
 8004998:	08004971 	.word	0x08004971
 800499c:	08004971 	.word	0x08004971
 80049a0:	080049f5 	.word	0x080049f5
 80049a4:	08004971 	.word	0x08004971
 80049a8:	08004971 	.word	0x08004971
 80049ac:	08004971 	.word	0x08004971
 80049b0:	08004971 	.word	0x08004971
 80049b4:	08004af5 	.word	0x08004af5
 80049b8:	08004a1f 	.word	0x08004a1f
 80049bc:	08004aaf 	.word	0x08004aaf
 80049c0:	08004971 	.word	0x08004971
 80049c4:	08004971 	.word	0x08004971
 80049c8:	08004b17 	.word	0x08004b17
 80049cc:	08004971 	.word	0x08004971
 80049d0:	08004a1f 	.word	0x08004a1f
 80049d4:	08004971 	.word	0x08004971
 80049d8:	08004971 	.word	0x08004971
 80049dc:	08004ab7 	.word	0x08004ab7
 80049e0:	6833      	ldr	r3, [r6, #0]
 80049e2:	1d1a      	adds	r2, r3, #4
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6032      	str	r2, [r6, #0]
 80049e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80049f0:	2301      	movs	r3, #1
 80049f2:	e09d      	b.n	8004b30 <_printf_i+0x1e8>
 80049f4:	6833      	ldr	r3, [r6, #0]
 80049f6:	6820      	ldr	r0, [r4, #0]
 80049f8:	1d19      	adds	r1, r3, #4
 80049fa:	6031      	str	r1, [r6, #0]
 80049fc:	0606      	lsls	r6, r0, #24
 80049fe:	d501      	bpl.n	8004a04 <_printf_i+0xbc>
 8004a00:	681d      	ldr	r5, [r3, #0]
 8004a02:	e003      	b.n	8004a0c <_printf_i+0xc4>
 8004a04:	0645      	lsls	r5, r0, #25
 8004a06:	d5fb      	bpl.n	8004a00 <_printf_i+0xb8>
 8004a08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a0c:	2d00      	cmp	r5, #0
 8004a0e:	da03      	bge.n	8004a18 <_printf_i+0xd0>
 8004a10:	232d      	movs	r3, #45	@ 0x2d
 8004a12:	426d      	negs	r5, r5
 8004a14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a18:	4859      	ldr	r0, [pc, #356]	@ (8004b80 <_printf_i+0x238>)
 8004a1a:	230a      	movs	r3, #10
 8004a1c:	e011      	b.n	8004a42 <_printf_i+0xfa>
 8004a1e:	6821      	ldr	r1, [r4, #0]
 8004a20:	6833      	ldr	r3, [r6, #0]
 8004a22:	0608      	lsls	r0, r1, #24
 8004a24:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a28:	d402      	bmi.n	8004a30 <_printf_i+0xe8>
 8004a2a:	0649      	lsls	r1, r1, #25
 8004a2c:	bf48      	it	mi
 8004a2e:	b2ad      	uxthmi	r5, r5
 8004a30:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a32:	4853      	ldr	r0, [pc, #332]	@ (8004b80 <_printf_i+0x238>)
 8004a34:	6033      	str	r3, [r6, #0]
 8004a36:	bf14      	ite	ne
 8004a38:	230a      	movne	r3, #10
 8004a3a:	2308      	moveq	r3, #8
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a42:	6866      	ldr	r6, [r4, #4]
 8004a44:	60a6      	str	r6, [r4, #8]
 8004a46:	2e00      	cmp	r6, #0
 8004a48:	bfa2      	ittt	ge
 8004a4a:	6821      	ldrge	r1, [r4, #0]
 8004a4c:	f021 0104 	bicge.w	r1, r1, #4
 8004a50:	6021      	strge	r1, [r4, #0]
 8004a52:	b90d      	cbnz	r5, 8004a58 <_printf_i+0x110>
 8004a54:	2e00      	cmp	r6, #0
 8004a56:	d04b      	beq.n	8004af0 <_printf_i+0x1a8>
 8004a58:	4616      	mov	r6, r2
 8004a5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a5e:	fb03 5711 	mls	r7, r3, r1, r5
 8004a62:	5dc7      	ldrb	r7, [r0, r7]
 8004a64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a68:	462f      	mov	r7, r5
 8004a6a:	42bb      	cmp	r3, r7
 8004a6c:	460d      	mov	r5, r1
 8004a6e:	d9f4      	bls.n	8004a5a <_printf_i+0x112>
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d10b      	bne.n	8004a8c <_printf_i+0x144>
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	07df      	lsls	r7, r3, #31
 8004a78:	d508      	bpl.n	8004a8c <_printf_i+0x144>
 8004a7a:	6923      	ldr	r3, [r4, #16]
 8004a7c:	6861      	ldr	r1, [r4, #4]
 8004a7e:	4299      	cmp	r1, r3
 8004a80:	bfde      	ittt	le
 8004a82:	2330      	movle	r3, #48	@ 0x30
 8004a84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a8c:	1b92      	subs	r2, r2, r6
 8004a8e:	6122      	str	r2, [r4, #16]
 8004a90:	f8cd a000 	str.w	sl, [sp]
 8004a94:	464b      	mov	r3, r9
 8004a96:	aa03      	add	r2, sp, #12
 8004a98:	4621      	mov	r1, r4
 8004a9a:	4640      	mov	r0, r8
 8004a9c:	f7ff fee6 	bl	800486c <_printf_common>
 8004aa0:	3001      	adds	r0, #1
 8004aa2:	d14a      	bne.n	8004b3a <_printf_i+0x1f2>
 8004aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa8:	b004      	add	sp, #16
 8004aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	f043 0320 	orr.w	r3, r3, #32
 8004ab4:	6023      	str	r3, [r4, #0]
 8004ab6:	4833      	ldr	r0, [pc, #204]	@ (8004b84 <_printf_i+0x23c>)
 8004ab8:	2778      	movs	r7, #120	@ 0x78
 8004aba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	6831      	ldr	r1, [r6, #0]
 8004ac2:	061f      	lsls	r7, r3, #24
 8004ac4:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ac8:	d402      	bmi.n	8004ad0 <_printf_i+0x188>
 8004aca:	065f      	lsls	r7, r3, #25
 8004acc:	bf48      	it	mi
 8004ace:	b2ad      	uxthmi	r5, r5
 8004ad0:	6031      	str	r1, [r6, #0]
 8004ad2:	07d9      	lsls	r1, r3, #31
 8004ad4:	bf44      	itt	mi
 8004ad6:	f043 0320 	orrmi.w	r3, r3, #32
 8004ada:	6023      	strmi	r3, [r4, #0]
 8004adc:	b11d      	cbz	r5, 8004ae6 <_printf_i+0x19e>
 8004ade:	2310      	movs	r3, #16
 8004ae0:	e7ac      	b.n	8004a3c <_printf_i+0xf4>
 8004ae2:	4827      	ldr	r0, [pc, #156]	@ (8004b80 <_printf_i+0x238>)
 8004ae4:	e7e9      	b.n	8004aba <_printf_i+0x172>
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	f023 0320 	bic.w	r3, r3, #32
 8004aec:	6023      	str	r3, [r4, #0]
 8004aee:	e7f6      	b.n	8004ade <_printf_i+0x196>
 8004af0:	4616      	mov	r6, r2
 8004af2:	e7bd      	b.n	8004a70 <_printf_i+0x128>
 8004af4:	6833      	ldr	r3, [r6, #0]
 8004af6:	6825      	ldr	r5, [r4, #0]
 8004af8:	6961      	ldr	r1, [r4, #20]
 8004afa:	1d18      	adds	r0, r3, #4
 8004afc:	6030      	str	r0, [r6, #0]
 8004afe:	062e      	lsls	r6, r5, #24
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	d501      	bpl.n	8004b08 <_printf_i+0x1c0>
 8004b04:	6019      	str	r1, [r3, #0]
 8004b06:	e002      	b.n	8004b0e <_printf_i+0x1c6>
 8004b08:	0668      	lsls	r0, r5, #25
 8004b0a:	d5fb      	bpl.n	8004b04 <_printf_i+0x1bc>
 8004b0c:	8019      	strh	r1, [r3, #0]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	6123      	str	r3, [r4, #16]
 8004b12:	4616      	mov	r6, r2
 8004b14:	e7bc      	b.n	8004a90 <_printf_i+0x148>
 8004b16:	6833      	ldr	r3, [r6, #0]
 8004b18:	1d1a      	adds	r2, r3, #4
 8004b1a:	6032      	str	r2, [r6, #0]
 8004b1c:	681e      	ldr	r6, [r3, #0]
 8004b1e:	6862      	ldr	r2, [r4, #4]
 8004b20:	2100      	movs	r1, #0
 8004b22:	4630      	mov	r0, r6
 8004b24:	f7fb fb7c 	bl	8000220 <memchr>
 8004b28:	b108      	cbz	r0, 8004b2e <_printf_i+0x1e6>
 8004b2a:	1b80      	subs	r0, r0, r6
 8004b2c:	6060      	str	r0, [r4, #4]
 8004b2e:	6863      	ldr	r3, [r4, #4]
 8004b30:	6123      	str	r3, [r4, #16]
 8004b32:	2300      	movs	r3, #0
 8004b34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b38:	e7aa      	b.n	8004a90 <_printf_i+0x148>
 8004b3a:	6923      	ldr	r3, [r4, #16]
 8004b3c:	4632      	mov	r2, r6
 8004b3e:	4649      	mov	r1, r9
 8004b40:	4640      	mov	r0, r8
 8004b42:	47d0      	blx	sl
 8004b44:	3001      	adds	r0, #1
 8004b46:	d0ad      	beq.n	8004aa4 <_printf_i+0x15c>
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	079b      	lsls	r3, r3, #30
 8004b4c:	d413      	bmi.n	8004b76 <_printf_i+0x22e>
 8004b4e:	68e0      	ldr	r0, [r4, #12]
 8004b50:	9b03      	ldr	r3, [sp, #12]
 8004b52:	4298      	cmp	r0, r3
 8004b54:	bfb8      	it	lt
 8004b56:	4618      	movlt	r0, r3
 8004b58:	e7a6      	b.n	8004aa8 <_printf_i+0x160>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	4632      	mov	r2, r6
 8004b5e:	4649      	mov	r1, r9
 8004b60:	4640      	mov	r0, r8
 8004b62:	47d0      	blx	sl
 8004b64:	3001      	adds	r0, #1
 8004b66:	d09d      	beq.n	8004aa4 <_printf_i+0x15c>
 8004b68:	3501      	adds	r5, #1
 8004b6a:	68e3      	ldr	r3, [r4, #12]
 8004b6c:	9903      	ldr	r1, [sp, #12]
 8004b6e:	1a5b      	subs	r3, r3, r1
 8004b70:	42ab      	cmp	r3, r5
 8004b72:	dcf2      	bgt.n	8004b5a <_printf_i+0x212>
 8004b74:	e7eb      	b.n	8004b4e <_printf_i+0x206>
 8004b76:	2500      	movs	r5, #0
 8004b78:	f104 0619 	add.w	r6, r4, #25
 8004b7c:	e7f5      	b.n	8004b6a <_printf_i+0x222>
 8004b7e:	bf00      	nop
 8004b80:	08004d31 	.word	0x08004d31
 8004b84:	08004d42 	.word	0x08004d42

08004b88 <memmove>:
 8004b88:	4288      	cmp	r0, r1
 8004b8a:	b510      	push	{r4, lr}
 8004b8c:	eb01 0402 	add.w	r4, r1, r2
 8004b90:	d902      	bls.n	8004b98 <memmove+0x10>
 8004b92:	4284      	cmp	r4, r0
 8004b94:	4623      	mov	r3, r4
 8004b96:	d807      	bhi.n	8004ba8 <memmove+0x20>
 8004b98:	1e43      	subs	r3, r0, #1
 8004b9a:	42a1      	cmp	r1, r4
 8004b9c:	d008      	beq.n	8004bb0 <memmove+0x28>
 8004b9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ba2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ba6:	e7f8      	b.n	8004b9a <memmove+0x12>
 8004ba8:	4402      	add	r2, r0
 8004baa:	4601      	mov	r1, r0
 8004bac:	428a      	cmp	r2, r1
 8004bae:	d100      	bne.n	8004bb2 <memmove+0x2a>
 8004bb0:	bd10      	pop	{r4, pc}
 8004bb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bba:	e7f7      	b.n	8004bac <memmove+0x24>

08004bbc <_sbrk_r>:
 8004bbc:	b538      	push	{r3, r4, r5, lr}
 8004bbe:	4d06      	ldr	r5, [pc, #24]	@ (8004bd8 <_sbrk_r+0x1c>)
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	4604      	mov	r4, r0
 8004bc4:	4608      	mov	r0, r1
 8004bc6:	602b      	str	r3, [r5, #0]
 8004bc8:	f7fc f9c2 	bl	8000f50 <_sbrk>
 8004bcc:	1c43      	adds	r3, r0, #1
 8004bce:	d102      	bne.n	8004bd6 <_sbrk_r+0x1a>
 8004bd0:	682b      	ldr	r3, [r5, #0]
 8004bd2:	b103      	cbz	r3, 8004bd6 <_sbrk_r+0x1a>
 8004bd4:	6023      	str	r3, [r4, #0]
 8004bd6:	bd38      	pop	{r3, r4, r5, pc}
 8004bd8:	20000484 	.word	0x20000484

08004bdc <_realloc_r>:
 8004bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004be0:	4680      	mov	r8, r0
 8004be2:	4615      	mov	r5, r2
 8004be4:	460c      	mov	r4, r1
 8004be6:	b921      	cbnz	r1, 8004bf2 <_realloc_r+0x16>
 8004be8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bec:	4611      	mov	r1, r2
 8004bee:	f7ff bc59 	b.w	80044a4 <_malloc_r>
 8004bf2:	b92a      	cbnz	r2, 8004c00 <_realloc_r+0x24>
 8004bf4:	f7ff fbea 	bl	80043cc <_free_r>
 8004bf8:	2400      	movs	r4, #0
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c00:	f000 f81a 	bl	8004c38 <_malloc_usable_size_r>
 8004c04:	4285      	cmp	r5, r0
 8004c06:	4606      	mov	r6, r0
 8004c08:	d802      	bhi.n	8004c10 <_realloc_r+0x34>
 8004c0a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004c0e:	d8f4      	bhi.n	8004bfa <_realloc_r+0x1e>
 8004c10:	4629      	mov	r1, r5
 8004c12:	4640      	mov	r0, r8
 8004c14:	f7ff fc46 	bl	80044a4 <_malloc_r>
 8004c18:	4607      	mov	r7, r0
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	d0ec      	beq.n	8004bf8 <_realloc_r+0x1c>
 8004c1e:	42b5      	cmp	r5, r6
 8004c20:	462a      	mov	r2, r5
 8004c22:	4621      	mov	r1, r4
 8004c24:	bf28      	it	cs
 8004c26:	4632      	movcs	r2, r6
 8004c28:	f7ff fbc2 	bl	80043b0 <memcpy>
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	4640      	mov	r0, r8
 8004c30:	f7ff fbcc 	bl	80043cc <_free_r>
 8004c34:	463c      	mov	r4, r7
 8004c36:	e7e0      	b.n	8004bfa <_realloc_r+0x1e>

08004c38 <_malloc_usable_size_r>:
 8004c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c3c:	1f18      	subs	r0, r3, #4
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	bfbc      	itt	lt
 8004c42:	580b      	ldrlt	r3, [r1, r0]
 8004c44:	18c0      	addlt	r0, r0, r3
 8004c46:	4770      	bx	lr

08004c48 <_init>:
 8004c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4a:	bf00      	nop
 8004c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4e:	bc08      	pop	{r3}
 8004c50:	469e      	mov	lr, r3
 8004c52:	4770      	bx	lr

08004c54 <_fini>:
 8004c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c56:	bf00      	nop
 8004c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c5a:	bc08      	pop	{r3}
 8004c5c:	469e      	mov	lr, r3
 8004c5e:	4770      	bx	lr

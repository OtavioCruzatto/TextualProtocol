
TextualProtocol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042f8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080044bc  080044bc  000054bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004694  08004694  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004694  08004694  00005694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800469c  0800469c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800469c  0800469c  0000569c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046a0  080046a0  000056a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080046a4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  2000005c  08004700  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  08004700  00006484  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fcf5  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002638  00000000  00000000  00015d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  000183c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b22  00000000  00000000  00019208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d04  00000000  00000000  00019d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123ce  00000000  00000000  0003ca2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d16f0  00000000  00000000  0004edfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001204ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dcc  00000000  00000000  00120530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001242fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080044a4 	.word	0x080044a4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000060 	.word	0x20000060
 8000200:	080044a4 	.word	0x080044a4

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96a 	b.w	8000500 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	460c      	mov	r4, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14e      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000250:	4694      	mov	ip, r2
 8000252:	458c      	cmp	ip, r1
 8000254:	4686      	mov	lr, r0
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	d962      	bls.n	8000322 <__udivmoddi4+0xde>
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0320 	rsb	r3, r2, #32
 8000262:	4091      	lsls	r1, r2
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	fa0c fc02 	lsl.w	ip, ip, r2
 800026c:	4319      	orrs	r1, r3
 800026e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000272:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000276:	fa1f f68c 	uxth.w	r6, ip
 800027a:	fbb1 f4f7 	udiv	r4, r1, r7
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	fb07 1114 	mls	r1, r7, r4, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb04 f106 	mul.w	r1, r4, r6
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f104 30ff 	add.w	r0, r4, #4294967295
 800029a:	f080 8112 	bcs.w	80004c2 <__udivmoddi4+0x27e>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 810f 	bls.w	80004c2 <__udivmoddi4+0x27e>
 80002a4:	3c02      	subs	r4, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a59      	subs	r1, r3, r1
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b2:	fb07 1110 	mls	r1, r7, r0, r1
 80002b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ba:	fb00 f606 	mul.w	r6, r0, r6
 80002be:	429e      	cmp	r6, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x94>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ca:	f080 80fc 	bcs.w	80004c6 <__udivmoddi4+0x282>
 80002ce:	429e      	cmp	r6, r3
 80002d0:	f240 80f9 	bls.w	80004c6 <__udivmoddi4+0x282>
 80002d4:	4463      	add	r3, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	1b9b      	subs	r3, r3, r6
 80002da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa6>
 80002e2:	40d3      	lsrs	r3, r2
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xba>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb4>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa6>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x150>
 8000306:	42a3      	cmp	r3, r4
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xcc>
 800030a:	4290      	cmp	r0, r2
 800030c:	f0c0 80f0 	bcc.w	80004f0 <__udivmoddi4+0x2ac>
 8000310:	1a86      	subs	r6, r0, r2
 8000312:	eb64 0303 	sbc.w	r3, r4, r3
 8000316:	2001      	movs	r0, #1
 8000318:	2d00      	cmp	r5, #0
 800031a:	d0e6      	beq.n	80002ea <__udivmoddi4+0xa6>
 800031c:	e9c5 6300 	strd	r6, r3, [r5]
 8000320:	e7e3      	b.n	80002ea <__udivmoddi4+0xa6>
 8000322:	2a00      	cmp	r2, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x204>
 8000328:	eba1 040c 	sub.w	r4, r1, ip
 800032c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000330:	fa1f f78c 	uxth.w	r7, ip
 8000334:	2101      	movs	r1, #1
 8000336:	fbb4 f6f8 	udiv	r6, r4, r8
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb08 4416 	mls	r4, r8, r6, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb07 f006 	mul.w	r0, r7, r6
 800034a:	4298      	cmp	r0, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x11c>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 34ff 	add.w	r4, r6, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x11a>
 8000358:	4298      	cmp	r0, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 800035e:	4626      	mov	r6, r4
 8000360:	1a1c      	subs	r4, r3, r0
 8000362:	fa1f f38e 	uxth.w	r3, lr
 8000366:	fbb4 f0f8 	udiv	r0, r4, r8
 800036a:	fb08 4410 	mls	r4, r8, r0, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb00 f707 	mul.w	r7, r0, r7
 8000376:	429f      	cmp	r7, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x148>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x146>
 8000384:	429f      	cmp	r7, r3
 8000386:	f200 80b0 	bhi.w	80004ea <__udivmoddi4+0x2a6>
 800038a:	4620      	mov	r0, r4
 800038c:	1bdb      	subs	r3, r3, r7
 800038e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x9c>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a4:	fa04 f301 	lsl.w	r3, r4, r1
 80003a8:	ea43 030c 	orr.w	r3, r3, ip
 80003ac:	40f4      	lsrs	r4, r6
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	0c38      	lsrs	r0, r7, #16
 80003b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b8:	fbb4 fef0 	udiv	lr, r4, r0
 80003bc:	fa1f fc87 	uxth.w	ip, r7
 80003c0:	fb00 441e 	mls	r4, r0, lr, r4
 80003c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c8:	fb0e f90c 	mul.w	r9, lr, ip
 80003cc:	45a1      	cmp	r9, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d90a      	bls.n	80003ea <__udivmoddi4+0x1a6>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003da:	f080 8084 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80003de:	45a1      	cmp	r9, r4
 80003e0:	f240 8081 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80003e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	eba4 0409 	sub.w	r4, r4, r9
 80003ee:	fa1f f983 	uxth.w	r9, r3
 80003f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f6:	fb00 4413 	mls	r4, r0, r3, r4
 80003fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000402:	45a4      	cmp	ip, r4
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1d2>
 8000406:	193c      	adds	r4, r7, r4
 8000408:	f103 30ff 	add.w	r0, r3, #4294967295
 800040c:	d267      	bcs.n	80004de <__udivmoddi4+0x29a>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d965      	bls.n	80004de <__udivmoddi4+0x29a>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041a:	fba0 9302 	umull	r9, r3, r0, r2
 800041e:	eba4 040c 	sub.w	r4, r4, ip
 8000422:	429c      	cmp	r4, r3
 8000424:	46ce      	mov	lr, r9
 8000426:	469c      	mov	ip, r3
 8000428:	d351      	bcc.n	80004ce <__udivmoddi4+0x28a>
 800042a:	d04e      	beq.n	80004ca <__udivmoddi4+0x286>
 800042c:	b155      	cbz	r5, 8000444 <__udivmoddi4+0x200>
 800042e:	ebb8 030e 	subs.w	r3, r8, lr
 8000432:	eb64 040c 	sbc.w	r4, r4, ip
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	40cb      	lsrs	r3, r1
 800043c:	431e      	orrs	r6, r3
 800043e:	40cc      	lsrs	r4, r1
 8000440:	e9c5 6400 	strd	r6, r4, [r5]
 8000444:	2100      	movs	r1, #0
 8000446:	e750      	b.n	80002ea <__udivmoddi4+0xa6>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f103 	lsr.w	r1, r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa24 f303 	lsr.w	r3, r4, r3
 8000458:	4094      	lsls	r4, r2
 800045a:	430c      	orrs	r4, r1
 800045c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000460:	fa00 fe02 	lsl.w	lr, r0, r2
 8000464:	fa1f f78c 	uxth.w	r7, ip
 8000468:	fbb3 f0f8 	udiv	r0, r3, r8
 800046c:	fb08 3110 	mls	r1, r8, r0, r3
 8000470:	0c23      	lsrs	r3, r4, #16
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f107 	mul.w	r1, r0, r7
 800047a:	4299      	cmp	r1, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x24c>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 36ff 	add.w	r6, r0, #4294967295
 8000486:	d22c      	bcs.n	80004e2 <__udivmoddi4+0x29e>
 8000488:	4299      	cmp	r1, r3
 800048a:	d92a      	bls.n	80004e2 <__udivmoddi4+0x29e>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	b2a4      	uxth	r4, r4
 8000494:	fbb3 f1f8 	udiv	r1, r3, r8
 8000498:	fb08 3311 	mls	r3, r8, r1, r3
 800049c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a0:	fb01 f307 	mul.w	r3, r1, r7
 80004a4:	42a3      	cmp	r3, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x276>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b0:	d213      	bcs.n	80004da <__udivmoddi4+0x296>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d911      	bls.n	80004da <__udivmoddi4+0x296>
 80004b6:	3902      	subs	r1, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	1ae4      	subs	r4, r4, r3
 80004bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c0:	e739      	b.n	8000336 <__udivmoddi4+0xf2>
 80004c2:	4604      	mov	r4, r0
 80004c4:	e6f0      	b.n	80002a8 <__udivmoddi4+0x64>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e706      	b.n	80002d8 <__udivmoddi4+0x94>
 80004ca:	45c8      	cmp	r8, r9
 80004cc:	d2ae      	bcs.n	800042c <__udivmoddi4+0x1e8>
 80004ce:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7a8      	b.n	800042c <__udivmoddi4+0x1e8>
 80004da:	4631      	mov	r1, r6
 80004dc:	e7ed      	b.n	80004ba <__udivmoddi4+0x276>
 80004de:	4603      	mov	r3, r0
 80004e0:	e799      	b.n	8000416 <__udivmoddi4+0x1d2>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e7d4      	b.n	8000490 <__udivmoddi4+0x24c>
 80004e6:	46d6      	mov	lr, sl
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1a6>
 80004ea:	4463      	add	r3, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e74d      	b.n	800038c <__udivmoddi4+0x148>
 80004f0:	4606      	mov	r6, r0
 80004f2:	4623      	mov	r3, r4
 80004f4:	4608      	mov	r0, r1
 80004f6:	e70f      	b.n	8000318 <__udivmoddi4+0xd4>
 80004f8:	3e02      	subs	r6, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	e730      	b.n	8000360 <__udivmoddi4+0x11c>
 80004fe:	bf00      	nop

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <appInit>:
#include "app.h"

// ======== Init =========== //
void appInit(App *app, GPIO_TypeDef* ledPort, uint16_t ledPin,
			UART_HandleTypeDef huart)
{
 8000504:	b082      	sub	sp, #8
 8000506:	b590      	push	{r4, r7, lr}
 8000508:	b097      	sub	sp, #92	@ 0x5c
 800050a:	af12      	add	r7, sp, #72	@ 0x48
 800050c:	60f8      	str	r0, [r7, #12]
 800050e:	60b9      	str	r1, [r7, #8]
 8000510:	627b      	str	r3, [r7, #36]	@ 0x24
 8000512:	4613      	mov	r3, r2
 8000514:	80fb      	strh	r3, [r7, #6]
	// ======== LED =========== //
	blinkLedInit(&app->blinkLed, ledPort, ledPin, PATTERN_TOGGLE_EACH_100_MS);
 8000516:	68f8      	ldr	r0, [r7, #12]
 8000518:	88fa      	ldrh	r2, [r7, #6]
 800051a:	2301      	movs	r3, #1
 800051c:	68b9      	ldr	r1, [r7, #8]
 800051e:	f000 f8f4 	bl	800070a <blinkLedInit>

	// ======== Textual protocol =========== //
	textualProtocolInit(&app->textualProtocol, '$', ',', huart);
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	f103 0410 	add.w	r4, r3, #16
 8000528:	4668      	mov	r0, sp
 800052a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800052e:	2244      	movs	r2, #68	@ 0x44
 8000530:	4619      	mov	r1, r3
 8000532:	f003 ffa9 	bl	8004488 <memcpy>
 8000536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000538:	222c      	movs	r2, #44	@ 0x2c
 800053a:	2124      	movs	r1, #36	@ 0x24
 800053c:	4620      	mov	r0, r4
 800053e:	f003 fb9d 	bl	8003c7c <textualProtocolInit>
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800054c:	b002      	add	sp, #8
 800054e:	4770      	bx	lr

08000550 <appExecuteBlinkLed>:

// ======== LED =========== //
void appExecuteBlinkLed(App *app)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	blinkLedExecuteBlink(&app->blinkLed);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f8fe 	bl	800075c <blinkLedExecuteBlink>
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <appAppendTpByte>:

// ======== Textual protocol =========== //
void appAppendTpByte(App *app, uint8_t receivedByte)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	460b      	mov	r3, r1
 8000572:	70fb      	strb	r3, [r7, #3]
	textualProtocolAppendByte(&app->textualProtocol, receivedByte);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	3310      	adds	r3, #16
 8000578:	78fa      	ldrb	r2, [r7, #3]
 800057a:	4611      	mov	r1, r2
 800057c:	4618      	mov	r0, r3
 800057e:	f003 fba4 	bl	8003cca <textualProtocolAppendByte>
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <appExtractTpData>:

void appExtractTpData(App *app)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	b082      	sub	sp, #8
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
	textualProtocolExtractData(&app->textualProtocol);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	3310      	adds	r3, #16
 8000596:	4618      	mov	r0, r3
 8000598:	f003 fd28 	bl	8003fec <textualProtocolExtractData>
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <appDecodeExtractedTpCommand>:

void appDecodeExtractedTpCommand(App *app)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	textualProtocolDecodeExtractedCommand(&app->textualProtocol);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	3310      	adds	r3, #16
 80005b0:	4618      	mov	r0, r3
 80005b2:	f003 fd9f 	bl	80040f4 <textualProtocolDecodeExtractedCommand>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <appExecuteReceivedCommandRoutine>:
{
	textualProtocolClear(&app->textualProtocol, clear);
}

void appExecuteReceivedCommandRoutine(App *app)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	b084      	sub	sp, #16
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
	uint8_t sizeOfStringValue = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	73fb      	strb	r3, [r7, #15]
	uint8_t blinkPattern = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	73bb      	strb	r3, [r7, #14]

	switch (textualProtocolGetDecodedCommand(&app->textualProtocol))
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	3310      	adds	r3, #16
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 fe92 	bl	80042fc <textualProtocolGetDecodedCommand>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b02      	cmp	r3, #2
 80005dc:	d030      	beq.n	8000640 <appExecuteReceivedCommandRoutine+0x82>
 80005de:	2b02      	cmp	r3, #2
 80005e0:	dc60      	bgt.n	80006a4 <appExecuteReceivedCommandRoutine+0xe6>
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d05d      	beq.n	80006a2 <appExecuteReceivedCommandRoutine+0xe4>
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d15c      	bne.n	80006a4 <appExecuteReceivedCommandRoutine+0xe6>
	{
		case CMD_RX_COMMAND_UNKNOWN:
			break;

		case CMD_RX_SET_ECHO_STATUS:
			if (app->textualProtocol.values[0][0] == '0')
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 80005f0:	2b30      	cmp	r3, #48	@ 0x30
 80005f2:	d10c      	bne.n	800060e <appExecuteReceivedCommandRoutine+0x50>
			{
				textualProtocalSetEchoEnable(&app->textualProtocol, FALSE);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3310      	adds	r3, #16
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 fe62 	bl	80042c4 <textualProtocalSetEchoEnable>
				textualProtocolSendStatusMessage(&app->textualProtocol, STATUS_MESSAGE_OK);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3310      	adds	r3, #16
 8000604:	21aa      	movs	r1, #170	@ 0xaa
 8000606:	4618      	mov	r0, r3
 8000608:	f003 fc90 	bl	8003f2c <textualProtocolSendStatusMessage>
			}
			else
			{
				textualProtocolSendStatusMessage(&app->textualProtocol, STATUS_MESSAGE_VALUE_ERROR);
			}
			break;
 800060c:	e04a      	b.n	80006a4 <appExecuteReceivedCommandRoutine+0xe6>
			else if (app->textualProtocol.values[0][0] == '1')
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8000614:	2b31      	cmp	r3, #49	@ 0x31
 8000616:	d10c      	bne.n	8000632 <appExecuteReceivedCommandRoutine+0x74>
				textualProtocalSetEchoEnable(&app->textualProtocol, TRUE);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3310      	adds	r3, #16
 800061c:	2101      	movs	r1, #1
 800061e:	4618      	mov	r0, r3
 8000620:	f003 fe50 	bl	80042c4 <textualProtocalSetEchoEnable>
				textualProtocolSendStatusMessage(&app->textualProtocol, STATUS_MESSAGE_OK);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3310      	adds	r3, #16
 8000628:	21aa      	movs	r1, #170	@ 0xaa
 800062a:	4618      	mov	r0, r3
 800062c:	f003 fc7e 	bl	8003f2c <textualProtocolSendStatusMessage>
			break;
 8000630:	e038      	b.n	80006a4 <appExecuteReceivedCommandRoutine+0xe6>
				textualProtocolSendStatusMessage(&app->textualProtocol, STATUS_MESSAGE_VALUE_ERROR);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3310      	adds	r3, #16
 8000636:	21ad      	movs	r1, #173	@ 0xad
 8000638:	4618      	mov	r0, r3
 800063a:	f003 fc77 	bl	8003f2c <textualProtocolSendStatusMessage>
			break;
 800063e:	e031      	b.n	80006a4 <appExecuteReceivedCommandRoutine+0xe6>

		case CMD_RX_SET_BLINK_PATTERN:
			sizeOfStringValue = strlen((char *) app->textualProtocol.values[0]);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f203 1305 	addw	r3, r3, #261	@ 0x105
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff fddc 	bl	8000204 <strlen>
 800064c:	4603      	mov	r3, r0
 800064e:	73fb      	strb	r3, [r7, #15]
			if (sizeOfStringValue > 0)
 8000650:	7bfb      	ldrb	r3, [r7, #15]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d01e      	beq.n	8000694 <appExecuteReceivedCommandRoutine+0xd6>
			{
				blinkPattern = atoi((char *) app->textualProtocol.values[0]);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f203 1305 	addw	r3, r3, #261	@ 0x105
 800065c:	4618      	mov	r0, r3
 800065e:	f003 fe59 	bl	8004314 <atoi>
 8000662:	4603      	mov	r3, r0
 8000664:	73bb      	strb	r3, [r7, #14]
				if ((blinkPattern >= 0) && (blinkPattern <=5))
 8000666:	7bbb      	ldrb	r3, [r7, #14]
 8000668:	2b05      	cmp	r3, #5
 800066a:	d80c      	bhi.n	8000686 <appExecuteReceivedCommandRoutine+0xc8>
				{
					blinkLedSetBlinkPattern(&app->blinkLed, blinkPattern);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	7bba      	ldrb	r2, [r7, #14]
 8000670:	4611      	mov	r1, r2
 8000672:	4618      	mov	r0, r3
 8000674:	f000 f9e9 	bl	8000a4a <blinkLedSetBlinkPattern>
					textualProtocolSendStatusMessage(&app->textualProtocol, STATUS_MESSAGE_OK);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3310      	adds	r3, #16
 800067c:	21aa      	movs	r1, #170	@ 0xaa
 800067e:	4618      	mov	r0, r3
 8000680:	f003 fc54 	bl	8003f2c <textualProtocolSendStatusMessage>
			}
			else
			{
				textualProtocolSendStatusMessage(&app->textualProtocol, STATUS_MESSAGE_VALUE_ERROR);
			}
			break;
 8000684:	e00e      	b.n	80006a4 <appExecuteReceivedCommandRoutine+0xe6>
					textualProtocolSendStatusMessage(&app->textualProtocol, STATUS_MESSAGE_VALUE_ERROR);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	3310      	adds	r3, #16
 800068a:	21ad      	movs	r1, #173	@ 0xad
 800068c:	4618      	mov	r0, r3
 800068e:	f003 fc4d 	bl	8003f2c <textualProtocolSendStatusMessage>
			break;
 8000692:	e007      	b.n	80006a4 <appExecuteReceivedCommandRoutine+0xe6>
				textualProtocolSendStatusMessage(&app->textualProtocol, STATUS_MESSAGE_VALUE_ERROR);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3310      	adds	r3, #16
 8000698:	21ad      	movs	r1, #173	@ 0xad
 800069a:	4618      	mov	r0, r3
 800069c:	f003 fc46 	bl	8003f2c <textualProtocolSendStatusMessage>
			break;
 80006a0:	e000      	b.n	80006a4 <appExecuteReceivedCommandRoutine+0xe6>
			break;
 80006a2:	bf00      	nop
	}

	textualProtocolClear(&app->textualProtocol, CLEAR_ALL);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3310      	adds	r3, #16
 80006a8:	2101      	movs	r1, #1
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 fb60 	bl	8003d70 <textualProtocolClear>
}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <appGetBlinkDelay>:

// ======= Getters and Setters ======== //
uint32_t appGetBlinkDelay(App *app)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	return blinkLedGetBlinkDelay(&app->blinkLed);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 f980 	bl	80009c8 <blinkLedGetBlinkDelay>
 80006c8:	4603      	mov	r3, r0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <appGetTpEchoEnable>:

Bool appGetTpEchoEnable(App *app)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
	return textualProtocolGetEchoEnable(&app->textualProtocol);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3310      	adds	r3, #16
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 fde4 	bl	80042ac <textualProtocolGetEchoEnable>
 80006e4:	4603      	mov	r3, r0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <appGetCommandStatus>:

TextualProtocolRxCommandStatus appGetCommandStatus(App *app)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
	return textualProtocolGetCommandStatus(&app->textualProtocol);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3310      	adds	r3, #16
 80006fa:	4618      	mov	r0, r3
 80006fc:	f003 fdf1 	bl	80042e2 <textualProtocolGetCommandStatus>
 8000700:	4603      	mov	r3, r0
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <blinkLedInit>:

#include "blinkLed.h"

// ======== Init =========== //
void blinkLedInit(BlinkLed *blinkLed, GPIO_TypeDef* ledPort, uint16_t ledPin, uint8_t blinkPattern)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b084      	sub	sp, #16
 800070e:	af00      	add	r7, sp, #0
 8000710:	60f8      	str	r0, [r7, #12]
 8000712:	60b9      	str	r1, [r7, #8]
 8000714:	4611      	mov	r1, r2
 8000716:	461a      	mov	r2, r3
 8000718:	460b      	mov	r3, r1
 800071a:	80fb      	strh	r3, [r7, #6]
 800071c:	4613      	mov	r3, r2
 800071e:	717b      	strb	r3, [r7, #5]
	blinkLed->ledPort = ledPort;
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	68ba      	ldr	r2, [r7, #8]
 8000724:	609a      	str	r2, [r3, #8]
	blinkLed->ledPin = ledPin;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	88fa      	ldrh	r2, [r7, #6]
 800072a:	819a      	strh	r2, [r3, #12]
	blinkLed->blinkPattern = blinkPattern;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	797a      	ldrb	r2, [r7, #5]
 8000730:	715a      	strb	r2, [r3, #5]
	blinkLed->counter = 0;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	2200      	movs	r2, #0
 8000736:	711a      	strb	r2, [r3, #4]
	HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	6898      	ldr	r0, [r3, #8]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	899b      	ldrh	r3, [r3, #12]
 8000740:	2200      	movs	r2, #0
 8000742:	4619      	mov	r1, r3
 8000744:	f001 f864 	bl	8001810 <HAL_GPIO_WritePin>
	blinkLedSetBlinkDelay(blinkLed, DELAY_100_MILISECONDS);
 8000748:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800074c:	68f8      	ldr	r0, [r7, #12]
 800074e:	f000 f947 	bl	80009e0 <blinkLedSetBlinkDelay>
}
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <blinkLedExecuteBlink>:

// ======== LED =========== //
void blinkLedExecuteBlink(BlinkLed *blinkLed)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	switch (blinkLedGetBlinkPattern(blinkLed))
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f000 f964 	bl	8000a32 <blinkLedGetBlinkPattern>
 800076a:	4603      	mov	r3, r0
 800076c:	2b05      	cmp	r3, #5
 800076e:	f200 8127 	bhi.w	80009c0 <blinkLedExecuteBlink+0x264>
 8000772:	a201      	add	r2, pc, #4	@ (adr r2, 8000778 <blinkLedExecuteBlink+0x1c>)
 8000774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000778:	08000791 	.word	0x08000791
 800077c:	080007c9 	.word	0x080007c9
 8000780:	08000801 	.word	0x08000801
 8000784:	08000907 	.word	0x08000907
 8000788:	080007e5 	.word	0x080007e5
 800078c:	080007ad 	.word	0x080007ad
	{
		case PATTERN_ALWAYS_OFF:
			HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6898      	ldr	r0, [r3, #8]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	899b      	ldrh	r3, [r3, #12]
 8000798:	2200      	movs	r2, #0
 800079a:	4619      	mov	r1, r3
 800079c:	f001 f838 	bl	8001810 <HAL_GPIO_WritePin>
			blinkLedSetBlinkDelay(blinkLed, DELAY_500_MILISECONDS);
 80007a0:	f241 3188 	movw	r1, #5000	@ 0x1388
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 f91b 	bl	80009e0 <blinkLedSetBlinkDelay>
			break;
 80007aa:	e109      	b.n	80009c0 <blinkLedExecuteBlink+0x264>

		case PATTERN_ALWAYS_ON:
			HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6898      	ldr	r0, [r3, #8]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	899b      	ldrh	r3, [r3, #12]
 80007b4:	2201      	movs	r2, #1
 80007b6:	4619      	mov	r1, r3
 80007b8:	f001 f82a 	bl	8001810 <HAL_GPIO_WritePin>
			blinkLedSetBlinkDelay(blinkLed, DELAY_500_MILISECONDS);
 80007bc:	f241 3188 	movw	r1, #5000	@ 0x1388
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f000 f90d 	bl	80009e0 <blinkLedSetBlinkDelay>
			break;
 80007c6:	e0fb      	b.n	80009c0 <blinkLedExecuteBlink+0x264>

		case PATTERN_TOGGLE_EACH_100_MS:
			HAL_GPIO_TogglePin(blinkLed->ledPort, blinkLed->ledPin);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	689a      	ldr	r2, [r3, #8]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	899b      	ldrh	r3, [r3, #12]
 80007d0:	4619      	mov	r1, r3
 80007d2:	4610      	mov	r0, r2
 80007d4:	f001 f835 	bl	8001842 <HAL_GPIO_TogglePin>
			blinkLedSetBlinkDelay(blinkLed, DELAY_100_MILISECONDS);
 80007d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f000 f8ff 	bl	80009e0 <blinkLedSetBlinkDelay>
			break;
 80007e2:	e0ed      	b.n	80009c0 <blinkLedExecuteBlink+0x264>

		case PATTERN_TOGGLE_EACH_250_MS:
			HAL_GPIO_TogglePin(blinkLed->ledPort, blinkLed->ledPin);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	689a      	ldr	r2, [r3, #8]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	899b      	ldrh	r3, [r3, #12]
 80007ec:	4619      	mov	r1, r3
 80007ee:	4610      	mov	r0, r2
 80007f0:	f001 f827 	bl	8001842 <HAL_GPIO_TogglePin>
			blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 80007f4:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f000 f8f1 	bl	80009e0 <blinkLedSetBlinkDelay>
			break;
 80007fe:	e0df      	b.n	80009c0 <blinkLedExecuteBlink+0x264>

		case PATTERN_SHORT_SHORT_LONG:
			switch (blinkLedGetCounter(blinkLed))
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f000 f8fb 	bl	80009fc <blinkLedGetCounter>
 8000806:	4603      	mov	r3, r0
 8000808:	2b05      	cmp	r3, #5
 800080a:	f200 80d6 	bhi.w	80009ba <blinkLedExecuteBlink+0x25e>
 800080e:	a201      	add	r2, pc, #4	@ (adr r2, 8000814 <blinkLedExecuteBlink+0xb8>)
 8000810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000814:	0800082d 	.word	0x0800082d
 8000818:	08000851 	.word	0x08000851
 800081c:	08000875 	.word	0x08000875
 8000820:	08000899 	.word	0x08000899
 8000824:	080008bd 	.word	0x080008bd
 8000828:	080008e1 	.word	0x080008e1
			{
				case 0:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	6898      	ldr	r0, [r3, #8]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	899b      	ldrh	r3, [r3, #12]
 8000834:	2201      	movs	r2, #1
 8000836:	4619      	mov	r1, r3
 8000838:	f000 ffea 	bl	8001810 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 800083c:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f000 f8cd 	bl	80009e0 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 1);
 8000846:	2101      	movs	r1, #1
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f000 f8e3 	bl	8000a14 <blinkLedSetCounter>
					break;
 800084e:	e059      	b.n	8000904 <blinkLedExecuteBlink+0x1a8>

				case 1:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	6898      	ldr	r0, [r3, #8]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	899b      	ldrh	r3, [r3, #12]
 8000858:	2200      	movs	r2, #0
 800085a:	4619      	mov	r1, r3
 800085c:	f000 ffd8 	bl	8001810 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 8000860:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f000 f8bb 	bl	80009e0 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 2);
 800086a:	2102      	movs	r1, #2
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f000 f8d1 	bl	8000a14 <blinkLedSetCounter>
					break;
 8000872:	e047      	b.n	8000904 <blinkLedExecuteBlink+0x1a8>

				case 2:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6898      	ldr	r0, [r3, #8]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	899b      	ldrh	r3, [r3, #12]
 800087c:	2201      	movs	r2, #1
 800087e:	4619      	mov	r1, r3
 8000880:	f000 ffc6 	bl	8001810 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 8000884:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f000 f8a9 	bl	80009e0 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 3);
 800088e:	2103      	movs	r1, #3
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f000 f8bf 	bl	8000a14 <blinkLedSetCounter>
					break;
 8000896:	e035      	b.n	8000904 <blinkLedExecuteBlink+0x1a8>

				case 3:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6898      	ldr	r0, [r3, #8]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	899b      	ldrh	r3, [r3, #12]
 80008a0:	2200      	movs	r2, #0
 80008a2:	4619      	mov	r1, r3
 80008a4:	f000 ffb4 	bl	8001810 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 80008a8:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f000 f897 	bl	80009e0 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 4);
 80008b2:	2104      	movs	r1, #4
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f000 f8ad 	bl	8000a14 <blinkLedSetCounter>
					break;
 80008ba:	e023      	b.n	8000904 <blinkLedExecuteBlink+0x1a8>

				case 4:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6898      	ldr	r0, [r3, #8]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	899b      	ldrh	r3, [r3, #12]
 80008c4:	2201      	movs	r2, #1
 80008c6:	4619      	mov	r1, r3
 80008c8:	f000 ffa2 	bl	8001810 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_750_MILISECONDS);
 80008cc:	f641 514c 	movw	r1, #7500	@ 0x1d4c
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f000 f885 	bl	80009e0 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 5);
 80008d6:	2105      	movs	r1, #5
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f000 f89b 	bl	8000a14 <blinkLedSetCounter>
					break;
 80008de:	e011      	b.n	8000904 <blinkLedExecuteBlink+0x1a8>

				case 5:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6898      	ldr	r0, [r3, #8]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	899b      	ldrh	r3, [r3, #12]
 80008e8:	2200      	movs	r2, #0
 80008ea:	4619      	mov	r1, r3
 80008ec:	f000 ff90 	bl	8001810 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_500_MILISECONDS);
 80008f0:	f241 3188 	movw	r1, #5000	@ 0x1388
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f000 f873 	bl	80009e0 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 0);
 80008fa:	2100      	movs	r1, #0
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f000 f889 	bl	8000a14 <blinkLedSetCounter>
					break;
 8000902:	bf00      	nop
			}
			break;
 8000904:	e059      	b.n	80009ba <blinkLedExecuteBlink+0x25e>

		case PATTERN_HEART_BEAT:
			switch (blinkLedGetCounter(blinkLed))
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f000 f878 	bl	80009fc <blinkLedGetCounter>
 800090c:	4603      	mov	r3, r0
 800090e:	2b03      	cmp	r3, #3
 8000910:	d855      	bhi.n	80009be <blinkLedExecuteBlink+0x262>
 8000912:	a201      	add	r2, pc, #4	@ (adr r2, 8000918 <blinkLedExecuteBlink+0x1bc>)
 8000914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000918:	08000929 	.word	0x08000929
 800091c:	0800094d 	.word	0x0800094d
 8000920:	08000971 	.word	0x08000971
 8000924:	08000995 	.word	0x08000995
			{
				case 0:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6898      	ldr	r0, [r3, #8]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	899b      	ldrh	r3, [r3, #12]
 8000930:	2201      	movs	r2, #1
 8000932:	4619      	mov	r1, r3
 8000934:	f000 ff6c 	bl	8001810 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_200_MILISECONDS);
 8000938:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f000 f84f 	bl	80009e0 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 1);
 8000942:	2101      	movs	r1, #1
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f000 f865 	bl	8000a14 <blinkLedSetCounter>
					break;
 800094a:	e035      	b.n	80009b8 <blinkLedExecuteBlink+0x25c>

				case 1:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6898      	ldr	r0, [r3, #8]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	899b      	ldrh	r3, [r3, #12]
 8000954:	2200      	movs	r2, #0
 8000956:	4619      	mov	r1, r3
 8000958:	f000 ff5a 	bl	8001810 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_150_MILISECONDS);
 800095c:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f000 f83d 	bl	80009e0 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 2);
 8000966:	2102      	movs	r1, #2
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f000 f853 	bl	8000a14 <blinkLedSetCounter>
					break;
 800096e:	e023      	b.n	80009b8 <blinkLedExecuteBlink+0x25c>

				case 2:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6898      	ldr	r0, [r3, #8]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	899b      	ldrh	r3, [r3, #12]
 8000978:	2201      	movs	r2, #1
 800097a:	4619      	mov	r1, r3
 800097c:	f000 ff48 	bl	8001810 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_500_MILISECONDS);
 8000980:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f000 f82b 	bl	80009e0 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 3);
 800098a:	2103      	movs	r1, #3
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f000 f841 	bl	8000a14 <blinkLedSetCounter>
					break;
 8000992:	e011      	b.n	80009b8 <blinkLedExecuteBlink+0x25c>

				case 3:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6898      	ldr	r0, [r3, #8]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	899b      	ldrh	r3, [r3, #12]
 800099c:	2200      	movs	r2, #0
 800099e:	4619      	mov	r1, r3
 80009a0:	f000 ff36 	bl	8001810 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_400_MILISECONDS);
 80009a4:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f000 f819 	bl	80009e0 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 0);
 80009ae:	2100      	movs	r1, #0
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f000 f82f 	bl	8000a14 <blinkLedSetCounter>
					break;
 80009b6:	bf00      	nop
			}
			break;
 80009b8:	e001      	b.n	80009be <blinkLedExecuteBlink+0x262>
			break;
 80009ba:	bf00      	nop
 80009bc:	e000      	b.n	80009c0 <blinkLedExecuteBlink+0x264>
			break;
 80009be:	bf00      	nop
	}
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <blinkLedGetBlinkDelay>:

// ======= Getters and Setters ======== //
uint32_t blinkLedGetBlinkDelay(BlinkLed *blinkLed)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	return blinkLed->blinkDelay;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <blinkLedSetBlinkDelay>:

void blinkLedSetBlinkDelay(BlinkLed *blinkLed, uint32_t blinkDelay)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
	blinkLed->blinkDelay = blinkDelay;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	683a      	ldr	r2, [r7, #0]
 80009ee:	601a      	str	r2, [r3, #0]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <blinkLedGetCounter>:

uint8_t blinkLedGetCounter(BlinkLed *blinkLed)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	return blinkLed->counter;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	791b      	ldrb	r3, [r3, #4]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <blinkLedSetCounter>:

void blinkLedSetCounter(BlinkLed *blinkLed, uint8_t counter)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	70fb      	strb	r3, [r7, #3]
	blinkLed->counter = counter;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	78fa      	ldrb	r2, [r7, #3]
 8000a24:	711a      	strb	r2, [r3, #4]
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <blinkLedGetBlinkPattern>:

uint8_t blinkLedGetBlinkPattern(BlinkLed *blinkLed)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
	return blinkLed->blinkPattern;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	795b      	ldrb	r3, [r3, #5]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <blinkLedSetBlinkPattern>:

void blinkLedSetBlinkPattern(BlinkLed *blinkLed, uint8_t blinkPattern)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	460b      	mov	r3, r1
 8000a54:	70fb      	strb	r3, [r7, #3]
	blinkLed->blinkPattern = blinkPattern;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	78fa      	ldrb	r2, [r7, #3]
 8000a5a:	715a      	strb	r2, [r3, #5]
	blinkLedSetCounter(blinkLed, 0);
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff ffd8 	bl	8000a14 <blinkLedSetCounter>
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <HAL_TIM_PeriodElapsedCallback>:

/*
 * Timer interrupt handling (100us)
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	if (htim == &htim9)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d10b      	bne.n	8000a94 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		sendDataDelay++;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	3301      	adds	r3, #1
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a86:	801a      	strh	r2, [r3, #0]
		blinkLedDelay++;
 8000a88:	4b07      	ldr	r3, [pc, #28]	@ (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	4b05      	ldr	r3, [pc, #20]	@ (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000a92:	801a      	strh	r2, [r3, #0]
	}
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	20000078 	.word	0x20000078
 8000aa4:	2000010a 	.word	0x2000010a
 8000aa8:	2000010c 	.word	0x2000010c

08000aac <HAL_UART_RxCpltCallback>:

/*
 * Interrupt for UART RX
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a11      	ldr	r2, [pc, #68]	@ (8000afc <HAL_UART_RxCpltCallback+0x50>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d11a      	bne.n	8000af2 <HAL_UART_RxCpltCallback+0x46>
	{
		HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 8000abc:	2201      	movs	r2, #1
 8000abe:	4910      	ldr	r1, [pc, #64]	@ (8000b00 <HAL_UART_RxCpltCallback+0x54>)
 8000ac0:	480e      	ldr	r0, [pc, #56]	@ (8000afc <HAL_UART_RxCpltCallback+0x50>)
 8000ac2:	f002 f960 	bl	8002d86 <HAL_UART_Receive_IT>
		if (appGetTpEchoEnable(&app) == TRUE)
 8000ac6:	480f      	ldr	r0, [pc, #60]	@ (8000b04 <HAL_UART_RxCpltCallback+0x58>)
 8000ac8:	f7ff fe03 	bl	80006d2 <appGetTpEchoEnable>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d106      	bne.n	8000ae0 <HAL_UART_RxCpltCallback+0x34>
		{
			HAL_UART_Transmit(&huart2, &receivedByte, 1, HAL_MAX_DELAY);
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	4909      	ldr	r1, [pc, #36]	@ (8000b00 <HAL_UART_RxCpltCallback+0x54>)
 8000ada:	4808      	ldr	r0, [pc, #32]	@ (8000afc <HAL_UART_RxCpltCallback+0x50>)
 8000adc:	f002 f8c8 	bl	8002c70 <HAL_UART_Transmit>
		}
		appAppendTpByte(&app, receivedByte);
 8000ae0:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <HAL_UART_RxCpltCallback+0x54>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4807      	ldr	r0, [pc, #28]	@ (8000b04 <HAL_UART_RxCpltCallback+0x58>)
 8000ae8:	f7ff fd3e 	bl	8000568 <appAppendTpByte>
		receivedByte = 0x00;
 8000aec:	4b04      	ldr	r3, [pc, #16]	@ (8000b00 <HAL_UART_RxCpltCallback+0x54>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
	}
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200000c0 	.word	0x200000c0
 8000b00:	20000108 	.word	0x20000108
 8000b04:	20000110 	.word	0x20000110

08000b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b093      	sub	sp, #76	@ 0x4c
 8000b0c:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b0e:	f000 fad5 	bl	80010bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b12:	f000 f885 	bl	8000c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b16:	f000 f959 	bl	8000dcc <MX_GPIO_Init>
  MX_TIM9_Init();
 8000b1a:	f000 f8f3 	bl	8000d04 <MX_TIM9_Init>
  MX_USART2_UART_Init();
 8000b1e:	f000 f92b 	bl	8000d78 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim9);
 8000b22:	4837      	ldr	r0, [pc, #220]	@ (8000c00 <main+0xf8>)
 8000b24:	f001 fcaa 	bl	800247c <HAL_TIM_Base_Start_IT>
  appInit(&app, LED_GPIO_Port, LED_Pin, huart2);
 8000b28:	4c36      	ldr	r4, [pc, #216]	@ (8000c04 <main+0xfc>)
 8000b2a:	4668      	mov	r0, sp
 8000b2c:	1d23      	adds	r3, r4, #4
 8000b2e:	2244      	movs	r2, #68	@ 0x44
 8000b30:	4619      	mov	r1, r3
 8000b32:	f003 fca9 	bl	8004488 <memcpy>
 8000b36:	6823      	ldr	r3, [r4, #0]
 8000b38:	2220      	movs	r2, #32
 8000b3a:	4933      	ldr	r1, [pc, #204]	@ (8000c08 <main+0x100>)
 8000b3c:	4833      	ldr	r0, [pc, #204]	@ (8000c0c <main+0x104>)
 8000b3e:	f7ff fce1 	bl	8000504 <appInit>
  HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 8000b42:	2201      	movs	r2, #1
 8000b44:	4932      	ldr	r1, [pc, #200]	@ (8000c10 <main+0x108>)
 8000b46:	482f      	ldr	r0, [pc, #188]	@ (8000c04 <main+0xfc>)
 8000b48:	f002 f91d 	bl	8002d86 <HAL_UART_Receive_IT>

	  /* ============================================================================= */

	  /****************************** STATE MACHINE START ******************************/

	  switch (stateMachine)
 8000b4c:	4b31      	ldr	r3, [pc, #196]	@ (8000c14 <main+0x10c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b05      	cmp	r3, #5
 8000b52:	d84e      	bhi.n	8000bf2 <main+0xea>
 8000b54:	a201      	add	r2, pc, #4	@ (adr r2, 8000b5c <main+0x54>)
 8000b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5a:	bf00      	nop
 8000b5c:	08000b75 	.word	0x08000b75
 8000b60:	08000b9b 	.word	0x08000b9b
 8000b64:	08000ba9 	.word	0x08000ba9
 8000b68:	08000bb7 	.word	0x08000bb7
 8000b6c:	08000bd1 	.word	0x08000bd1
 8000b70:	08000bd9 	.word	0x08000bd9
	  {
		  case 0:
			  if (blinkLedDelay >= appGetBlinkDelay(&app))
 8000b74:	4b28      	ldr	r3, [pc, #160]	@ (8000c18 <main+0x110>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	461c      	mov	r4, r3
 8000b7a:	4824      	ldr	r0, [pc, #144]	@ (8000c0c <main+0x104>)
 8000b7c:	f7ff fd9c 	bl	80006b8 <appGetBlinkDelay>
 8000b80:	4603      	mov	r3, r0
 8000b82:	429c      	cmp	r4, r3
 8000b84:	d305      	bcc.n	8000b92 <main+0x8a>
			  {
				  appExecuteBlinkLed(&app);
 8000b86:	4821      	ldr	r0, [pc, #132]	@ (8000c0c <main+0x104>)
 8000b88:	f7ff fce2 	bl	8000550 <appExecuteBlinkLed>
				  blinkLedDelay = 0;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	@ (8000c18 <main+0x110>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 1;
 8000b92:	4b20      	ldr	r3, [pc, #128]	@ (8000c14 <main+0x10c>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	701a      	strb	r2, [r3, #0]
			  break;
 8000b98:	e030      	b.n	8000bfc <main+0xf4>

		  case 1:
			  appExtractTpData(&app);
 8000b9a:	481c      	ldr	r0, [pc, #112]	@ (8000c0c <main+0x104>)
 8000b9c:	f7ff fcf5 	bl	800058a <appExtractTpData>
			  stateMachine = 2;
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c14 <main+0x10c>)
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	701a      	strb	r2, [r3, #0]
			  break;
 8000ba6:	e029      	b.n	8000bfc <main+0xf4>

		  case 2:
			  appDecodeExtractedTpCommand(&app);
 8000ba8:	4818      	ldr	r0, [pc, #96]	@ (8000c0c <main+0x104>)
 8000baa:	f7ff fcfb 	bl	80005a4 <appDecodeExtractedTpCommand>
			  stateMachine = 3;
 8000bae:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <main+0x10c>)
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	701a      	strb	r2, [r3, #0]
			  break;
 8000bb4:	e022      	b.n	8000bfc <main+0xf4>

		  case 3:
			  stateMachine = 4;
 8000bb6:	4b17      	ldr	r3, [pc, #92]	@ (8000c14 <main+0x10c>)
 8000bb8:	2204      	movs	r2, #4
 8000bba:	701a      	strb	r2, [r3, #0]
			  if (appGetCommandStatus(&app) == VALID_RX_COMMAND)
 8000bbc:	4813      	ldr	r0, [pc, #76]	@ (8000c0c <main+0x104>)
 8000bbe:	f7ff fd96 	bl	80006ee <appGetCommandStatus>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d118      	bne.n	8000bfa <main+0xf2>
			  {
				  appExecuteReceivedCommandRoutine(&app);
 8000bc8:	4810      	ldr	r0, [pc, #64]	@ (8000c0c <main+0x104>)
 8000bca:	f7ff fcf8 	bl	80005be <appExecuteReceivedCommandRoutine>
			  }
			  break;
 8000bce:	e014      	b.n	8000bfa <main+0xf2>

		  case 4:
			  stateMachine = 5;
 8000bd0:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <main+0x10c>)
 8000bd2:	2205      	movs	r2, #5
 8000bd4:	701a      	strb	r2, [r3, #0]
			  break;
 8000bd6:	e011      	b.n	8000bfc <main+0xf4>

		  case 5:
			  if (sendDataDelay >= DELAY_5000_MILISECONDS)
 8000bd8:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <main+0x114>)
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d902      	bls.n	8000bea <main+0xe2>
			  {
				  sendDataDelay = 0;
 8000be4:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <main+0x114>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 0;
 8000bea:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <main+0x10c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
			  break;
 8000bf0:	e004      	b.n	8000bfc <main+0xf4>

		  default:
			  stateMachine = 0;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <main+0x10c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
			  break;
 8000bf8:	e000      	b.n	8000bfc <main+0xf4>
			  break;
 8000bfa:	bf00      	nop
	  switch (stateMachine)
 8000bfc:	e7a6      	b.n	8000b4c <main+0x44>
 8000bfe:	bf00      	nop
 8000c00:	20000078 	.word	0x20000078
 8000c04:	200000c0 	.word	0x200000c0
 8000c08:	40020000 	.word	0x40020000
 8000c0c:	20000110 	.word	0x20000110
 8000c10:	20000108 	.word	0x20000108
 8000c14:	20000109 	.word	0x20000109
 8000c18:	2000010c 	.word	0x2000010c
 8000c1c:	2000010a 	.word	0x2000010a

08000c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b094      	sub	sp, #80	@ 0x50
 8000c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	2234      	movs	r2, #52	@ 0x34
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f003 fbf8 	bl	8004424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c34:	f107 0308 	add.w	r3, r7, #8
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	4b2c      	ldr	r3, [pc, #176]	@ (8000cfc <SystemClock_Config+0xdc>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4c:	4a2b      	ldr	r2, [pc, #172]	@ (8000cfc <SystemClock_Config+0xdc>)
 8000c4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c54:	4b29      	ldr	r3, [pc, #164]	@ (8000cfc <SystemClock_Config+0xdc>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c60:	2300      	movs	r3, #0
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	4b26      	ldr	r3, [pc, #152]	@ (8000d00 <SystemClock_Config+0xe0>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a25      	ldr	r2, [pc, #148]	@ (8000d00 <SystemClock_Config+0xe0>)
 8000c6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c6e:	6013      	str	r3, [r2, #0]
 8000c70:	4b23      	ldr	r3, [pc, #140]	@ (8000d00 <SystemClock_Config+0xe0>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c78:	603b      	str	r3, [r7, #0]
 8000c7a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c80:	2301      	movs	r3, #1
 8000c82:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c84:	2310      	movs	r3, #16
 8000c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c90:	2308      	movs	r3, #8
 8000c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000c94:	23b4      	movs	r3, #180	@ 0xb4
 8000c96:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f001 f8f9 	bl	8001ea0 <HAL_RCC_OscConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000cb4:	f000 f8dc 	bl	8000e70 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cb8:	f000 fdde 	bl	8001878 <HAL_PWREx_EnableOverDrive>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000cc2:	f000 f8d5 	bl	8000e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc6:	230f      	movs	r3, #15
 8000cc8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cd2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000cd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cdc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cde:	f107 0308 	add.w	r3, r7, #8
 8000ce2:	2105      	movs	r1, #5
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 fe17 	bl	8001918 <HAL_RCC_ClockConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000cf0:	f000 f8be 	bl	8000e70 <Error_Handler>
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	3750      	adds	r7, #80	@ 0x50
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40007000 	.word	0x40007000

08000d04 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000d16:	4b16      	ldr	r3, [pc, #88]	@ (8000d70 <MX_TIM9_Init+0x6c>)
 8000d18:	4a16      	ldr	r2, [pc, #88]	@ (8000d74 <MX_TIM9_Init+0x70>)
 8000d1a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 5-1;
 8000d1c:	4b14      	ldr	r3, [pc, #80]	@ (8000d70 <MX_TIM9_Init+0x6c>)
 8000d1e:	2204      	movs	r2, #4
 8000d20:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d22:	4b13      	ldr	r3, [pc, #76]	@ (8000d70 <MX_TIM9_Init+0x6c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 3665;
 8000d28:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <MX_TIM9_Init+0x6c>)
 8000d2a:	f640 6251 	movw	r2, #3665	@ 0xe51
 8000d2e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	@ (8000d70 <MX_TIM9_Init+0x6c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	@ (8000d70 <MX_TIM9_Init+0x6c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000d3c:	480c      	ldr	r0, [pc, #48]	@ (8000d70 <MX_TIM9_Init+0x6c>)
 8000d3e:	f001 fb4d 	bl	80023dc <HAL_TIM_Base_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8000d48:	f000 f892 	bl	8000e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d50:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000d52:	463b      	mov	r3, r7
 8000d54:	4619      	mov	r1, r3
 8000d56:	4806      	ldr	r0, [pc, #24]	@ (8000d70 <MX_TIM9_Init+0x6c>)
 8000d58:	f001 fcf0 	bl	800273c <HAL_TIM_ConfigClockSource>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8000d62:	f000 f885 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000078 	.word	0x20000078
 8000d74:	40014000 	.word	0x40014000

08000d78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	@ (8000dc8 <MX_USART2_UART_Init+0x50>)
 8000d80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d82:	4b10      	ldr	r3, [pc, #64]	@ (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000d9e:	220c      	movs	r2, #12
 8000da0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	@ (8000dc4 <MX_USART2_UART_Init+0x4c>)
 8000db0:	f001 ff0e 	bl	8002bd0 <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dba:	f000 f859 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200000c0 	.word	0x200000c0
 8000dc8:	40004400 	.word	0x40004400

08000dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 030c 	add.w	r3, r7, #12
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e64 <MX_GPIO_Init+0x98>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	4a1e      	ldr	r2, [pc, #120]	@ (8000e64 <MX_GPIO_Init+0x98>)
 8000dec:	f043 0304 	orr.w	r3, r3, #4
 8000df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e64 <MX_GPIO_Init+0x98>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	4b18      	ldr	r3, [pc, #96]	@ (8000e64 <MX_GPIO_Init+0x98>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	4a17      	ldr	r2, [pc, #92]	@ (8000e64 <MX_GPIO_Init+0x98>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0e:	4b15      	ldr	r3, [pc, #84]	@ (8000e64 <MX_GPIO_Init+0x98>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2120      	movs	r1, #32
 8000e1e:	4812      	ldr	r0, [pc, #72]	@ (8000e68 <MX_GPIO_Init+0x9c>)
 8000e20:	f000 fcf6 	bl	8001810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000e24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	4619      	mov	r1, r3
 8000e38:	480c      	ldr	r0, [pc, #48]	@ (8000e6c <MX_GPIO_Init+0xa0>)
 8000e3a:	f000 fb55 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e3e:	2320      	movs	r3, #32
 8000e40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 030c 	add.w	r3, r7, #12
 8000e52:	4619      	mov	r1, r3
 8000e54:	4804      	ldr	r0, [pc, #16]	@ (8000e68 <MX_GPIO_Init+0x9c>)
 8000e56:	f000 fb47 	bl	80014e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e5a:	bf00      	nop
 8000e5c:	3720      	adds	r7, #32
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020000 	.word	0x40020000
 8000e6c:	40020800 	.word	0x40020800

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <Error_Handler+0x8>

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b10      	ldr	r3, [pc, #64]	@ (8000ec8 <HAL_MspInit+0x4c>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec8 <HAL_MspInit+0x4c>)
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec8 <HAL_MspInit+0x4c>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	4b09      	ldr	r3, [pc, #36]	@ (8000ec8 <HAL_MspInit+0x4c>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea6:	4a08      	ldr	r2, [pc, #32]	@ (8000ec8 <HAL_MspInit+0x4c>)
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eae:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <HAL_MspInit+0x4c>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800

08000ecc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8000f14 <HAL_TIM_Base_MspInit+0x48>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d115      	bne.n	8000f0a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f18 <HAL_TIM_Base_MspInit+0x4c>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee6:	4a0c      	ldr	r2, [pc, #48]	@ (8000f18 <HAL_TIM_Base_MspInit+0x4c>)
 8000ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eee:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <HAL_TIM_Base_MspInit+0x4c>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	2018      	movs	r0, #24
 8000f00:	f000 fa29 	bl	8001356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000f04:	2018      	movs	r0, #24
 8000f06:	f000 fa42 	bl	800138e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM9_MspInit 1 */

  }

}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40014000 	.word	0x40014000
 8000f18:	40023800 	.word	0x40023800

08000f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	@ 0x28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a1d      	ldr	r2, [pc, #116]	@ (8000fb0 <HAL_UART_MspInit+0x94>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d133      	bne.n	8000fa6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb4 <HAL_UART_MspInit+0x98>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f46:	4a1b      	ldr	r2, [pc, #108]	@ (8000fb4 <HAL_UART_MspInit+0x98>)
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f4e:	4b19      	ldr	r3, [pc, #100]	@ (8000fb4 <HAL_UART_MspInit+0x98>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <HAL_UART_MspInit+0x98>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	4a14      	ldr	r2, [pc, #80]	@ (8000fb4 <HAL_UART_MspInit+0x98>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6a:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <HAL_UART_MspInit+0x98>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f76:	230c      	movs	r3, #12
 8000f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f86:	2307      	movs	r3, #7
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4809      	ldr	r0, [pc, #36]	@ (8000fb8 <HAL_UART_MspInit+0x9c>)
 8000f92:	f000 faa9 	bl	80014e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2026      	movs	r0, #38	@ 0x26
 8000f9c:	f000 f9db 	bl	8001356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fa0:	2026      	movs	r0, #38	@ 0x26
 8000fa2:	f000 f9f4 	bl	800138e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000fa6:	bf00      	nop
 8000fa8:	3728      	adds	r7, #40	@ 0x28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40004400 	.word	0x40004400
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020000 	.word	0x40020000

08000fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <NMI_Handler+0x4>

08000fc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001012:	f000 f8a5 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001020:	4802      	ldr	r0, [pc, #8]	@ (800102c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001022:	f001 fa9b 	bl	800255c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000078 	.word	0x20000078

08001030 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001034:	4802      	ldr	r0, [pc, #8]	@ (8001040 <USART2_IRQHandler+0x10>)
 8001036:	f001 fecb 	bl	8002dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200000c0 	.word	0x200000c0

08001044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <SystemInit+0x20>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800104e:	4a05      	ldr	r2, [pc, #20]	@ (8001064 <SystemInit+0x20>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001068:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800106c:	f7ff ffea 	bl	8001044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001070:	480c      	ldr	r0, [pc, #48]	@ (80010a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001072:	490d      	ldr	r1, [pc, #52]	@ (80010a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001074:	4a0d      	ldr	r2, [pc, #52]	@ (80010ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a0a      	ldr	r2, [pc, #40]	@ (80010b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001088:	4c0a      	ldr	r4, [pc, #40]	@ (80010b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001096:	f003 f9d3 	bl	8004440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109a:	f7ff fd35 	bl	8000b08 <main>
  bx  lr    
 800109e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010ac:	080046a4 	.word	0x080046a4
  ldr r2, =_sbss
 80010b0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010b4:	20000484 	.word	0x20000484

080010b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC_IRQHandler>
	...

080010bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c0:	4b0e      	ldr	r3, [pc, #56]	@ (80010fc <HAL_Init+0x40>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0d      	ldr	r2, [pc, #52]	@ (80010fc <HAL_Init+0x40>)
 80010c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010cc:	4b0b      	ldr	r3, [pc, #44]	@ (80010fc <HAL_Init+0x40>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <HAL_Init+0x40>)
 80010d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a07      	ldr	r2, [pc, #28]	@ (80010fc <HAL_Init+0x40>)
 80010de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e4:	2003      	movs	r0, #3
 80010e6:	f000 f92b 	bl	8001340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ea:	200f      	movs	r0, #15
 80010ec:	f000 f808 	bl	8001100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f0:	f7ff fec4 	bl	8000e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023c00 	.word	0x40023c00

08001100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_InitTick+0x54>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <HAL_InitTick+0x58>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001116:	fbb3 f3f1 	udiv	r3, r3, r1
 800111a:	fbb2 f3f3 	udiv	r3, r2, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f943 	bl	80013aa <HAL_SYSTICK_Config>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e00e      	b.n	800114c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b0f      	cmp	r3, #15
 8001132:	d80a      	bhi.n	800114a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001134:	2200      	movs	r2, #0
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f000 f90b 	bl	8001356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001140:	4a06      	ldr	r2, [pc, #24]	@ (800115c <HAL_InitTick+0x5c>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	e000      	b.n	800114c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000000 	.word	0x20000000
 8001158:	20000008 	.word	0x20000008
 800115c:	20000004 	.word	0x20000004

08001160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <HAL_IncTick+0x20>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <HAL_IncTick+0x24>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a04      	ldr	r2, [pc, #16]	@ (8001184 <HAL_IncTick+0x24>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000008 	.word	0x20000008
 8001184:	20000348 	.word	0x20000348

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b03      	ldr	r3, [pc, #12]	@ (800119c <HAL_GetTick+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000348 	.word	0x20000348

080011a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011bc:	4013      	ands	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d2:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	60d3      	str	r3, [r2, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ec:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <__NVIC_GetPriorityGrouping+0x18>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	f003 0307 	and.w	r3, r3, #7
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	db0b      	blt.n	800122e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	f003 021f 	and.w	r2, r3, #31
 800121c:	4907      	ldr	r1, [pc, #28]	@ (800123c <__NVIC_EnableIRQ+0x38>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	095b      	lsrs	r3, r3, #5
 8001224:	2001      	movs	r0, #1
 8001226:	fa00 f202 	lsl.w	r2, r0, r2
 800122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000e100 	.word	0xe000e100

08001240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	db0a      	blt.n	800126a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	490c      	ldr	r1, [pc, #48]	@ (800128c <__NVIC_SetPriority+0x4c>)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	0112      	lsls	r2, r2, #4
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	440b      	add	r3, r1
 8001264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001268:	e00a      	b.n	8001280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4908      	ldr	r1, [pc, #32]	@ (8001290 <__NVIC_SetPriority+0x50>)
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	3b04      	subs	r3, #4
 8001278:	0112      	lsls	r2, r2, #4
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	440b      	add	r3, r1
 800127e:	761a      	strb	r2, [r3, #24]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000e100 	.word	0xe000e100
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001294:	b480      	push	{r7}
 8001296:	b089      	sub	sp, #36	@ 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f1c3 0307 	rsb	r3, r3, #7
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	bf28      	it	cs
 80012b2:	2304      	movcs	r3, #4
 80012b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3304      	adds	r3, #4
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	d902      	bls.n	80012c4 <NVIC_EncodePriority+0x30>
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3b03      	subs	r3, #3
 80012c2:	e000      	b.n	80012c6 <NVIC_EncodePriority+0x32>
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43da      	mvns	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	401a      	ands	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
 80012e6:	43d9      	mvns	r1, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	4313      	orrs	r3, r2
         );
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3724      	adds	r7, #36	@ 0x24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800130c:	d301      	bcc.n	8001312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130e:	2301      	movs	r3, #1
 8001310:	e00f      	b.n	8001332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001312:	4a0a      	ldr	r2, [pc, #40]	@ (800133c <SysTick_Config+0x40>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131a:	210f      	movs	r1, #15
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f7ff ff8e 	bl	8001240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001324:	4b05      	ldr	r3, [pc, #20]	@ (800133c <SysTick_Config+0x40>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132a:	4b04      	ldr	r3, [pc, #16]	@ (800133c <SysTick_Config+0x40>)
 800132c:	2207      	movs	r2, #7
 800132e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	e000e010 	.word	0xe000e010

08001340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff29 	bl	80011a0 <__NVIC_SetPriorityGrouping>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001356:	b580      	push	{r7, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
 8001362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001368:	f7ff ff3e 	bl	80011e8 <__NVIC_GetPriorityGrouping>
 800136c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	68b9      	ldr	r1, [r7, #8]
 8001372:	6978      	ldr	r0, [r7, #20]
 8001374:	f7ff ff8e 	bl	8001294 <NVIC_EncodePriority>
 8001378:	4602      	mov	r2, r0
 800137a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff5d 	bl	8001240 <__NVIC_SetPriority>
}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff31 	bl	8001204 <__NVIC_EnableIRQ>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ffa2 	bl	80012fc <SysTick_Config>
 80013b8:	4603      	mov	r3, r0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b084      	sub	sp, #16
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013d0:	f7ff feda 	bl	8001188 <HAL_GetTick>
 80013d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d008      	beq.n	80013f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2280      	movs	r2, #128	@ 0x80
 80013e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e052      	b.n	800149a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0216 	bic.w	r2, r2, #22
 8001402:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	695a      	ldr	r2, [r3, #20]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001412:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001418:	2b00      	cmp	r3, #0
 800141a:	d103      	bne.n	8001424 <HAL_DMA_Abort+0x62>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001420:	2b00      	cmp	r3, #0
 8001422:	d007      	beq.n	8001434 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0208 	bic.w	r2, r2, #8
 8001432:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0201 	bic.w	r2, r2, #1
 8001442:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001444:	e013      	b.n	800146e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001446:	f7ff fe9f 	bl	8001188 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b05      	cmp	r3, #5
 8001452:	d90c      	bls.n	800146e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2220      	movs	r2, #32
 8001458:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2203      	movs	r2, #3
 800145e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e015      	b.n	800149a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1e4      	bne.n	8001446 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001480:	223f      	movs	r2, #63	@ 0x3f
 8001482:	409a      	lsls	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d004      	beq.n	80014c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2280      	movs	r2, #128	@ 0x80
 80014ba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e00c      	b.n	80014da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2205      	movs	r2, #5
 80014c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0201 	bic.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b089      	sub	sp, #36	@ 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
 8001502:	e165      	b.n	80017d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001504:	2201      	movs	r2, #1
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	429a      	cmp	r2, r3
 800151e:	f040 8154 	bne.w	80017ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	2b01      	cmp	r3, #1
 800152c:	d005      	beq.n	800153a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001536:	2b02      	cmp	r3, #2
 8001538:	d130      	bne.n	800159c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	2203      	movs	r2, #3
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001570:	2201      	movs	r2, #1
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	091b      	lsrs	r3, r3, #4
 8001586:	f003 0201 	and.w	r2, r3, #1
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d017      	beq.n	80015d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	2203      	movs	r2, #3
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d123      	bne.n	800162c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	08da      	lsrs	r2, r3, #3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3208      	adds	r2, #8
 80015ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	220f      	movs	r2, #15
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	691a      	ldr	r2, [r3, #16]
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	08da      	lsrs	r2, r3, #3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3208      	adds	r2, #8
 8001626:	69b9      	ldr	r1, [r7, #24]
 8001628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	2203      	movs	r2, #3
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 0203 	and.w	r2, r3, #3
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 80ae 	beq.w	80017ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	4b5d      	ldr	r3, [pc, #372]	@ (80017e8 <HAL_GPIO_Init+0x300>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	4a5c      	ldr	r2, [pc, #368]	@ (80017e8 <HAL_GPIO_Init+0x300>)
 8001678:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800167c:	6453      	str	r3, [r2, #68]	@ 0x44
 800167e:	4b5a      	ldr	r3, [pc, #360]	@ (80017e8 <HAL_GPIO_Init+0x300>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800168a:	4a58      	ldr	r2, [pc, #352]	@ (80017ec <HAL_GPIO_Init+0x304>)
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	3302      	adds	r3, #2
 8001692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	220f      	movs	r2, #15
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4013      	ands	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4f      	ldr	r2, [pc, #316]	@ (80017f0 <HAL_GPIO_Init+0x308>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d025      	beq.n	8001702 <HAL_GPIO_Init+0x21a>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4e      	ldr	r2, [pc, #312]	@ (80017f4 <HAL_GPIO_Init+0x30c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d01f      	beq.n	80016fe <HAL_GPIO_Init+0x216>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4d      	ldr	r2, [pc, #308]	@ (80017f8 <HAL_GPIO_Init+0x310>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d019      	beq.n	80016fa <HAL_GPIO_Init+0x212>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4c      	ldr	r2, [pc, #304]	@ (80017fc <HAL_GPIO_Init+0x314>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d013      	beq.n	80016f6 <HAL_GPIO_Init+0x20e>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4b      	ldr	r2, [pc, #300]	@ (8001800 <HAL_GPIO_Init+0x318>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d00d      	beq.n	80016f2 <HAL_GPIO_Init+0x20a>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4a      	ldr	r2, [pc, #296]	@ (8001804 <HAL_GPIO_Init+0x31c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d007      	beq.n	80016ee <HAL_GPIO_Init+0x206>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a49      	ldr	r2, [pc, #292]	@ (8001808 <HAL_GPIO_Init+0x320>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d101      	bne.n	80016ea <HAL_GPIO_Init+0x202>
 80016e6:	2306      	movs	r3, #6
 80016e8:	e00c      	b.n	8001704 <HAL_GPIO_Init+0x21c>
 80016ea:	2307      	movs	r3, #7
 80016ec:	e00a      	b.n	8001704 <HAL_GPIO_Init+0x21c>
 80016ee:	2305      	movs	r3, #5
 80016f0:	e008      	b.n	8001704 <HAL_GPIO_Init+0x21c>
 80016f2:	2304      	movs	r3, #4
 80016f4:	e006      	b.n	8001704 <HAL_GPIO_Init+0x21c>
 80016f6:	2303      	movs	r3, #3
 80016f8:	e004      	b.n	8001704 <HAL_GPIO_Init+0x21c>
 80016fa:	2302      	movs	r3, #2
 80016fc:	e002      	b.n	8001704 <HAL_GPIO_Init+0x21c>
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <HAL_GPIO_Init+0x21c>
 8001702:	2300      	movs	r3, #0
 8001704:	69fa      	ldr	r2, [r7, #28]
 8001706:	f002 0203 	and.w	r2, r2, #3
 800170a:	0092      	lsls	r2, r2, #2
 800170c:	4093      	lsls	r3, r2
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001714:	4935      	ldr	r1, [pc, #212]	@ (80017ec <HAL_GPIO_Init+0x304>)
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	089b      	lsrs	r3, r3, #2
 800171a:	3302      	adds	r3, #2
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001722:	4b3a      	ldr	r3, [pc, #232]	@ (800180c <HAL_GPIO_Init+0x324>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	43db      	mvns	r3, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001746:	4a31      	ldr	r2, [pc, #196]	@ (800180c <HAL_GPIO_Init+0x324>)
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800174c:	4b2f      	ldr	r3, [pc, #188]	@ (800180c <HAL_GPIO_Init+0x324>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001770:	4a26      	ldr	r2, [pc, #152]	@ (800180c <HAL_GPIO_Init+0x324>)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001776:	4b25      	ldr	r3, [pc, #148]	@ (800180c <HAL_GPIO_Init+0x324>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800179a:	4a1c      	ldr	r2, [pc, #112]	@ (800180c <HAL_GPIO_Init+0x324>)
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017a0:	4b1a      	ldr	r3, [pc, #104]	@ (800180c <HAL_GPIO_Init+0x324>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017c4:	4a11      	ldr	r2, [pc, #68]	@ (800180c <HAL_GPIO_Init+0x324>)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3301      	adds	r3, #1
 80017ce:	61fb      	str	r3, [r7, #28]
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	2b0f      	cmp	r3, #15
 80017d4:	f67f ae96 	bls.w	8001504 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	3724      	adds	r7, #36	@ 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40013800 	.word	0x40013800
 80017f0:	40020000 	.word	0x40020000
 80017f4:	40020400 	.word	0x40020400
 80017f8:	40020800 	.word	0x40020800
 80017fc:	40020c00 	.word	0x40020c00
 8001800:	40021000 	.word	0x40021000
 8001804:	40021400 	.word	0x40021400
 8001808:	40021800 	.word	0x40021800
 800180c:	40013c00 	.word	0x40013c00

08001810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	807b      	strh	r3, [r7, #2]
 800181c:	4613      	mov	r3, r2
 800181e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001820:	787b      	ldrb	r3, [r7, #1]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001826:	887a      	ldrh	r2, [r7, #2]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800182c:	e003      	b.n	8001836 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800182e:	887b      	ldrh	r3, [r7, #2]
 8001830:	041a      	lsls	r2, r3, #16
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	619a      	str	r2, [r3, #24]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001842:	b480      	push	{r7}
 8001844:	b085      	sub	sp, #20
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	460b      	mov	r3, r1
 800184c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001854:	887a      	ldrh	r2, [r7, #2]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4013      	ands	r3, r2
 800185a:	041a      	lsls	r2, r3, #16
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	43d9      	mvns	r1, r3
 8001860:	887b      	ldrh	r3, [r7, #2]
 8001862:	400b      	ands	r3, r1
 8001864:	431a      	orrs	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	619a      	str	r2, [r3, #24]
}
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800187e:	2300      	movs	r3, #0
 8001880:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	4b20      	ldr	r3, [pc, #128]	@ (8001908 <HAL_PWREx_EnableOverDrive+0x90>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	4a1f      	ldr	r2, [pc, #124]	@ (8001908 <HAL_PWREx_EnableOverDrive+0x90>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001890:	6413      	str	r3, [r2, #64]	@ 0x40
 8001892:	4b1d      	ldr	r3, [pc, #116]	@ (8001908 <HAL_PWREx_EnableOverDrive+0x90>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800189e:	4b1b      	ldr	r3, [pc, #108]	@ (800190c <HAL_PWREx_EnableOverDrive+0x94>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018a4:	f7ff fc70 	bl	8001188 <HAL_GetTick>
 80018a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018aa:	e009      	b.n	80018c0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018ac:	f7ff fc6c 	bl	8001188 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018ba:	d901      	bls.n	80018c0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e01f      	b.n	8001900 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018c0:	4b13      	ldr	r3, [pc, #76]	@ (8001910 <HAL_PWREx_EnableOverDrive+0x98>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018cc:	d1ee      	bne.n	80018ac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80018ce:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <HAL_PWREx_EnableOverDrive+0x9c>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018d4:	f7ff fc58 	bl	8001188 <HAL_GetTick>
 80018d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80018da:	e009      	b.n	80018f0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018dc:	f7ff fc54 	bl	8001188 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018ea:	d901      	bls.n	80018f0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e007      	b.n	8001900 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80018f0:	4b07      	ldr	r3, [pc, #28]	@ (8001910 <HAL_PWREx_EnableOverDrive+0x98>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80018fc:	d1ee      	bne.n	80018dc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40023800 	.word	0x40023800
 800190c:	420e0040 	.word	0x420e0040
 8001910:	40007000 	.word	0x40007000
 8001914:	420e0044 	.word	0x420e0044

08001918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0cc      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800192c:	4b68      	ldr	r3, [pc, #416]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 030f 	and.w	r3, r3, #15
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d90c      	bls.n	8001954 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b65      	ldr	r3, [pc, #404]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001942:	4b63      	ldr	r3, [pc, #396]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0b8      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d020      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800196c:	4b59      	ldr	r3, [pc, #356]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	4a58      	ldr	r2, [pc, #352]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001976:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001984:	4b53      	ldr	r3, [pc, #332]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	4a52      	ldr	r2, [pc, #328]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800198e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001990:	4b50      	ldr	r3, [pc, #320]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	494d      	ldr	r1, [pc, #308]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d044      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d107      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	4b47      	ldr	r3, [pc, #284]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d119      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e07f      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d003      	beq.n	80019d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d109      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e06f      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e067      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019f6:	4b37      	ldr	r3, [pc, #220]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f023 0203 	bic.w	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4934      	ldr	r1, [pc, #208]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a08:	f7ff fbbe 	bl	8001188 <HAL_GetTick>
 8001a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	e00a      	b.n	8001a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a10:	f7ff fbba 	bl	8001188 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e04f      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a26:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 020c 	and.w	r2, r3, #12
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d1eb      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a38:	4b25      	ldr	r3, [pc, #148]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 030f 	and.w	r3, r3, #15
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d20c      	bcs.n	8001a60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b22      	ldr	r3, [pc, #136]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4e:	4b20      	ldr	r3, [pc, #128]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e032      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d008      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a6c:	4b19      	ldr	r3, [pc, #100]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	4916      	ldr	r1, [pc, #88]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d009      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a8a:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	490e      	ldr	r1, [pc, #56]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a9e:	f000 f855 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	091b      	lsrs	r3, r3, #4
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	490a      	ldr	r1, [pc, #40]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab0:	5ccb      	ldrb	r3, [r1, r3]
 8001ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab6:	4a09      	ldr	r2, [pc, #36]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aba:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fb1e 	bl	8001100 <HAL_InitTick>

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023c00 	.word	0x40023c00
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	08004564 	.word	0x08004564
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20000004 	.word	0x20000004

08001ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ae8:	4b03      	ldr	r3, [pc, #12]	@ (8001af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000000 	.word	0x20000000

08001afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b00:	f7ff fff0 	bl	8001ae4 <HAL_RCC_GetHCLKFreq>
 8001b04:	4602      	mov	r2, r0
 8001b06:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	0a9b      	lsrs	r3, r3, #10
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	4903      	ldr	r1, [pc, #12]	@ (8001b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b12:	5ccb      	ldrb	r3, [r1, r3]
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	08004574 	.word	0x08004574

08001b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b28:	f7ff ffdc 	bl	8001ae4 <HAL_RCC_GetHCLKFreq>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	0b5b      	lsrs	r3, r3, #13
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	4903      	ldr	r1, [pc, #12]	@ (8001b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b3a:	5ccb      	ldrb	r3, [r1, r3]
 8001b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40023800 	.word	0x40023800
 8001b48:	08004574 	.word	0x08004574

08001b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b50:	b0a6      	sub	sp, #152	@ 0x98
 8001b52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b72:	4bc8      	ldr	r3, [pc, #800]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	2b0c      	cmp	r3, #12
 8001b7c:	f200 817e 	bhi.w	8001e7c <HAL_RCC_GetSysClockFreq+0x330>
 8001b80:	a201      	add	r2, pc, #4	@ (adr r2, 8001b88 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b86:	bf00      	nop
 8001b88:	08001bbd 	.word	0x08001bbd
 8001b8c:	08001e7d 	.word	0x08001e7d
 8001b90:	08001e7d 	.word	0x08001e7d
 8001b94:	08001e7d 	.word	0x08001e7d
 8001b98:	08001bc5 	.word	0x08001bc5
 8001b9c:	08001e7d 	.word	0x08001e7d
 8001ba0:	08001e7d 	.word	0x08001e7d
 8001ba4:	08001e7d 	.word	0x08001e7d
 8001ba8:	08001bcd 	.word	0x08001bcd
 8001bac:	08001e7d 	.word	0x08001e7d
 8001bb0:	08001e7d 	.word	0x08001e7d
 8001bb4:	08001e7d 	.word	0x08001e7d
 8001bb8:	08001d37 	.word	0x08001d37
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bbc:	4bb6      	ldr	r3, [pc, #728]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001bbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8001bc2:	e15f      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bc4:	4bb5      	ldr	r3, [pc, #724]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x350>)
 8001bc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001bca:	e15b      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bcc:	4bb1      	ldr	r3, [pc, #708]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x348>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bd8:	4bae      	ldr	r3, [pc, #696]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x348>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d031      	beq.n	8001c48 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be4:	4bab      	ldr	r3, [pc, #684]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x348>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	099b      	lsrs	r3, r3, #6
 8001bea:	2200      	movs	r2, #0
 8001bec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001bee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001bf0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bf6:	663b      	str	r3, [r7, #96]	@ 0x60
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	667b      	str	r3, [r7, #100]	@ 0x64
 8001bfc:	4ba7      	ldr	r3, [pc, #668]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x350>)
 8001bfe:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001c02:	462a      	mov	r2, r5
 8001c04:	fb03 f202 	mul.w	r2, r3, r2
 8001c08:	2300      	movs	r3, #0
 8001c0a:	4621      	mov	r1, r4
 8001c0c:	fb01 f303 	mul.w	r3, r1, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	4aa2      	ldr	r2, [pc, #648]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x350>)
 8001c14:	4621      	mov	r1, r4
 8001c16:	fba1 1202 	umull	r1, r2, r1, r2
 8001c1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001c1c:	460a      	mov	r2, r1
 8001c1e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001c20:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001c22:	4413      	add	r3, r2
 8001c24:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001c26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001c2e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001c30:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c34:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001c38:	f7fe faec 	bl	8000214 <__aeabi_uldivmod>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4613      	mov	r3, r2
 8001c42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c46:	e064      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c48:	4b92      	ldr	r3, [pc, #584]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	099b      	lsrs	r3, r3, #6
 8001c4e:	2200      	movs	r2, #0
 8001c50:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c52:	657a      	str	r2, [r7, #84]	@ 0x54
 8001c54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c60:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001c64:	4622      	mov	r2, r4
 8001c66:	462b      	mov	r3, r5
 8001c68:	f04f 0000 	mov.w	r0, #0
 8001c6c:	f04f 0100 	mov.w	r1, #0
 8001c70:	0159      	lsls	r1, r3, #5
 8001c72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c76:	0150      	lsls	r0, r2, #5
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4621      	mov	r1, r4
 8001c7e:	1a51      	subs	r1, r2, r1
 8001c80:	6139      	str	r1, [r7, #16]
 8001c82:	4629      	mov	r1, r5
 8001c84:	eb63 0301 	sbc.w	r3, r3, r1
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c96:	4659      	mov	r1, fp
 8001c98:	018b      	lsls	r3, r1, #6
 8001c9a:	4651      	mov	r1, sl
 8001c9c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ca0:	4651      	mov	r1, sl
 8001ca2:	018a      	lsls	r2, r1, #6
 8001ca4:	4651      	mov	r1, sl
 8001ca6:	ebb2 0801 	subs.w	r8, r2, r1
 8001caa:	4659      	mov	r1, fp
 8001cac:	eb63 0901 	sbc.w	r9, r3, r1
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	f04f 0300 	mov.w	r3, #0
 8001cb8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cbc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cc0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cc4:	4690      	mov	r8, r2
 8001cc6:	4699      	mov	r9, r3
 8001cc8:	4623      	mov	r3, r4
 8001cca:	eb18 0303 	adds.w	r3, r8, r3
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	462b      	mov	r3, r5
 8001cd2:	eb49 0303 	adc.w	r3, r9, r3
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ce4:	4629      	mov	r1, r5
 8001ce6:	028b      	lsls	r3, r1, #10
 8001ce8:	4621      	mov	r1, r4
 8001cea:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cee:	4621      	mov	r1, r4
 8001cf0:	028a      	lsls	r2, r1, #10
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8001cfe:	647a      	str	r2, [r7, #68]	@ 0x44
 8001d00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001d04:	f7fe fa86 	bl	8000214 <__aeabi_uldivmod>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d12:	4b60      	ldr	r3, [pc, #384]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	0c1b      	lsrs	r3, r3, #16
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8001d24:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001d28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001d34:	e0a6      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d36:	4b57      	ldr	r3, [pc, #348]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d42:	4b54      	ldr	r3, [pc, #336]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d02a      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d4e:	4b51      	ldr	r3, [pc, #324]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	099b      	lsrs	r3, r3, #6
 8001d54:	2200      	movs	r2, #0
 8001d56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d58:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d60:	2100      	movs	r1, #0
 8001d62:	4b4e      	ldr	r3, [pc, #312]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x350>)
 8001d64:	fb03 f201 	mul.w	r2, r3, r1
 8001d68:	2300      	movs	r3, #0
 8001d6a:	fb00 f303 	mul.w	r3, r0, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	4a4a      	ldr	r2, [pc, #296]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x350>)
 8001d72:	fba0 1202 	umull	r1, r2, r0, r2
 8001d76:	677a      	str	r2, [r7, #116]	@ 0x74
 8001d78:	460a      	mov	r2, r1
 8001d7a:	673a      	str	r2, [r7, #112]	@ 0x70
 8001d7c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001d7e:	4413      	add	r3, r2
 8001d80:	677b      	str	r3, [r7, #116]	@ 0x74
 8001d82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d86:	2200      	movs	r2, #0
 8001d88:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d8a:	637a      	str	r2, [r7, #52]	@ 0x34
 8001d8c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d90:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001d94:	f7fe fa3e 	bl	8000214 <__aeabi_uldivmod>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001da2:	e05b      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001da4:	4b3b      	ldr	r3, [pc, #236]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x348>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	099b      	lsrs	r3, r3, #6
 8001daa:	2200      	movs	r2, #0
 8001dac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001db6:	623b      	str	r3, [r7, #32]
 8001db8:	2300      	movs	r3, #0
 8001dba:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001dc0:	4642      	mov	r2, r8
 8001dc2:	464b      	mov	r3, r9
 8001dc4:	f04f 0000 	mov.w	r0, #0
 8001dc8:	f04f 0100 	mov.w	r1, #0
 8001dcc:	0159      	lsls	r1, r3, #5
 8001dce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dd2:	0150      	lsls	r0, r2, #5
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4641      	mov	r1, r8
 8001dda:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dde:	4649      	mov	r1, r9
 8001de0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001df0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001df4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001df8:	ebb2 040a 	subs.w	r4, r2, sl
 8001dfc:	eb63 050b 	sbc.w	r5, r3, fp
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	00eb      	lsls	r3, r5, #3
 8001e0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e0e:	00e2      	lsls	r2, r4, #3
 8001e10:	4614      	mov	r4, r2
 8001e12:	461d      	mov	r5, r3
 8001e14:	4643      	mov	r3, r8
 8001e16:	18e3      	adds	r3, r4, r3
 8001e18:	603b      	str	r3, [r7, #0]
 8001e1a:	464b      	mov	r3, r9
 8001e1c:	eb45 0303 	adc.w	r3, r5, r3
 8001e20:	607b      	str	r3, [r7, #4]
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e2e:	4629      	mov	r1, r5
 8001e30:	028b      	lsls	r3, r1, #10
 8001e32:	4621      	mov	r1, r4
 8001e34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e38:	4621      	mov	r1, r4
 8001e3a:	028a      	lsls	r2, r1, #10
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e44:	2200      	movs	r2, #0
 8001e46:	61bb      	str	r3, [r7, #24]
 8001e48:	61fa      	str	r2, [r7, #28]
 8001e4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e4e:	f7fe f9e1 	bl	8000214 <__aeabi_uldivmod>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4613      	mov	r3, r2
 8001e58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	0f1b      	lsrs	r3, r3, #28
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8001e6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001e6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001e7a:	e003      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001e7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001e82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e84:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3798      	adds	r7, #152	@ 0x98
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800
 8001e98:	00f42400 	.word	0x00f42400
 8001e9c:	017d7840 	.word	0x017d7840

08001ea0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e28d      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8083 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ec0:	4b94      	ldr	r3, [pc, #592]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d019      	beq.n	8001f00 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ecc:	4b91      	ldr	r3, [pc, #580]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d106      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ed8:	4b8e      	ldr	r3, [pc, #568]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ee0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ee4:	d00c      	beq.n	8001f00 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ee6:	4b8b      	ldr	r3, [pc, #556]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001eee:	2b0c      	cmp	r3, #12
 8001ef0:	d112      	bne.n	8001f18 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ef2:	4b88      	ldr	r3, [pc, #544]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001efa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001efe:	d10b      	bne.n	8001f18 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f00:	4b84      	ldr	r3, [pc, #528]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d05b      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x124>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d157      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e25a      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f20:	d106      	bne.n	8001f30 <HAL_RCC_OscConfig+0x90>
 8001f22:	4b7c      	ldr	r3, [pc, #496]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a7b      	ldr	r2, [pc, #492]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	e01d      	b.n	8001f6c <HAL_RCC_OscConfig+0xcc>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0xb4>
 8001f3a:	4b76      	ldr	r3, [pc, #472]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a75      	ldr	r2, [pc, #468]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	4b73      	ldr	r3, [pc, #460]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a72      	ldr	r2, [pc, #456]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	e00b      	b.n	8001f6c <HAL_RCC_OscConfig+0xcc>
 8001f54:	4b6f      	ldr	r3, [pc, #444]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a6e      	ldr	r2, [pc, #440]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	4b6c      	ldr	r3, [pc, #432]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a6b      	ldr	r2, [pc, #428]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d013      	beq.n	8001f9c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7ff f908 	bl	8001188 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f7c:	f7ff f904 	bl	8001188 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b64      	cmp	r3, #100	@ 0x64
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e21f      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8e:	4b61      	ldr	r3, [pc, #388]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0f0      	beq.n	8001f7c <HAL_RCC_OscConfig+0xdc>
 8001f9a:	e014      	b.n	8001fc6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7ff f8f4 	bl	8001188 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa4:	f7ff f8f0 	bl	8001188 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b64      	cmp	r3, #100	@ 0x64
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e20b      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb6:	4b57      	ldr	r3, [pc, #348]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x104>
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d06f      	beq.n	80020b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fd2:	4b50      	ldr	r3, [pc, #320]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d017      	beq.n	800200e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fde:	4b4d      	ldr	r3, [pc, #308]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d105      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fea:	4b4a      	ldr	r3, [pc, #296]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00b      	beq.n	800200e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ff6:	4b47      	ldr	r3, [pc, #284]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ffe:	2b0c      	cmp	r3, #12
 8002000:	d11c      	bne.n	800203c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002002:	4b44      	ldr	r3, [pc, #272]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d116      	bne.n	800203c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200e:	4b41      	ldr	r3, [pc, #260]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d005      	beq.n	8002026 <HAL_RCC_OscConfig+0x186>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d001      	beq.n	8002026 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e1d3      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002026:	4b3b      	ldr	r3, [pc, #236]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4937      	ldr	r1, [pc, #220]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	e03a      	b.n	80020b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d020      	beq.n	8002086 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002044:	4b34      	ldr	r3, [pc, #208]	@ (8002118 <HAL_RCC_OscConfig+0x278>)
 8002046:	2201      	movs	r2, #1
 8002048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204a:	f7ff f89d 	bl	8001188 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002052:	f7ff f899 	bl	8001188 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e1b4      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002064:	4b2b      	ldr	r3, [pc, #172]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002070:	4b28      	ldr	r3, [pc, #160]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4925      	ldr	r1, [pc, #148]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 8002080:	4313      	orrs	r3, r2
 8002082:	600b      	str	r3, [r1, #0]
 8002084:	e015      	b.n	80020b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002086:	4b24      	ldr	r3, [pc, #144]	@ (8002118 <HAL_RCC_OscConfig+0x278>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7ff f87c 	bl	8001188 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002094:	f7ff f878 	bl	8001188 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e193      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d036      	beq.n	800212c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d016      	beq.n	80020f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c6:	4b15      	ldr	r3, [pc, #84]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020cc:	f7ff f85c 	bl	8001188 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d4:	f7ff f858 	bl	8001188 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e173      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002114 <HAL_RCC_OscConfig+0x274>)
 80020e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0x234>
 80020f2:	e01b      	b.n	800212c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f4:	4b09      	ldr	r3, [pc, #36]	@ (800211c <HAL_RCC_OscConfig+0x27c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fa:	f7ff f845 	bl	8001188 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002100:	e00e      	b.n	8002120 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002102:	f7ff f841 	bl	8001188 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d907      	bls.n	8002120 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e15c      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
 8002114:	40023800 	.word	0x40023800
 8002118:	42470000 	.word	0x42470000
 800211c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002120:	4b8a      	ldr	r3, [pc, #552]	@ (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002122:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1ea      	bne.n	8002102 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 8097 	beq.w	8002268 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213e:	4b83      	ldr	r3, [pc, #524]	@ (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10f      	bne.n	800216a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	4b7f      	ldr	r3, [pc, #508]	@ (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	4a7e      	ldr	r2, [pc, #504]	@ (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002158:	6413      	str	r3, [r2, #64]	@ 0x40
 800215a:	4b7c      	ldr	r3, [pc, #496]	@ (800234c <HAL_RCC_OscConfig+0x4ac>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002166:	2301      	movs	r3, #1
 8002168:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216a:	4b79      	ldr	r3, [pc, #484]	@ (8002350 <HAL_RCC_OscConfig+0x4b0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d118      	bne.n	80021a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002176:	4b76      	ldr	r3, [pc, #472]	@ (8002350 <HAL_RCC_OscConfig+0x4b0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a75      	ldr	r2, [pc, #468]	@ (8002350 <HAL_RCC_OscConfig+0x4b0>)
 800217c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002182:	f7ff f801 	bl	8001188 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218a:	f7fe fffd 	bl	8001188 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e118      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219c:	4b6c      	ldr	r3, [pc, #432]	@ (8002350 <HAL_RCC_OscConfig+0x4b0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d106      	bne.n	80021be <HAL_RCC_OscConfig+0x31e>
 80021b0:	4b66      	ldr	r3, [pc, #408]	@ (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b4:	4a65      	ldr	r2, [pc, #404]	@ (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80021bc:	e01c      	b.n	80021f8 <HAL_RCC_OscConfig+0x358>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b05      	cmp	r3, #5
 80021c4:	d10c      	bne.n	80021e0 <HAL_RCC_OscConfig+0x340>
 80021c6:	4b61      	ldr	r3, [pc, #388]	@ (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ca:	4a60      	ldr	r2, [pc, #384]	@ (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021cc:	f043 0304 	orr.w	r3, r3, #4
 80021d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80021d2:	4b5e      	ldr	r3, [pc, #376]	@ (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d6:	4a5d      	ldr	r2, [pc, #372]	@ (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80021de:	e00b      	b.n	80021f8 <HAL_RCC_OscConfig+0x358>
 80021e0:	4b5a      	ldr	r3, [pc, #360]	@ (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e4:	4a59      	ldr	r2, [pc, #356]	@ (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021e6:	f023 0301 	bic.w	r3, r3, #1
 80021ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80021ec:	4b57      	ldr	r3, [pc, #348]	@ (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f0:	4a56      	ldr	r2, [pc, #344]	@ (800234c <HAL_RCC_OscConfig+0x4ac>)
 80021f2:	f023 0304 	bic.w	r3, r3, #4
 80021f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d015      	beq.n	800222c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002200:	f7fe ffc2 	bl	8001188 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002206:	e00a      	b.n	800221e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002208:	f7fe ffbe 	bl	8001188 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e0d7      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221e:	4b4b      	ldr	r3, [pc, #300]	@ (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0ee      	beq.n	8002208 <HAL_RCC_OscConfig+0x368>
 800222a:	e014      	b.n	8002256 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222c:	f7fe ffac 	bl	8001188 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002232:	e00a      	b.n	800224a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002234:	f7fe ffa8 	bl	8001188 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e0c1      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800224a:	4b40      	ldr	r3, [pc, #256]	@ (800234c <HAL_RCC_OscConfig+0x4ac>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1ee      	bne.n	8002234 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002256:	7dfb      	ldrb	r3, [r7, #23]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d105      	bne.n	8002268 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800225c:	4b3b      	ldr	r3, [pc, #236]	@ (800234c <HAL_RCC_OscConfig+0x4ac>)
 800225e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002260:	4a3a      	ldr	r2, [pc, #232]	@ (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002262:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002266:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 80ad 	beq.w	80023cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002272:	4b36      	ldr	r3, [pc, #216]	@ (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b08      	cmp	r3, #8
 800227c:	d060      	beq.n	8002340 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d145      	bne.n	8002312 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002286:	4b33      	ldr	r3, [pc, #204]	@ (8002354 <HAL_RCC_OscConfig+0x4b4>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7fe ff7c 	bl	8001188 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002294:	f7fe ff78 	bl	8001188 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e093      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a6:	4b29      	ldr	r3, [pc, #164]	@ (800234c <HAL_RCC_OscConfig+0x4ac>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69da      	ldr	r2, [r3, #28]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c0:	019b      	lsls	r3, r3, #6
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c8:	085b      	lsrs	r3, r3, #1
 80022ca:	3b01      	subs	r3, #1
 80022cc:	041b      	lsls	r3, r3, #16
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d4:	061b      	lsls	r3, r3, #24
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022dc:	071b      	lsls	r3, r3, #28
 80022de:	491b      	ldr	r1, [pc, #108]	@ (800234c <HAL_RCC_OscConfig+0x4ac>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002354 <HAL_RCC_OscConfig+0x4b4>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ea:	f7fe ff4d 	bl	8001188 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f2:	f7fe ff49 	bl	8001188 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e064      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002304:	4b11      	ldr	r3, [pc, #68]	@ (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0f0      	beq.n	80022f2 <HAL_RCC_OscConfig+0x452>
 8002310:	e05c      	b.n	80023cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002312:	4b10      	ldr	r3, [pc, #64]	@ (8002354 <HAL_RCC_OscConfig+0x4b4>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7fe ff36 	bl	8001188 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002320:	f7fe ff32 	bl	8001188 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e04d      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002332:	4b06      	ldr	r3, [pc, #24]	@ (800234c <HAL_RCC_OscConfig+0x4ac>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x480>
 800233e:	e045      	b.n	80023cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d107      	bne.n	8002358 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e040      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
 800234c:	40023800 	.word	0x40023800
 8002350:	40007000 	.word	0x40007000
 8002354:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002358:	4b1f      	ldr	r3, [pc, #124]	@ (80023d8 <HAL_RCC_OscConfig+0x538>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d030      	beq.n	80023c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002370:	429a      	cmp	r2, r3
 8002372:	d129      	bne.n	80023c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d122      	bne.n	80023c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002388:	4013      	ands	r3, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800238e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002390:	4293      	cmp	r3, r2
 8002392:	d119      	bne.n	80023c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239e:	085b      	lsrs	r3, r3, #1
 80023a0:	3b01      	subs	r3, #1
 80023a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d10f      	bne.n	80023c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d107      	bne.n	80023c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800

080023dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e041      	b.n	8002472 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d106      	bne.n	8002408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7fe fd62 	bl	8000ecc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3304      	adds	r3, #4
 8002418:	4619      	mov	r1, r3
 800241a:	4610      	mov	r0, r2
 800241c:	f000 fa7e 	bl	800291c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b01      	cmp	r3, #1
 800248e:	d001      	beq.n	8002494 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e04e      	b.n	8002532 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2202      	movs	r2, #2
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a23      	ldr	r2, [pc, #140]	@ (8002540 <HAL_TIM_Base_Start_IT+0xc4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d022      	beq.n	80024fc <HAL_TIM_Base_Start_IT+0x80>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024be:	d01d      	beq.n	80024fc <HAL_TIM_Base_Start_IT+0x80>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002544 <HAL_TIM_Base_Start_IT+0xc8>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d018      	beq.n	80024fc <HAL_TIM_Base_Start_IT+0x80>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002548 <HAL_TIM_Base_Start_IT+0xcc>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d013      	beq.n	80024fc <HAL_TIM_Base_Start_IT+0x80>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a1c      	ldr	r2, [pc, #112]	@ (800254c <HAL_TIM_Base_Start_IT+0xd0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00e      	beq.n	80024fc <HAL_TIM_Base_Start_IT+0x80>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002550 <HAL_TIM_Base_Start_IT+0xd4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d009      	beq.n	80024fc <HAL_TIM_Base_Start_IT+0x80>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a19      	ldr	r2, [pc, #100]	@ (8002554 <HAL_TIM_Base_Start_IT+0xd8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d004      	beq.n	80024fc <HAL_TIM_Base_Start_IT+0x80>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a18      	ldr	r2, [pc, #96]	@ (8002558 <HAL_TIM_Base_Start_IT+0xdc>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d111      	bne.n	8002520 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2b06      	cmp	r3, #6
 800250c:	d010      	beq.n	8002530 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 0201 	orr.w	r2, r2, #1
 800251c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800251e:	e007      	b.n	8002530 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40010000 	.word	0x40010000
 8002544:	40000400 	.word	0x40000400
 8002548:	40000800 	.word	0x40000800
 800254c:	40000c00 	.word	0x40000c00
 8002550:	40010400 	.word	0x40010400
 8002554:	40014000 	.word	0x40014000
 8002558:	40001800 	.word	0x40001800

0800255c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d020      	beq.n	80025c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01b      	beq.n	80025c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0202 	mvn.w	r2, #2
 8002590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f999 	bl	80028de <HAL_TIM_IC_CaptureCallback>
 80025ac:	e005      	b.n	80025ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f98b 	bl	80028ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f99c 	bl	80028f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f003 0304 	and.w	r3, r3, #4
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d020      	beq.n	800260c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01b      	beq.n	800260c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f06f 0204 	mvn.w	r2, #4
 80025dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2202      	movs	r2, #2
 80025e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f973 	bl	80028de <HAL_TIM_IC_CaptureCallback>
 80025f8:	e005      	b.n	8002606 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f965 	bl	80028ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f976 	bl	80028f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d020      	beq.n	8002658 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d01b      	beq.n	8002658 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0208 	mvn.w	r2, #8
 8002628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2204      	movs	r2, #4
 800262e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f94d 	bl	80028de <HAL_TIM_IC_CaptureCallback>
 8002644:	e005      	b.n	8002652 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f93f 	bl	80028ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f950 	bl	80028f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f003 0310 	and.w	r3, r3, #16
 800265e:	2b00      	cmp	r3, #0
 8002660:	d020      	beq.n	80026a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b00      	cmp	r3, #0
 800266a:	d01b      	beq.n	80026a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f06f 0210 	mvn.w	r2, #16
 8002674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2208      	movs	r2, #8
 800267a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f927 	bl	80028de <HAL_TIM_IC_CaptureCallback>
 8002690:	e005      	b.n	800269e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f919 	bl	80028ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f92a 	bl	80028f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00c      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d007      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f06f 0201 	mvn.w	r2, #1
 80026c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7fe f9d2 	bl	8000a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00c      	beq.n	80026ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80026e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 fa68 	bl	8002bbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00c      	beq.n	8002710 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d007      	beq.n	8002710 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f8fb 	bl	8002906 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00c      	beq.n	8002734 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f003 0320 	and.w	r3, r3, #32
 8002720:	2b00      	cmp	r3, #0
 8002722:	d007      	beq.n	8002734 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f06f 0220 	mvn.w	r2, #32
 800272c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 fa3a 	bl	8002ba8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002734:	bf00      	nop
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_TIM_ConfigClockSource+0x1c>
 8002754:	2302      	movs	r3, #2
 8002756:	e0b4      	b.n	80028c2 <HAL_TIM_ConfigClockSource+0x186>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002776:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800277e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002790:	d03e      	beq.n	8002810 <HAL_TIM_ConfigClockSource+0xd4>
 8002792:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002796:	f200 8087 	bhi.w	80028a8 <HAL_TIM_ConfigClockSource+0x16c>
 800279a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800279e:	f000 8086 	beq.w	80028ae <HAL_TIM_ConfigClockSource+0x172>
 80027a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027a6:	d87f      	bhi.n	80028a8 <HAL_TIM_ConfigClockSource+0x16c>
 80027a8:	2b70      	cmp	r3, #112	@ 0x70
 80027aa:	d01a      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0xa6>
 80027ac:	2b70      	cmp	r3, #112	@ 0x70
 80027ae:	d87b      	bhi.n	80028a8 <HAL_TIM_ConfigClockSource+0x16c>
 80027b0:	2b60      	cmp	r3, #96	@ 0x60
 80027b2:	d050      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0x11a>
 80027b4:	2b60      	cmp	r3, #96	@ 0x60
 80027b6:	d877      	bhi.n	80028a8 <HAL_TIM_ConfigClockSource+0x16c>
 80027b8:	2b50      	cmp	r3, #80	@ 0x50
 80027ba:	d03c      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0xfa>
 80027bc:	2b50      	cmp	r3, #80	@ 0x50
 80027be:	d873      	bhi.n	80028a8 <HAL_TIM_ConfigClockSource+0x16c>
 80027c0:	2b40      	cmp	r3, #64	@ 0x40
 80027c2:	d058      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0x13a>
 80027c4:	2b40      	cmp	r3, #64	@ 0x40
 80027c6:	d86f      	bhi.n	80028a8 <HAL_TIM_ConfigClockSource+0x16c>
 80027c8:	2b30      	cmp	r3, #48	@ 0x30
 80027ca:	d064      	beq.n	8002896 <HAL_TIM_ConfigClockSource+0x15a>
 80027cc:	2b30      	cmp	r3, #48	@ 0x30
 80027ce:	d86b      	bhi.n	80028a8 <HAL_TIM_ConfigClockSource+0x16c>
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d060      	beq.n	8002896 <HAL_TIM_ConfigClockSource+0x15a>
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	d867      	bhi.n	80028a8 <HAL_TIM_ConfigClockSource+0x16c>
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d05c      	beq.n	8002896 <HAL_TIM_ConfigClockSource+0x15a>
 80027dc:	2b10      	cmp	r3, #16
 80027de:	d05a      	beq.n	8002896 <HAL_TIM_ConfigClockSource+0x15a>
 80027e0:	e062      	b.n	80028a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027f2:	f000 f9b9 	bl	8002b68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002804:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	609a      	str	r2, [r3, #8]
      break;
 800280e:	e04f      	b.n	80028b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002820:	f000 f9a2 	bl	8002b68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002832:	609a      	str	r2, [r3, #8]
      break;
 8002834:	e03c      	b.n	80028b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002842:	461a      	mov	r2, r3
 8002844:	f000 f916 	bl	8002a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2150      	movs	r1, #80	@ 0x50
 800284e:	4618      	mov	r0, r3
 8002850:	f000 f96f 	bl	8002b32 <TIM_ITRx_SetConfig>
      break;
 8002854:	e02c      	b.n	80028b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002862:	461a      	mov	r2, r3
 8002864:	f000 f935 	bl	8002ad2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2160      	movs	r1, #96	@ 0x60
 800286e:	4618      	mov	r0, r3
 8002870:	f000 f95f 	bl	8002b32 <TIM_ITRx_SetConfig>
      break;
 8002874:	e01c      	b.n	80028b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002882:	461a      	mov	r2, r3
 8002884:	f000 f8f6 	bl	8002a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2140      	movs	r1, #64	@ 0x40
 800288e:	4618      	mov	r0, r3
 8002890:	f000 f94f 	bl	8002b32 <TIM_ITRx_SetConfig>
      break;
 8002894:	e00c      	b.n	80028b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4619      	mov	r1, r3
 80028a0:	4610      	mov	r0, r2
 80028a2:	f000 f946 	bl	8002b32 <TIM_ITRx_SetConfig>
      break;
 80028a6:	e003      	b.n	80028b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
      break;
 80028ac:	e000      	b.n	80028b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a46      	ldr	r2, [pc, #280]	@ (8002a48 <TIM_Base_SetConfig+0x12c>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d013      	beq.n	800295c <TIM_Base_SetConfig+0x40>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800293a:	d00f      	beq.n	800295c <TIM_Base_SetConfig+0x40>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a43      	ldr	r2, [pc, #268]	@ (8002a4c <TIM_Base_SetConfig+0x130>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d00b      	beq.n	800295c <TIM_Base_SetConfig+0x40>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a42      	ldr	r2, [pc, #264]	@ (8002a50 <TIM_Base_SetConfig+0x134>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d007      	beq.n	800295c <TIM_Base_SetConfig+0x40>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a41      	ldr	r2, [pc, #260]	@ (8002a54 <TIM_Base_SetConfig+0x138>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d003      	beq.n	800295c <TIM_Base_SetConfig+0x40>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a40      	ldr	r2, [pc, #256]	@ (8002a58 <TIM_Base_SetConfig+0x13c>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d108      	bne.n	800296e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a35      	ldr	r2, [pc, #212]	@ (8002a48 <TIM_Base_SetConfig+0x12c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d02b      	beq.n	80029ce <TIM_Base_SetConfig+0xb2>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800297c:	d027      	beq.n	80029ce <TIM_Base_SetConfig+0xb2>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a32      	ldr	r2, [pc, #200]	@ (8002a4c <TIM_Base_SetConfig+0x130>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d023      	beq.n	80029ce <TIM_Base_SetConfig+0xb2>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a31      	ldr	r2, [pc, #196]	@ (8002a50 <TIM_Base_SetConfig+0x134>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d01f      	beq.n	80029ce <TIM_Base_SetConfig+0xb2>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a30      	ldr	r2, [pc, #192]	@ (8002a54 <TIM_Base_SetConfig+0x138>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d01b      	beq.n	80029ce <TIM_Base_SetConfig+0xb2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a2f      	ldr	r2, [pc, #188]	@ (8002a58 <TIM_Base_SetConfig+0x13c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d017      	beq.n	80029ce <TIM_Base_SetConfig+0xb2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a2e      	ldr	r2, [pc, #184]	@ (8002a5c <TIM_Base_SetConfig+0x140>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d013      	beq.n	80029ce <TIM_Base_SetConfig+0xb2>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002a60 <TIM_Base_SetConfig+0x144>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00f      	beq.n	80029ce <TIM_Base_SetConfig+0xb2>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a2c      	ldr	r2, [pc, #176]	@ (8002a64 <TIM_Base_SetConfig+0x148>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00b      	beq.n	80029ce <TIM_Base_SetConfig+0xb2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002a68 <TIM_Base_SetConfig+0x14c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d007      	beq.n	80029ce <TIM_Base_SetConfig+0xb2>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a2a      	ldr	r2, [pc, #168]	@ (8002a6c <TIM_Base_SetConfig+0x150>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d003      	beq.n	80029ce <TIM_Base_SetConfig+0xb2>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a29      	ldr	r2, [pc, #164]	@ (8002a70 <TIM_Base_SetConfig+0x154>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d108      	bne.n	80029e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4313      	orrs	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a10      	ldr	r2, [pc, #64]	@ (8002a48 <TIM_Base_SetConfig+0x12c>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d003      	beq.n	8002a14 <TIM_Base_SetConfig+0xf8>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a12      	ldr	r2, [pc, #72]	@ (8002a58 <TIM_Base_SetConfig+0x13c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d103      	bne.n	8002a1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d105      	bne.n	8002a3a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f023 0201 	bic.w	r2, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	611a      	str	r2, [r3, #16]
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40010000 	.word	0x40010000
 8002a4c:	40000400 	.word	0x40000400
 8002a50:	40000800 	.word	0x40000800
 8002a54:	40000c00 	.word	0x40000c00
 8002a58:	40010400 	.word	0x40010400
 8002a5c:	40014000 	.word	0x40014000
 8002a60:	40014400 	.word	0x40014400
 8002a64:	40014800 	.word	0x40014800
 8002a68:	40001800 	.word	0x40001800
 8002a6c:	40001c00 	.word	0x40001c00
 8002a70:	40002000 	.word	0x40002000

08002a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	f023 0201 	bic.w	r2, r3, #1
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f023 030a 	bic.w	r3, r3, #10
 8002ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	621a      	str	r2, [r3, #32]
}
 8002ac6:	bf00      	nop
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b087      	sub	sp, #28
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	f023 0210 	bic.w	r2, r3, #16
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002afc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	031b      	lsls	r3, r3, #12
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	621a      	str	r2, [r3, #32]
}
 8002b26:	bf00      	nop
 8002b28:	371c      	adds	r7, #28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b085      	sub	sp, #20
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f043 0307 	orr.w	r3, r3, #7
 8002b54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	609a      	str	r2, [r3, #8]
}
 8002b5c:	bf00      	nop
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	021a      	lsls	r2, r3, #8
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	609a      	str	r2, [r3, #8]
}
 8002b9c:	bf00      	nop
 8002b9e:	371c      	adds	r7, #28
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e042      	b.n	8002c68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d106      	bne.n	8002bfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7fe f990 	bl	8000f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2224      	movs	r2, #36	@ 0x24
 8002c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 fdbd 	bl	8003794 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695a      	ldr	r2, [r3, #20]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08a      	sub	sp, #40	@ 0x28
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b20      	cmp	r3, #32
 8002c8e:	d175      	bne.n	8002d7c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <HAL_UART_Transmit+0x2c>
 8002c96:	88fb      	ldrh	r3, [r7, #6]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e06e      	b.n	8002d7e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2221      	movs	r2, #33	@ 0x21
 8002caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cae:	f7fe fa6b 	bl	8001188 <HAL_GetTick>
 8002cb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	88fa      	ldrh	r2, [r7, #6]
 8002cb8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	88fa      	ldrh	r2, [r7, #6]
 8002cbe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cc8:	d108      	bne.n	8002cdc <HAL_UART_Transmit+0x6c>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d104      	bne.n	8002cdc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	61bb      	str	r3, [r7, #24]
 8002cda:	e003      	b.n	8002ce4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ce4:	e02e      	b.n	8002d44 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2200      	movs	r2, #0
 8002cee:	2180      	movs	r1, #128	@ 0x80
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 fb1f 	bl	8003334 <UART_WaitOnFlagUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e03a      	b.n	8002d7e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10b      	bne.n	8002d26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	461a      	mov	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	3302      	adds	r3, #2
 8002d22:	61bb      	str	r3, [r7, #24]
 8002d24:	e007      	b.n	8002d36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	781a      	ldrb	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	3301      	adds	r3, #1
 8002d34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1cb      	bne.n	8002ce6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2200      	movs	r2, #0
 8002d56:	2140      	movs	r1, #64	@ 0x40
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 faeb 	bl	8003334 <UART_WaitOnFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e006      	b.n	8002d7e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	e000      	b.n	8002d7e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d7c:	2302      	movs	r3, #2
  }
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3720      	adds	r7, #32
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b084      	sub	sp, #16
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	4613      	mov	r3, r2
 8002d92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d112      	bne.n	8002dc6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <HAL_UART_Receive_IT+0x26>
 8002da6:	88fb      	ldrh	r3, [r7, #6]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e00b      	b.n	8002dc8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	461a      	mov	r2, r3
 8002dba:	68b9      	ldr	r1, [r7, #8]
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 fb12 	bl	80033e6 <UART_Start_Receive_IT>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	e000      	b.n	8002dc8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002dc6:	2302      	movs	r3, #2
  }
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b0ba      	sub	sp, #232	@ 0xe8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002e0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10f      	bne.n	8002e36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e1a:	f003 0320 	and.w	r3, r3, #32
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d009      	beq.n	8002e36 <HAL_UART_IRQHandler+0x66>
 8002e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e26:	f003 0320 	and.w	r3, r3, #32
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 fbf2 	bl	8003618 <UART_Receive_IT>
      return;
 8002e34:	e25b      	b.n	80032ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 80de 	beq.w	8002ffc <HAL_UART_IRQHandler+0x22c>
 8002e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d106      	bne.n	8002e5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e50:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 80d1 	beq.w	8002ffc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00b      	beq.n	8002e7e <HAL_UART_IRQHandler+0xae>
 8002e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d005      	beq.n	8002e7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e76:	f043 0201 	orr.w	r2, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00b      	beq.n	8002ea2 <HAL_UART_IRQHandler+0xd2>
 8002e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d005      	beq.n	8002ea2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9a:	f043 0202 	orr.w	r2, r3, #2
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00b      	beq.n	8002ec6 <HAL_UART_IRQHandler+0xf6>
 8002eae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d005      	beq.n	8002ec6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ebe:	f043 0204 	orr.w	r2, r3, #4
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d011      	beq.n	8002ef6 <HAL_UART_IRQHandler+0x126>
 8002ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d105      	bne.n	8002eea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eee:	f043 0208 	orr.w	r2, r3, #8
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 81f2 	beq.w	80032e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f04:	f003 0320 	and.w	r3, r3, #32
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_UART_IRQHandler+0x14e>
 8002f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 fb7d 	bl	8003618 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f28:	2b40      	cmp	r3, #64	@ 0x40
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d103      	bne.n	8002f4a <HAL_UART_IRQHandler+0x17a>
 8002f42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d04f      	beq.n	8002fea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 fa85 	bl	800345a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f5a:	2b40      	cmp	r3, #64	@ 0x40
 8002f5c:	d141      	bne.n	8002fe2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3314      	adds	r3, #20
 8002f64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f6c:	e853 3f00 	ldrex	r3, [r3]
 8002f70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002f74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	3314      	adds	r3, #20
 8002f86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f9a:	e841 2300 	strex	r3, r2, [r1]
 8002f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002fa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1d9      	bne.n	8002f5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d013      	beq.n	8002fda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb6:	4a7e      	ldr	r2, [pc, #504]	@ (80031b0 <HAL_UART_IRQHandler+0x3e0>)
 8002fb8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fe fa6f 	bl	80014a2 <HAL_DMA_Abort_IT>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d016      	beq.n	8002ff8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd8:	e00e      	b.n	8002ff8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f994 	bl	8003308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe0:	e00a      	b.n	8002ff8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f990 	bl	8003308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe8:	e006      	b.n	8002ff8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f98c 	bl	8003308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002ff6:	e175      	b.n	80032e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff8:	bf00      	nop
    return;
 8002ffa:	e173      	b.n	80032e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003000:	2b01      	cmp	r3, #1
 8003002:	f040 814f 	bne.w	80032a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800300a:	f003 0310 	and.w	r3, r3, #16
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 8148 	beq.w	80032a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 8141 	beq.w	80032a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003022:	2300      	movs	r3, #0
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003042:	2b40      	cmp	r3, #64	@ 0x40
 8003044:	f040 80b6 	bne.w	80031b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003054:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 8145 	beq.w	80032e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003062:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003066:	429a      	cmp	r2, r3
 8003068:	f080 813e 	bcs.w	80032e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003072:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800307e:	f000 8088 	beq.w	8003192 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	330c      	adds	r3, #12
 8003088:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003090:	e853 3f00 	ldrex	r3, [r3]
 8003094:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003098:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800309c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	330c      	adds	r3, #12
 80030aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80030ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80030b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80030ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80030be:	e841 2300 	strex	r3, r2, [r1]
 80030c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80030c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1d9      	bne.n	8003082 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3314      	adds	r3, #20
 80030d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030d8:	e853 3f00 	ldrex	r3, [r3]
 80030dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80030de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030e0:	f023 0301 	bic.w	r3, r3, #1
 80030e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3314      	adds	r3, #20
 80030ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80030f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80030f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80030fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80030fe:	e841 2300 	strex	r3, r2, [r1]
 8003102:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003104:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1e1      	bne.n	80030ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	3314      	adds	r3, #20
 8003110:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003112:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003114:	e853 3f00 	ldrex	r3, [r3]
 8003118:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800311a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800311c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003120:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	3314      	adds	r3, #20
 800312a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800312e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003130:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003132:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003134:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003136:	e841 2300 	strex	r3, r2, [r1]
 800313a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800313c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1e3      	bne.n	800310a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	330c      	adds	r3, #12
 8003156:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003158:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800315a:	e853 3f00 	ldrex	r3, [r3]
 800315e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003160:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003162:	f023 0310 	bic.w	r3, r3, #16
 8003166:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	330c      	adds	r3, #12
 8003170:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003174:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003176:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003178:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800317a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800317c:	e841 2300 	strex	r3, r2, [r1]
 8003180:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003182:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1e3      	bne.n	8003150 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800318c:	4618      	mov	r0, r3
 800318e:	f7fe f918 	bl	80013c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2202      	movs	r2, #2
 8003196:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	4619      	mov	r1, r3
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f8b7 	bl	800331c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031ae:	e09b      	b.n	80032e8 <HAL_UART_IRQHandler+0x518>
 80031b0:	08003521 	.word	0x08003521
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031bc:	b29b      	uxth	r3, r3
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 808e 	beq.w	80032ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80031d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 8089 	beq.w	80032ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	330c      	adds	r3, #12
 80031e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e4:	e853 3f00 	ldrex	r3, [r3]
 80031e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80031ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	330c      	adds	r3, #12
 80031fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80031fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8003200:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003202:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003204:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003206:	e841 2300 	strex	r3, r2, [r1]
 800320a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800320c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1e3      	bne.n	80031da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3314      	adds	r3, #20
 8003218:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321c:	e853 3f00 	ldrex	r3, [r3]
 8003220:	623b      	str	r3, [r7, #32]
   return(result);
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	f023 0301 	bic.w	r3, r3, #1
 8003228:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3314      	adds	r3, #20
 8003232:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003236:	633a      	str	r2, [r7, #48]	@ 0x30
 8003238:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800323c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800323e:	e841 2300 	strex	r3, r2, [r1]
 8003242:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1e3      	bne.n	8003212 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	330c      	adds	r3, #12
 800325e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	e853 3f00 	ldrex	r3, [r3]
 8003266:	60fb      	str	r3, [r7, #12]
   return(result);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0310 	bic.w	r3, r3, #16
 800326e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	330c      	adds	r3, #12
 8003278:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800327c:	61fa      	str	r2, [r7, #28]
 800327e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003280:	69b9      	ldr	r1, [r7, #24]
 8003282:	69fa      	ldr	r2, [r7, #28]
 8003284:	e841 2300 	strex	r3, r2, [r1]
 8003288:	617b      	str	r3, [r7, #20]
   return(result);
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e3      	bne.n	8003258 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003296:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800329a:	4619      	mov	r1, r3
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f83d 	bl	800331c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032a2:	e023      	b.n	80032ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d009      	beq.n	80032c4 <HAL_UART_IRQHandler+0x4f4>
 80032b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f943 	bl	8003548 <UART_Transmit_IT>
    return;
 80032c2:	e014      	b.n	80032ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00e      	beq.n	80032ee <HAL_UART_IRQHandler+0x51e>
 80032d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f983 	bl	80035e8 <UART_EndTransmit_IT>
    return;
 80032e2:	e004      	b.n	80032ee <HAL_UART_IRQHandler+0x51e>
    return;
 80032e4:	bf00      	nop
 80032e6:	e002      	b.n	80032ee <HAL_UART_IRQHandler+0x51e>
      return;
 80032e8:	bf00      	nop
 80032ea:	e000      	b.n	80032ee <HAL_UART_IRQHandler+0x51e>
      return;
 80032ec:	bf00      	nop
  }
}
 80032ee:	37e8      	adds	r7, #232	@ 0xe8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	4613      	mov	r3, r2
 8003342:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003344:	e03b      	b.n	80033be <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334c:	d037      	beq.n	80033be <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334e:	f7fd ff1b 	bl	8001188 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	6a3a      	ldr	r2, [r7, #32]
 800335a:	429a      	cmp	r2, r3
 800335c:	d302      	bcc.n	8003364 <UART_WaitOnFlagUntilTimeout+0x30>
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e03a      	b.n	80033de <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	d023      	beq.n	80033be <UART_WaitOnFlagUntilTimeout+0x8a>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b80      	cmp	r3, #128	@ 0x80
 800337a:	d020      	beq.n	80033be <UART_WaitOnFlagUntilTimeout+0x8a>
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b40      	cmp	r3, #64	@ 0x40
 8003380:	d01d      	beq.n	80033be <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b08      	cmp	r3, #8
 800338e:	d116      	bne.n	80033be <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f857 	bl	800345a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2208      	movs	r2, #8
 80033b0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e00f      	b.n	80033de <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	4013      	ands	r3, r2
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	bf0c      	ite	eq
 80033ce:	2301      	moveq	r3, #1
 80033d0:	2300      	movne	r3, #0
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	461a      	mov	r2, r3
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d0b4      	beq.n	8003346 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b085      	sub	sp, #20
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	4613      	mov	r3, r2
 80033f2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	88fa      	ldrh	r2, [r7, #6]
 80033fe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	88fa      	ldrh	r2, [r7, #6]
 8003404:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2222      	movs	r2, #34	@ 0x22
 8003410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d007      	beq.n	800342c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800342a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695a      	ldr	r2, [r3, #20]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0220 	orr.w	r2, r2, #32
 800344a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800345a:	b480      	push	{r7}
 800345c:	b095      	sub	sp, #84	@ 0x54
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	330c      	adds	r3, #12
 8003468:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800346c:	e853 3f00 	ldrex	r3, [r3]
 8003470:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003474:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003478:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	330c      	adds	r3, #12
 8003480:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003482:	643a      	str	r2, [r7, #64]	@ 0x40
 8003484:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003486:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003488:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800348a:	e841 2300 	strex	r3, r2, [r1]
 800348e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1e5      	bne.n	8003462 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	3314      	adds	r3, #20
 800349c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	e853 3f00 	ldrex	r3, [r3]
 80034a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	f023 0301 	bic.w	r3, r3, #1
 80034ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3314      	adds	r3, #20
 80034b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034be:	e841 2300 	strex	r3, r2, [r1]
 80034c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e5      	bne.n	8003496 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d119      	bne.n	8003506 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	330c      	adds	r3, #12
 80034d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	e853 3f00 	ldrex	r3, [r3]
 80034e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	f023 0310 	bic.w	r3, r3, #16
 80034e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	330c      	adds	r3, #12
 80034f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034f2:	61ba      	str	r2, [r7, #24]
 80034f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f6:	6979      	ldr	r1, [r7, #20]
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	e841 2300 	strex	r3, r2, [r1]
 80034fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1e5      	bne.n	80034d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003514:	bf00      	nop
 8003516:	3754      	adds	r7, #84	@ 0x54
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f7ff fee4 	bl	8003308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003540:	bf00      	nop
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b21      	cmp	r3, #33	@ 0x21
 800355a:	d13e      	bne.n	80035da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003564:	d114      	bne.n	8003590 <UART_Transmit_IT+0x48>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d110      	bne.n	8003590 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003582:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	1c9a      	adds	r2, r3, #2
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	621a      	str	r2, [r3, #32]
 800358e:	e008      	b.n	80035a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	1c59      	adds	r1, r3, #1
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6211      	str	r1, [r2, #32]
 800359a:	781a      	ldrb	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	4619      	mov	r1, r3
 80035b0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10f      	bne.n	80035d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	e000      	b.n	80035dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035da:	2302      	movs	r3, #2
  }
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7ff fe73 	bl	80032f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08c      	sub	sp, #48	@ 0x30
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b22      	cmp	r3, #34	@ 0x22
 800362a:	f040 80ae 	bne.w	800378a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003636:	d117      	bne.n	8003668 <UART_Receive_IT+0x50>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d113      	bne.n	8003668 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003640:	2300      	movs	r3, #0
 8003642:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003648:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	b29b      	uxth	r3, r3
 8003652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003656:	b29a      	uxth	r2, r3
 8003658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003660:	1c9a      	adds	r2, r3, #2
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	629a      	str	r2, [r3, #40]	@ 0x28
 8003666:	e026      	b.n	80036b6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800366e:	2300      	movs	r3, #0
 8003670:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800367a:	d007      	beq.n	800368c <UART_Receive_IT+0x74>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10a      	bne.n	800369a <UART_Receive_IT+0x82>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d106      	bne.n	800369a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	b2da      	uxtb	r2, r3
 8003694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003696:	701a      	strb	r2, [r3, #0]
 8003698:	e008      	b.n	80036ac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036aa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29b      	uxth	r3, r3
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	4619      	mov	r1, r3
 80036c4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d15d      	bne.n	8003786 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0220 	bic.w	r2, r2, #32
 80036d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695a      	ldr	r2, [r3, #20]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0201 	bic.w	r2, r2, #1
 80036f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370c:	2b01      	cmp	r3, #1
 800370e:	d135      	bne.n	800377c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	330c      	adds	r3, #12
 800371c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	e853 3f00 	ldrex	r3, [r3]
 8003724:	613b      	str	r3, [r7, #16]
   return(result);
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f023 0310 	bic.w	r3, r3, #16
 800372c:	627b      	str	r3, [r7, #36]	@ 0x24
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	330c      	adds	r3, #12
 8003734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003736:	623a      	str	r2, [r7, #32]
 8003738:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373a:	69f9      	ldr	r1, [r7, #28]
 800373c:	6a3a      	ldr	r2, [r7, #32]
 800373e:	e841 2300 	strex	r3, r2, [r1]
 8003742:	61bb      	str	r3, [r7, #24]
   return(result);
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1e5      	bne.n	8003716 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0310 	and.w	r3, r3, #16
 8003754:	2b10      	cmp	r3, #16
 8003756:	d10a      	bne.n	800376e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003772:	4619      	mov	r1, r3
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff fdd1 	bl	800331c <HAL_UARTEx_RxEventCallback>
 800377a:	e002      	b.n	8003782 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7fd f995 	bl	8000aac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	e002      	b.n	800378c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	e000      	b.n	800378c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800378a:	2302      	movs	r3, #2
  }
}
 800378c:	4618      	mov	r0, r3
 800378e:	3730      	adds	r7, #48	@ 0x30
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003798:	b0c0      	sub	sp, #256	@ 0x100
 800379a:	af00      	add	r7, sp, #0
 800379c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80037ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b0:	68d9      	ldr	r1, [r3, #12]
 80037b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	ea40 0301 	orr.w	r3, r0, r1
 80037bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	431a      	orrs	r2, r3
 80037cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	431a      	orrs	r2, r3
 80037d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80037ec:	f021 010c 	bic.w	r1, r1, #12
 80037f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80037fa:	430b      	orrs	r3, r1
 80037fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800380a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380e:	6999      	ldr	r1, [r3, #24]
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	ea40 0301 	orr.w	r3, r0, r1
 800381a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800381c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	4b8f      	ldr	r3, [pc, #572]	@ (8003a60 <UART_SetConfig+0x2cc>)
 8003824:	429a      	cmp	r2, r3
 8003826:	d005      	beq.n	8003834 <UART_SetConfig+0xa0>
 8003828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4b8d      	ldr	r3, [pc, #564]	@ (8003a64 <UART_SetConfig+0x2d0>)
 8003830:	429a      	cmp	r2, r3
 8003832:	d104      	bne.n	800383e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003834:	f7fe f976 	bl	8001b24 <HAL_RCC_GetPCLK2Freq>
 8003838:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800383c:	e003      	b.n	8003846 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800383e:	f7fe f95d 	bl	8001afc <HAL_RCC_GetPCLK1Freq>
 8003842:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003850:	f040 810c 	bne.w	8003a6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003858:	2200      	movs	r2, #0
 800385a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800385e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003862:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003866:	4622      	mov	r2, r4
 8003868:	462b      	mov	r3, r5
 800386a:	1891      	adds	r1, r2, r2
 800386c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800386e:	415b      	adcs	r3, r3
 8003870:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003872:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003876:	4621      	mov	r1, r4
 8003878:	eb12 0801 	adds.w	r8, r2, r1
 800387c:	4629      	mov	r1, r5
 800387e:	eb43 0901 	adc.w	r9, r3, r1
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800388e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003892:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003896:	4690      	mov	r8, r2
 8003898:	4699      	mov	r9, r3
 800389a:	4623      	mov	r3, r4
 800389c:	eb18 0303 	adds.w	r3, r8, r3
 80038a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038a4:	462b      	mov	r3, r5
 80038a6:	eb49 0303 	adc.w	r3, r9, r3
 80038aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80038be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038c2:	460b      	mov	r3, r1
 80038c4:	18db      	adds	r3, r3, r3
 80038c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80038c8:	4613      	mov	r3, r2
 80038ca:	eb42 0303 	adc.w	r3, r2, r3
 80038ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80038d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80038d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80038d8:	f7fc fc9c 	bl	8000214 <__aeabi_uldivmod>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4b61      	ldr	r3, [pc, #388]	@ (8003a68 <UART_SetConfig+0x2d4>)
 80038e2:	fba3 2302 	umull	r2, r3, r3, r2
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	011c      	lsls	r4, r3, #4
 80038ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038ee:	2200      	movs	r2, #0
 80038f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80038f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80038fc:	4642      	mov	r2, r8
 80038fe:	464b      	mov	r3, r9
 8003900:	1891      	adds	r1, r2, r2
 8003902:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003904:	415b      	adcs	r3, r3
 8003906:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003908:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800390c:	4641      	mov	r1, r8
 800390e:	eb12 0a01 	adds.w	sl, r2, r1
 8003912:	4649      	mov	r1, r9
 8003914:	eb43 0b01 	adc.w	fp, r3, r1
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003924:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003928:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800392c:	4692      	mov	sl, r2
 800392e:	469b      	mov	fp, r3
 8003930:	4643      	mov	r3, r8
 8003932:	eb1a 0303 	adds.w	r3, sl, r3
 8003936:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800393a:	464b      	mov	r3, r9
 800393c:	eb4b 0303 	adc.w	r3, fp, r3
 8003940:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003950:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003954:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003958:	460b      	mov	r3, r1
 800395a:	18db      	adds	r3, r3, r3
 800395c:	643b      	str	r3, [r7, #64]	@ 0x40
 800395e:	4613      	mov	r3, r2
 8003960:	eb42 0303 	adc.w	r3, r2, r3
 8003964:	647b      	str	r3, [r7, #68]	@ 0x44
 8003966:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800396a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800396e:	f7fc fc51 	bl	8000214 <__aeabi_uldivmod>
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	4611      	mov	r1, r2
 8003978:	4b3b      	ldr	r3, [pc, #236]	@ (8003a68 <UART_SetConfig+0x2d4>)
 800397a:	fba3 2301 	umull	r2, r3, r3, r1
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	2264      	movs	r2, #100	@ 0x64
 8003982:	fb02 f303 	mul.w	r3, r2, r3
 8003986:	1acb      	subs	r3, r1, r3
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800398e:	4b36      	ldr	r3, [pc, #216]	@ (8003a68 <UART_SetConfig+0x2d4>)
 8003990:	fba3 2302 	umull	r2, r3, r3, r2
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800399c:	441c      	add	r4, r3
 800399e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80039ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80039b0:	4642      	mov	r2, r8
 80039b2:	464b      	mov	r3, r9
 80039b4:	1891      	adds	r1, r2, r2
 80039b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039b8:	415b      	adcs	r3, r3
 80039ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80039c0:	4641      	mov	r1, r8
 80039c2:	1851      	adds	r1, r2, r1
 80039c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80039c6:	4649      	mov	r1, r9
 80039c8:	414b      	adcs	r3, r1
 80039ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80039d8:	4659      	mov	r1, fp
 80039da:	00cb      	lsls	r3, r1, #3
 80039dc:	4651      	mov	r1, sl
 80039de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039e2:	4651      	mov	r1, sl
 80039e4:	00ca      	lsls	r2, r1, #3
 80039e6:	4610      	mov	r0, r2
 80039e8:	4619      	mov	r1, r3
 80039ea:	4603      	mov	r3, r0
 80039ec:	4642      	mov	r2, r8
 80039ee:	189b      	adds	r3, r3, r2
 80039f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039f4:	464b      	mov	r3, r9
 80039f6:	460a      	mov	r2, r1
 80039f8:	eb42 0303 	adc.w	r3, r2, r3
 80039fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a14:	460b      	mov	r3, r1
 8003a16:	18db      	adds	r3, r3, r3
 8003a18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	eb42 0303 	adc.w	r3, r2, r3
 8003a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a2a:	f7fc fbf3 	bl	8000214 <__aeabi_uldivmod>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	4b0d      	ldr	r3, [pc, #52]	@ (8003a68 <UART_SetConfig+0x2d4>)
 8003a34:	fba3 1302 	umull	r1, r3, r3, r2
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	2164      	movs	r1, #100	@ 0x64
 8003a3c:	fb01 f303 	mul.w	r3, r1, r3
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	3332      	adds	r3, #50	@ 0x32
 8003a46:	4a08      	ldr	r2, [pc, #32]	@ (8003a68 <UART_SetConfig+0x2d4>)
 8003a48:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4c:	095b      	lsrs	r3, r3, #5
 8003a4e:	f003 0207 	and.w	r2, r3, #7
 8003a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4422      	add	r2, r4
 8003a5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a5c:	e106      	b.n	8003c6c <UART_SetConfig+0x4d8>
 8003a5e:	bf00      	nop
 8003a60:	40011000 	.word	0x40011000
 8003a64:	40011400 	.word	0x40011400
 8003a68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a70:	2200      	movs	r2, #0
 8003a72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a76:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a7e:	4642      	mov	r2, r8
 8003a80:	464b      	mov	r3, r9
 8003a82:	1891      	adds	r1, r2, r2
 8003a84:	6239      	str	r1, [r7, #32]
 8003a86:	415b      	adcs	r3, r3
 8003a88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a8e:	4641      	mov	r1, r8
 8003a90:	1854      	adds	r4, r2, r1
 8003a92:	4649      	mov	r1, r9
 8003a94:	eb43 0501 	adc.w	r5, r3, r1
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	f04f 0300 	mov.w	r3, #0
 8003aa0:	00eb      	lsls	r3, r5, #3
 8003aa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aa6:	00e2      	lsls	r2, r4, #3
 8003aa8:	4614      	mov	r4, r2
 8003aaa:	461d      	mov	r5, r3
 8003aac:	4643      	mov	r3, r8
 8003aae:	18e3      	adds	r3, r4, r3
 8003ab0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ab4:	464b      	mov	r3, r9
 8003ab6:	eb45 0303 	adc.w	r3, r5, r3
 8003aba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003aca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ada:	4629      	mov	r1, r5
 8003adc:	008b      	lsls	r3, r1, #2
 8003ade:	4621      	mov	r1, r4
 8003ae0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	008a      	lsls	r2, r1, #2
 8003ae8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003aec:	f7fc fb92 	bl	8000214 <__aeabi_uldivmod>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4b60      	ldr	r3, [pc, #384]	@ (8003c78 <UART_SetConfig+0x4e4>)
 8003af6:	fba3 2302 	umull	r2, r3, r3, r2
 8003afa:	095b      	lsrs	r3, r3, #5
 8003afc:	011c      	lsls	r4, r3, #4
 8003afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b02:	2200      	movs	r2, #0
 8003b04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b10:	4642      	mov	r2, r8
 8003b12:	464b      	mov	r3, r9
 8003b14:	1891      	adds	r1, r2, r2
 8003b16:	61b9      	str	r1, [r7, #24]
 8003b18:	415b      	adcs	r3, r3
 8003b1a:	61fb      	str	r3, [r7, #28]
 8003b1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b20:	4641      	mov	r1, r8
 8003b22:	1851      	adds	r1, r2, r1
 8003b24:	6139      	str	r1, [r7, #16]
 8003b26:	4649      	mov	r1, r9
 8003b28:	414b      	adcs	r3, r1
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b38:	4659      	mov	r1, fp
 8003b3a:	00cb      	lsls	r3, r1, #3
 8003b3c:	4651      	mov	r1, sl
 8003b3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b42:	4651      	mov	r1, sl
 8003b44:	00ca      	lsls	r2, r1, #3
 8003b46:	4610      	mov	r0, r2
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	4642      	mov	r2, r8
 8003b4e:	189b      	adds	r3, r3, r2
 8003b50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b54:	464b      	mov	r3, r9
 8003b56:	460a      	mov	r2, r1
 8003b58:	eb42 0303 	adc.w	r3, r2, r3
 8003b5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b78:	4649      	mov	r1, r9
 8003b7a:	008b      	lsls	r3, r1, #2
 8003b7c:	4641      	mov	r1, r8
 8003b7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b82:	4641      	mov	r1, r8
 8003b84:	008a      	lsls	r2, r1, #2
 8003b86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b8a:	f7fc fb43 	bl	8000214 <__aeabi_uldivmod>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4611      	mov	r1, r2
 8003b94:	4b38      	ldr	r3, [pc, #224]	@ (8003c78 <UART_SetConfig+0x4e4>)
 8003b96:	fba3 2301 	umull	r2, r3, r3, r1
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	2264      	movs	r2, #100	@ 0x64
 8003b9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ba2:	1acb      	subs	r3, r1, r3
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	3332      	adds	r3, #50	@ 0x32
 8003ba8:	4a33      	ldr	r2, [pc, #204]	@ (8003c78 <UART_SetConfig+0x4e4>)
 8003baa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bb4:	441c      	add	r4, r3
 8003bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bba:	2200      	movs	r2, #0
 8003bbc:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bbe:	677a      	str	r2, [r7, #116]	@ 0x74
 8003bc0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003bc4:	4642      	mov	r2, r8
 8003bc6:	464b      	mov	r3, r9
 8003bc8:	1891      	adds	r1, r2, r2
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	415b      	adcs	r3, r3
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bd4:	4641      	mov	r1, r8
 8003bd6:	1851      	adds	r1, r2, r1
 8003bd8:	6039      	str	r1, [r7, #0]
 8003bda:	4649      	mov	r1, r9
 8003bdc:	414b      	adcs	r3, r1
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bec:	4659      	mov	r1, fp
 8003bee:	00cb      	lsls	r3, r1, #3
 8003bf0:	4651      	mov	r1, sl
 8003bf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bf6:	4651      	mov	r1, sl
 8003bf8:	00ca      	lsls	r2, r1, #3
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4603      	mov	r3, r0
 8003c00:	4642      	mov	r2, r8
 8003c02:	189b      	adds	r3, r3, r2
 8003c04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c06:	464b      	mov	r3, r9
 8003c08:	460a      	mov	r2, r1
 8003c0a:	eb42 0303 	adc.w	r3, r2, r3
 8003c0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c1a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c28:	4649      	mov	r1, r9
 8003c2a:	008b      	lsls	r3, r1, #2
 8003c2c:	4641      	mov	r1, r8
 8003c2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c32:	4641      	mov	r1, r8
 8003c34:	008a      	lsls	r2, r1, #2
 8003c36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c3a:	f7fc faeb 	bl	8000214 <__aeabi_uldivmod>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	4b0d      	ldr	r3, [pc, #52]	@ (8003c78 <UART_SetConfig+0x4e4>)
 8003c44:	fba3 1302 	umull	r1, r3, r3, r2
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	2164      	movs	r1, #100	@ 0x64
 8003c4c:	fb01 f303 	mul.w	r3, r1, r3
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	3332      	adds	r3, #50	@ 0x32
 8003c56:	4a08      	ldr	r2, [pc, #32]	@ (8003c78 <UART_SetConfig+0x4e4>)
 8003c58:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	f003 020f 	and.w	r2, r3, #15
 8003c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4422      	add	r2, r4
 8003c6a:	609a      	str	r2, [r3, #8]
}
 8003c6c:	bf00      	nop
 8003c6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c72:	46bd      	mov	sp, r7
 8003c74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c78:	51eb851f 	.word	0x51eb851f

08003c7c <textualProtocolInit>:
		"blinkpatt"
};

// ======== Init =========== //
void textualProtocolInit(TextualProtocol *textualProtocol, uint8_t starterChar, uint8_t delimeter, UART_HandleTypeDef huart)
{
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b082      	sub	sp, #8
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	70fb      	strb	r3, [r7, #3]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	70bb      	strb	r3, [r7, #2]
	textualProtocol->starterChar = starterChar;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	78fa      	ldrb	r2, [r7, #3]
 8003c94:	701a      	strb	r2, [r3, #0]
	textualProtocol->delimiter = delimeter;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	78ba      	ldrb	r2, [r7, #2]
 8003c9a:	705a      	strb	r2, [r3, #1]
	textualProtocol->enableEcho = TRUE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	71da      	strb	r2, [r3, #7]
	textualProtocol->huart = huart;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8003ca8:	f107 0114 	add.w	r1, r7, #20
 8003cac:	2248      	movs	r2, #72	@ 0x48
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fbea 	bl	8004488 <memcpy>

	textualProtocolClear(textualProtocol, CLEAR_ALL);
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f85a 	bl	8003d70 <textualProtocolClear>
}
 8003cbc:	bf00      	nop
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cc6:	b002      	add	sp, #8
 8003cc8:	4770      	bx	lr

08003cca <textualProtocolAppendByte>:

void textualProtocolAppendByte(TextualProtocol *textualProtocol, uint8_t receivedByte)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	70fb      	strb	r3, [r7, #3]
	if ((receivedByte == CHAR_CR) || (receivedByte == CHAR_LF))
 8003cd6:	78fb      	ldrb	r3, [r7, #3]
 8003cd8:	2b0d      	cmp	r3, #13
 8003cda:	d002      	beq.n	8003ce2 <textualProtocolAppendByte+0x18>
 8003cdc:	78fb      	ldrb	r3, [r7, #3]
 8003cde:	2b0a      	cmp	r3, #10
 8003ce0:	d117      	bne.n	8003d12 <textualProtocolAppendByte+0x48>
	{
		if (textualProtocol->length >= QTY_MIN_RX_DATA_BYTES)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	791b      	ldrb	r3, [r3, #4]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d90a      	bls.n	8003d00 <textualProtocolAppendByte+0x36>
		{
			if (textualProtocol->enableEcho == TRUE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	79db      	ldrb	r3, [r3, #7]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d102      	bne.n	8003cf8 <textualProtocolAppendByte+0x2e>
			{
				textualProtocolSendNewLine(textualProtocol);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f966 	bl	8003fc4 <textualProtocolSendNewLine>
			}
			textualProtocol->enableExtractData = TRUE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	719a      	strb	r2, [r3, #6]
		if (textualProtocol->length >= QTY_MIN_RX_DATA_BYTES)
 8003cfe:	e033      	b.n	8003d68 <textualProtocolAppendByte+0x9e>
		}
		else
		{
			textualProtocolClear(textualProtocol, CLEAR_ALL);
 8003d00:	2101      	movs	r1, #1
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f834 	bl	8003d70 <textualProtocolClear>
			textualProtocolSendStatusMessage(textualProtocol, STATUS_MESSAGE_SYNTAX_ERROR);
 8003d08:	21ab      	movs	r1, #171	@ 0xab
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f90e 	bl	8003f2c <textualProtocolSendStatusMessage>
		if (textualProtocol->length >= QTY_MIN_RX_DATA_BYTES)
 8003d10:	e02a      	b.n	8003d68 <textualProtocolAppendByte+0x9e>
		}
	}
	else if ((receivedByte >= ' ') && (receivedByte <= 'z') && (textualProtocol->enableExtractData == FALSE))
 8003d12:	78fb      	ldrb	r3, [r7, #3]
 8003d14:	2b1f      	cmp	r3, #31
 8003d16:	d927      	bls.n	8003d68 <textualProtocolAppendByte+0x9e>
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	2b7a      	cmp	r3, #122	@ 0x7a
 8003d1c:	d824      	bhi.n	8003d68 <textualProtocolAppendByte+0x9e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	799b      	ldrb	r3, [r3, #6]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d120      	bne.n	8003d68 <textualProtocolAppendByte+0x9e>
	{
		if (textualProtocol->byteIndex < QTY_MAX_RX_DATA_BYTES)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	795b      	ldrb	r3, [r3, #5]
 8003d2a:	2bea      	cmp	r3, #234	@ 0xea
 8003d2c:	d813      	bhi.n	8003d56 <textualProtocolAppendByte+0x8c>
		{
			textualProtocol->dataPacket[textualProtocol->byteIndex] = receivedByte;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	795b      	ldrb	r3, [r3, #5]
 8003d32:	461a      	mov	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4413      	add	r3, r2
 8003d38:	78fa      	ldrb	r2, [r7, #3]
 8003d3a:	729a      	strb	r2, [r3, #10]
			textualProtocol->byteIndex++;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	795b      	ldrb	r3, [r3, #5]
 8003d40:	3301      	adds	r3, #1
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	715a      	strb	r2, [r3, #5]
			textualProtocol->length++;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	791b      	ldrb	r3, [r3, #4]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	711a      	strb	r2, [r3, #4]
		{
			textualProtocolClear(textualProtocol, CLEAR_ALL);
			textualProtocolSendStatusMessage(textualProtocol, STATUS_MESSAGE_SYNTAX_ERROR);
		}
	}
}
 8003d54:	e008      	b.n	8003d68 <textualProtocolAppendByte+0x9e>
			textualProtocolClear(textualProtocol, CLEAR_ALL);
 8003d56:	2101      	movs	r1, #1
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f809 	bl	8003d70 <textualProtocolClear>
			textualProtocolSendStatusMessage(textualProtocol, STATUS_MESSAGE_SYNTAX_ERROR);
 8003d5e:	21ab      	movs	r1, #171	@ 0xab
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f8e3 	bl	8003f2c <textualProtocolSendStatusMessage>
}
 8003d66:	e7ff      	b.n	8003d68 <textualProtocolAppendByte+0x9e>
 8003d68:	bf00      	nop
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <textualProtocolClear>:

void textualProtocolClear(TextualProtocol *textualProtocol, TextualProtocolClear clear)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	73fb      	strb	r3, [r7, #15]

	switch (clear)
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	2b06      	cmp	r3, #6
 8003d86:	f200 80cc 	bhi.w	8003f22 <textualProtocolClear+0x1b2>
 8003d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d90 <textualProtocolClear+0x20>)
 8003d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d90:	08003dad 	.word	0x08003dad
 8003d94:	08003e49 	.word	0x08003e49
 8003d98:	08003e7d 	.word	0x08003e7d
 8003d9c:	08003e99 	.word	0x08003e99
 8003da0:	08003eb1 	.word	0x08003eb1
 8003da4:	08003edd 	.word	0x08003edd
 8003da8:	08003f15 	.word	0x08003f15
	{
		case CLEAR_ALL:
			textualProtocol->length = 0;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	711a      	strb	r2, [r3, #4]
			textualProtocol->byteIndex = 0;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	715a      	strb	r2, [r3, #5]
			textualProtocol->qtyOfDelimiters = 0;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	725a      	strb	r2, [r3, #9]
			textualProtocol->enableExtractData = FALSE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	719a      	strb	r2, [r3, #6]
			textualProtocol->textualProtocolRxStatus = INVALID_RX_TEXTUAL_PROTOCOL;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 21dc 	strb.w	r2, [r3, #476]	@ 0x1dc
			textualProtocol->textualProtocolRxCommandStatus = INVALID_RX_COMMAND;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 21dd 	strb.w	r2, [r3, #477]	@ 0x1dd
			textualProtocol->commandLength = 0;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	709a      	strb	r2, [r3, #2]
			textualProtocol->commandCode = CMD_RX_COMMAND_UNKNOWN;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	70da      	strb	r2, [r3, #3]
			textualProtocol->enableDecodeExtractedCommand = FALSE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	721a      	strb	r2, [r3, #8]
			memset(textualProtocol->dataPacket, 0x00, QTY_MAX_RX_DATA_BYTES);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	330a      	adds	r3, #10
 8003dea:	22eb      	movs	r2, #235	@ 0xeb
 8003dec:	2100      	movs	r1, #0
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 fb18 	bl	8004424 <memset>
			memset(textualProtocol->indexesOfDelimiters, 0x00, QTY_MAX_OF_DELIMITERS);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f203 13c7 	addw	r3, r3, #455	@ 0x1c7
 8003dfa:	220a      	movs	r2, #10
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fb10 	bl	8004424 <memset>
			memset(textualProtocol->command, 0x00, QTY_MAX_OF_BYTES_IN_COMMAND);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f203 13d1 	addw	r3, r3, #465	@ 0x1d1
 8003e0a:	220b      	movs	r2, #11
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fb08 	bl	8004424 <memset>

			for (i = 0; i < QTY_MAX_OF_VALUES; i++)
 8003e14:	2300      	movs	r3, #0
 8003e16:	73fb      	strb	r3, [r7, #15]
 8003e18:	e012      	b.n	8003e40 <textualProtocolClear+0xd0>
			{
				memset(textualProtocol->values[i], 0x00, QTY_MAX_OF_BYTES_PER_VALUE);
 8003e1a:	7bfa      	ldrb	r2, [r7, #15]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	4413      	add	r3, r2
 8003e22:	00da      	lsls	r2, r3, #3
 8003e24:	1ad2      	subs	r2, r2, r3
 8003e26:	f102 03f0 	add.w	r3, r2, #240	@ 0xf0
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	3305      	adds	r3, #5
 8003e30:	2215      	movs	r2, #21
 8003e32:	2100      	movs	r1, #0
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 faf5 	bl	8004424 <memset>
			for (i = 0; i < QTY_MAX_OF_VALUES; i++)
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	73fb      	strb	r3, [r7, #15]
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	2b09      	cmp	r3, #9
 8003e44:	d9e9      	bls.n	8003e1a <textualProtocolClear+0xaa>
			}

			break;
 8003e46:	e06d      	b.n	8003f24 <textualProtocolClear+0x1b4>

		case CLEAR_VALUES:
			for (i = 0; i < QTY_MAX_OF_VALUES; i++)
 8003e48:	2300      	movs	r3, #0
 8003e4a:	73fb      	strb	r3, [r7, #15]
 8003e4c:	e012      	b.n	8003e74 <textualProtocolClear+0x104>
			{
				memset(textualProtocol->values[i], 0x00, QTY_MAX_OF_BYTES_PER_VALUE);
 8003e4e:	7bfa      	ldrb	r2, [r7, #15]
 8003e50:	4613      	mov	r3, r2
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	4413      	add	r3, r2
 8003e56:	00da      	lsls	r2, r3, #3
 8003e58:	1ad2      	subs	r2, r2, r3
 8003e5a:	f102 03f0 	add.w	r3, r2, #240	@ 0xf0
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	4413      	add	r3, r2
 8003e62:	3305      	adds	r3, #5
 8003e64:	2215      	movs	r2, #21
 8003e66:	2100      	movs	r1, #0
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 fadb 	bl	8004424 <memset>
			for (i = 0; i < QTY_MAX_OF_VALUES; i++)
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
 8003e70:	3301      	adds	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
 8003e76:	2b09      	cmp	r3, #9
 8003e78:	d9e9      	bls.n	8003e4e <textualProtocolClear+0xde>
			}
			break;
 8003e7a:	e053      	b.n	8003f24 <textualProtocolClear+0x1b4>

		case CLEAR_DATA_PACKET:
			textualProtocol->length = 0;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	711a      	strb	r2, [r3, #4]
			textualProtocol->byteIndex = 0;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	715a      	strb	r2, [r3, #5]
			memset(textualProtocol->dataPacket, 0x00, QTY_MAX_RX_DATA_BYTES);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	330a      	adds	r3, #10
 8003e8c:	22eb      	movs	r2, #235	@ 0xeb
 8003e8e:	2100      	movs	r1, #0
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fac7 	bl	8004424 <memset>
			break;
 8003e96:	e045      	b.n	8003f24 <textualProtocolClear+0x1b4>

		case CLEAR_INDEXES_OF_DELIMITERS:
			textualProtocol->qtyOfDelimiters = 0;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	725a      	strb	r2, [r3, #9]
			memset(textualProtocol->indexesOfDelimiters, 0x00, QTY_MAX_OF_DELIMITERS);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f203 13c7 	addw	r3, r3, #455	@ 0x1c7
 8003ea4:	220a      	movs	r2, #10
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fabb 	bl	8004424 <memset>
			break;
 8003eae:	e039      	b.n	8003f24 <textualProtocolClear+0x1b4>

		case CLEAR_COMMAND:
			textualProtocol->textualProtocolRxCommandStatus = INVALID_RX_COMMAND;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 21dd 	strb.w	r2, [r3, #477]	@ 0x1dd
			textualProtocol->commandLength = 0;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	709a      	strb	r2, [r3, #2]
			textualProtocol->commandCode = CMD_RX_COMMAND_UNKNOWN;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	70da      	strb	r2, [r3, #3]
			textualProtocol->enableDecodeExtractedCommand = FALSE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	721a      	strb	r2, [r3, #8]
			memset(textualProtocol->command, 0x00, QTY_MAX_OF_BYTES_IN_COMMAND);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f203 13d1 	addw	r3, r3, #465	@ 0x1d1
 8003ed0:	220b      	movs	r2, #11
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 faa5 	bl	8004424 <memset>
			break;
 8003eda:	e023      	b.n	8003f24 <textualProtocolClear+0x1b4>

		case CLEAR_AFTER_EXTRACT_DATA:
			textualProtocol->length = 0;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	711a      	strb	r2, [r3, #4]
			textualProtocol->byteIndex = 0;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	715a      	strb	r2, [r3, #5]
			textualProtocol->qtyOfDelimiters = 0;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	725a      	strb	r2, [r3, #9]
			textualProtocol->enableExtractData = FALSE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	719a      	strb	r2, [r3, #6]
			memset(textualProtocol->dataPacket, 0x00, QTY_MAX_RX_DATA_BYTES);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	330a      	adds	r3, #10
 8003ef8:	22eb      	movs	r2, #235	@ 0xeb
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 fa91 	bl	8004424 <memset>
			memset(textualProtocol->indexesOfDelimiters, 0x00, QTY_MAX_OF_DELIMITERS);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f203 13c7 	addw	r3, r3, #455	@ 0x1c7
 8003f08:	220a      	movs	r2, #10
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fa89 	bl	8004424 <memset>
			break;
 8003f12:	e007      	b.n	8003f24 <textualProtocolClear+0x1b4>

		case CLEAR_AFTER_DECODE_EXTRACTED_COMMAND:
			textualProtocol->commandLength = 0;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	709a      	strb	r2, [r3, #2]
			textualProtocol->enableDecodeExtractedCommand = FALSE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	721a      	strb	r2, [r3, #8]
			break;
 8003f20:	e000      	b.n	8003f24 <textualProtocolClear+0x1b4>

		default:
			break;
 8003f22:	bf00      	nop
	}
}
 8003f24:	bf00      	nop
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <textualProtocolSendStatusMessage>:

void textualProtocolSendStatusMessage(TextualProtocol *textualProtocol, TextualProtocolStatusMessages statusMessage)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	460b      	mov	r3, r1
 8003f36:	70fb      	strb	r3, [r7, #3]
	switch (statusMessage)
 8003f38:	78fb      	ldrb	r3, [r7, #3]
 8003f3a:	3baa      	subs	r3, #170	@ 0xaa
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d833      	bhi.n	8003fa8 <textualProtocolSendStatusMessage+0x7c>
 8003f40:	a201      	add	r2, pc, #4	@ (adr r2, 8003f48 <textualProtocolSendStatusMessage+0x1c>)
 8003f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f46:	bf00      	nop
 8003f48:	08003f59 	.word	0x08003f59
 8003f4c:	08003f6d 	.word	0x08003f6d
 8003f50:	08003f81 	.word	0x08003f81
 8003f54:	08003f95 	.word	0x08003f95
	{
		case STATUS_MESSAGE_OK:
			HAL_UART_Transmit(&textualProtocol->huart, (uint8_t *) "OK\r\n", 4, HAL_MAX_DELAY);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f503 70f0 	add.w	r0, r3, #480	@ 0x1e0
 8003f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f62:	2204      	movs	r2, #4
 8003f64:	4913      	ldr	r1, [pc, #76]	@ (8003fb4 <textualProtocolSendStatusMessage+0x88>)
 8003f66:	f7fe fe83 	bl	8002c70 <HAL_UART_Transmit>
			break;
 8003f6a:	e01e      	b.n	8003faa <textualProtocolSendStatusMessage+0x7e>

		case STATUS_MESSAGE_SYNTAX_ERROR:
			HAL_UART_Transmit(&textualProtocol->huart, (uint8_t *) "Syntax Error\r\n", 14, HAL_MAX_DELAY);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f503 70f0 	add.w	r0, r3, #480	@ 0x1e0
 8003f72:	f04f 33ff 	mov.w	r3, #4294967295
 8003f76:	220e      	movs	r2, #14
 8003f78:	490f      	ldr	r1, [pc, #60]	@ (8003fb8 <textualProtocolSendStatusMessage+0x8c>)
 8003f7a:	f7fe fe79 	bl	8002c70 <HAL_UART_Transmit>
			break;
 8003f7e:	e014      	b.n	8003faa <textualProtocolSendStatusMessage+0x7e>

		case STATUS_MESSAGE_UNKNOWN_COMMAND:
			HAL_UART_Transmit(&textualProtocol->huart, (uint8_t *) "Unknown Command\r\n", 17, HAL_MAX_DELAY);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f503 70f0 	add.w	r0, r3, #480	@ 0x1e0
 8003f86:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8a:	2211      	movs	r2, #17
 8003f8c:	490b      	ldr	r1, [pc, #44]	@ (8003fbc <textualProtocolSendStatusMessage+0x90>)
 8003f8e:	f7fe fe6f 	bl	8002c70 <HAL_UART_Transmit>
			break;
 8003f92:	e00a      	b.n	8003faa <textualProtocolSendStatusMessage+0x7e>

		case STATUS_MESSAGE_VALUE_ERROR:
			HAL_UART_Transmit(&textualProtocol->huart, (uint8_t *) "Value Error\r\n", 13, HAL_MAX_DELAY);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f503 70f0 	add.w	r0, r3, #480	@ 0x1e0
 8003f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f9e:	220d      	movs	r2, #13
 8003fa0:	4907      	ldr	r1, [pc, #28]	@ (8003fc0 <textualProtocolSendStatusMessage+0x94>)
 8003fa2:	f7fe fe65 	bl	8002c70 <HAL_UART_Transmit>
			break;
 8003fa6:	e000      	b.n	8003faa <textualProtocolSendStatusMessage+0x7e>

		default:
			break;
 8003fa8:	bf00      	nop
	}
}
 8003faa:	bf00      	nop
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	080044bc 	.word	0x080044bc
 8003fb8:	080044c4 	.word	0x080044c4
 8003fbc:	080044d4 	.word	0x080044d4
 8003fc0:	080044e8 	.word	0x080044e8

08003fc4 <textualProtocolSendNewLine>:

void textualProtocolSendNewLine(TextualProtocol *textualProtocol)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&textualProtocol->huart, (uint8_t *) "\r\n", 2, HAL_MAX_DELAY);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f503 70f0 	add.w	r0, r3, #480	@ 0x1e0
 8003fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	4903      	ldr	r1, [pc, #12]	@ (8003fe8 <textualProtocolSendNewLine+0x24>)
 8003fda:	f7fe fe49 	bl	8002c70 <HAL_UART_Transmit>
}
 8003fde:	bf00      	nop
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	080044f8 	.word	0x080044f8

08003fec <textualProtocolExtractData>:

void textualProtocolExtractData(TextualProtocol *textualProtocol)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
	if (textualProtocol->enableExtractData == TRUE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	799b      	ldrb	r3, [r3, #6]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d122      	bne.n	8004042 <textualProtocolExtractData+0x56>
	{
		textualProtocol->enableExtractData = FALSE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	719a      	strb	r2, [r3, #6]
		if (textualProtocol->dataPacket[0] != textualProtocol->starterChar)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	7a9a      	ldrb	r2, [r3, #10]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d008      	beq.n	8004020 <textualProtocolExtractData+0x34>
		{
			textualProtocolSendStatusMessage(textualProtocol, STATUS_MESSAGE_SYNTAX_ERROR);
 800400e:	21ab      	movs	r1, #171	@ 0xab
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff ff8b 	bl	8003f2c <textualProtocolSendStatusMessage>
			textualProtocolClear(textualProtocol, CLEAR_ALL);
 8004016:	2101      	movs	r1, #1
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff fea9 	bl	8003d70 <textualProtocolClear>
			return;
 800401e:	e010      	b.n	8004042 <textualProtocolExtractData+0x56>
		}

		textualProtocolExtractCommand(textualProtocol);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f811 	bl	8004048 <textualProtocolExtractCommand>
		textualProtocolFindDelimiters(textualProtocol);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f8ca 	bl	80041c0 <textualProtocolFindDelimiters>

		if (textualProtocol->qtyOfDelimiters > 0)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	7a5b      	ldrb	r3, [r3, #9]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <textualProtocolExtractData+0x4e>
		{
			textualProtocolExtractValues(textualProtocol);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f8f5 	bl	8004224 <textualProtocolExtractValues>
		}

		textualProtocolClear(textualProtocol, CLEAR_AFTER_EXTRACT_DATA);
 800403a:	2106      	movs	r1, #6
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7ff fe97 	bl	8003d70 <textualProtocolClear>
	}
}
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <textualProtocolExtractCommand>:

void textualProtocolExtractCommand(TextualProtocol *textualProtocol)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
	uint8_t i = 1;
 8004050:	2301      	movs	r3, #1
 8004052:	73fb      	strb	r3, [r7, #15]

	if (((textualProtocol->dataPacket[1] >= 'A') && (textualProtocol->dataPacket[1] <= 'Z'))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	7adb      	ldrb	r3, [r3, #11]
 8004058:	2b40      	cmp	r3, #64	@ 0x40
 800405a:	d903      	bls.n	8004064 <textualProtocolExtractCommand+0x1c>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	7adb      	ldrb	r3, [r3, #11]
 8004060:	2b5a      	cmp	r3, #90	@ 0x5a
 8004062:	d907      	bls.n	8004074 <textualProtocolExtractCommand+0x2c>
		||
		((textualProtocol->dataPacket[1] >= 'a') && (textualProtocol->dataPacket[1] <= 'z')))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	7adb      	ldrb	r3, [r3, #11]
		||
 8004068:	2b60      	cmp	r3, #96	@ 0x60
 800406a:	d934      	bls.n	80040d6 <textualProtocolExtractCommand+0x8e>
		((textualProtocol->dataPacket[1] >= 'a') && (textualProtocol->dataPacket[1] <= 'z')))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	7adb      	ldrb	r3, [r3, #11]
 8004070:	2b7a      	cmp	r3, #122	@ 0x7a
 8004072:	d830      	bhi.n	80040d6 <textualProtocolExtractCommand+0x8e>
	{
		textualProtocol->enableDecodeExtractedCommand = TRUE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	721a      	strb	r2, [r3, #8]
		while (textualProtocol->commandLength < (QTY_MAX_OF_BYTES_IN_COMMAND - 1))
 800407a:	e027      	b.n	80040cc <textualProtocolExtractCommand+0x84>
		{
			if (textualProtocol->dataPacket[i] == textualProtocol->delimiter)
 800407c:	7bfb      	ldrb	r3, [r7, #15]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	4413      	add	r3, r2
 8004082:	7a9a      	ldrb	r2, [r3, #10]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	785b      	ldrb	r3, [r3, #1]
 8004088:	429a      	cmp	r2, r3
 800408a:	d02d      	beq.n	80040e8 <textualProtocolExtractCommand+0xa0>
			{
				return;
			}
			else if ((textualProtocol->dataPacket[i] >= ' ') && (textualProtocol->dataPacket[i] <= '}'))
 800408c:	7bfb      	ldrb	r3, [r7, #15]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	4413      	add	r3, r2
 8004092:	7a9b      	ldrb	r3, [r3, #10]
 8004094:	2b1f      	cmp	r3, #31
 8004096:	d929      	bls.n	80040ec <textualProtocolExtractCommand+0xa4>
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	4413      	add	r3, r2
 800409e:	7a9b      	ldrb	r3, [r3, #10]
 80040a0:	2b7d      	cmp	r3, #125	@ 0x7d
 80040a2:	d823      	bhi.n	80040ec <textualProtocolExtractCommand+0xa4>
			{
				textualProtocol->command[textualProtocol->commandLength] = textualProtocol->dataPacket[i];
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	7892      	ldrb	r2, [r2, #2]
 80040aa:	4611      	mov	r1, r2
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	4413      	add	r3, r2
 80040b0:	7a9a      	ldrb	r2, [r3, #10]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	440b      	add	r3, r1
 80040b6:	f883 21d1 	strb.w	r2, [r3, #465]	@ 0x1d1
				textualProtocol->commandLength++;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	789b      	ldrb	r3, [r3, #2]
 80040be:	3301      	adds	r3, #1
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	709a      	strb	r2, [r3, #2]
				i++;
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
 80040c8:	3301      	adds	r3, #1
 80040ca:	73fb      	strb	r3, [r7, #15]
		while (textualProtocol->commandLength < (QTY_MAX_OF_BYTES_IN_COMMAND - 1))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	789b      	ldrb	r3, [r3, #2]
 80040d0:	2b09      	cmp	r3, #9
 80040d2:	d9d3      	bls.n	800407c <textualProtocolExtractCommand+0x34>
	if (((textualProtocol->dataPacket[1] >= 'A') && (textualProtocol->dataPacket[1] <= 'Z'))
 80040d4:	e00b      	b.n	80040ee <textualProtocolExtractCommand+0xa6>
			}
		}
	}
	else
	{
		textualProtocolSendStatusMessage(textualProtocol, STATUS_MESSAGE_UNKNOWN_COMMAND);
 80040d6:	21ac      	movs	r1, #172	@ 0xac
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff ff27 	bl	8003f2c <textualProtocolSendStatusMessage>
		textualProtocolClear(textualProtocol, CLEAR_ALL);
 80040de:	2101      	movs	r1, #1
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7ff fe45 	bl	8003d70 <textualProtocolClear>
		return;
 80040e6:	e002      	b.n	80040ee <textualProtocolExtractCommand+0xa6>
				return;
 80040e8:	bf00      	nop
 80040ea:	e000      	b.n	80040ee <textualProtocolExtractCommand+0xa6>
				return;
 80040ec:	bf00      	nop
	}
}
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <textualProtocolDecodeExtractedCommand>:

void textualProtocolDecodeExtractedCommand(TextualProtocol *textualProtocol)
{
 80040f4:	b590      	push	{r4, r7, lr}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
	uint8_t qtyOfFixedCommands = 2;
 80040fc:	2302      	movs	r3, #2
 80040fe:	737b      	strb	r3, [r7, #13]
	uint8_t currentFixedCommand = 0;
 8004100:	2300      	movs	r3, #0
 8004102:	73fb      	strb	r3, [r7, #15]
	uint8_t currentByteInFixedCommand = 0;
 8004104:	2300      	movs	r3, #0
 8004106:	73bb      	strb	r3, [r7, #14]

	if (textualProtocol->enableDecodeExtractedCommand == TRUE)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	7a1b      	ldrb	r3, [r3, #8]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d152      	bne.n	80041b6 <textualProtocolDecodeExtractedCommand+0xc2>
	{
		textualProtocol->enableDecodeExtractedCommand = FALSE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	721a      	strb	r2, [r3, #8]

		for (currentFixedCommand = 0; currentFixedCommand < qtyOfFixedCommands; currentFixedCommand++)
 8004116:	2300      	movs	r3, #0
 8004118:	73fb      	strb	r3, [r7, #15]
 800411a:	e040      	b.n	800419e <textualProtocolDecodeExtractedCommand+0xaa>
		{
			for (currentByteInFixedCommand = 0; currentByteInFixedCommand < QTY_MAX_OF_BYTES_IN_COMMAND; currentByteInFixedCommand++)
 800411c:	2300      	movs	r3, #0
 800411e:	73bb      	strb	r3, [r7, #14]
 8004120:	e035      	b.n	800418e <textualProtocolDecodeExtractedCommand+0x9a>
			{
				if (textualProtocol->command[currentByteInFixedCommand] != fixedTextualCommands[currentFixedCommand][currentByteInFixedCommand])
 8004122:	7bbb      	ldrb	r3, [r7, #14]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	4413      	add	r3, r2
 8004128:	f893 11d1 	ldrb.w	r1, [r3, #465]	@ 0x1d1
 800412c:	7bfa      	ldrb	r2, [r7, #15]
 800412e:	7bb8      	ldrb	r0, [r7, #14]
 8004130:	4c22      	ldr	r4, [pc, #136]	@ (80041bc <textualProtocolDecodeExtractedCommand+0xc8>)
 8004132:	4613      	mov	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	4413      	add	r3, r2
 800413c:	4423      	add	r3, r4
 800413e:	4403      	add	r3, r0
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	4299      	cmp	r1, r3
 8004144:	d127      	bne.n	8004196 <textualProtocolDecodeExtractedCommand+0xa2>
				{
					break;
				}

				if (currentByteInFixedCommand == (QTY_MAX_OF_BYTES_IN_COMMAND-1))
 8004146:	7bbb      	ldrb	r3, [r7, #14]
 8004148:	2b0a      	cmp	r3, #10
 800414a:	d11d      	bne.n	8004188 <textualProtocolDecodeExtractedCommand+0x94>
				{
					if (currentFixedCommand == 0)
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10b      	bne.n	800416a <textualProtocolDecodeExtractedCommand+0x76>
					{
						textualProtocol->commandCode = CMD_RX_SET_ECHO_STATUS;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	70da      	strb	r2, [r3, #3]
						textualProtocol->textualProtocolRxCommandStatus = VALID_RX_COMMAND;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 21dd 	strb.w	r2, [r3, #477]	@ 0x1dd
						//textualProtocolSendStatusMessage(textualProtocol, STATUS_MESSAGE_OK);
						//textualProtocolPrintCurrentData(textualProtocol);
						textualProtocolClear(textualProtocol, CLEAR_AFTER_DECODE_EXTRACTED_COMMAND);
 8004160:	2107      	movs	r1, #7
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7ff fe04 	bl	8003d70 <textualProtocolClear>
						return;
 8004168:	e025      	b.n	80041b6 <textualProtocolDecodeExtractedCommand+0xc2>
					}
					else if (currentFixedCommand == 1)
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d10b      	bne.n	8004188 <textualProtocolDecodeExtractedCommand+0x94>
					{
						textualProtocol->commandCode = CMD_RX_SET_BLINK_PATTERN;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	70da      	strb	r2, [r3, #3]
						textualProtocol->textualProtocolRxCommandStatus = VALID_RX_COMMAND;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 21dd 	strb.w	r2, [r3, #477]	@ 0x1dd
						//textualProtocolSendStatusMessage(textualProtocol, STATUS_MESSAGE_OK);
						//textualProtocolPrintCurrentData(textualProtocol);
						textualProtocolClear(textualProtocol, CLEAR_AFTER_DECODE_EXTRACTED_COMMAND);
 800417e:	2107      	movs	r1, #7
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff fdf5 	bl	8003d70 <textualProtocolClear>
						return;
 8004186:	e016      	b.n	80041b6 <textualProtocolDecodeExtractedCommand+0xc2>
			for (currentByteInFixedCommand = 0; currentByteInFixedCommand < QTY_MAX_OF_BYTES_IN_COMMAND; currentByteInFixedCommand++)
 8004188:	7bbb      	ldrb	r3, [r7, #14]
 800418a:	3301      	adds	r3, #1
 800418c:	73bb      	strb	r3, [r7, #14]
 800418e:	7bbb      	ldrb	r3, [r7, #14]
 8004190:	2b0a      	cmp	r3, #10
 8004192:	d9c6      	bls.n	8004122 <textualProtocolDecodeExtractedCommand+0x2e>
 8004194:	e000      	b.n	8004198 <textualProtocolDecodeExtractedCommand+0xa4>
					break;
 8004196:	bf00      	nop
		for (currentFixedCommand = 0; currentFixedCommand < qtyOfFixedCommands; currentFixedCommand++)
 8004198:	7bfb      	ldrb	r3, [r7, #15]
 800419a:	3301      	adds	r3, #1
 800419c:	73fb      	strb	r3, [r7, #15]
 800419e:	7bfa      	ldrb	r2, [r7, #15]
 80041a0:	7b7b      	ldrb	r3, [r7, #13]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d3ba      	bcc.n	800411c <textualProtocolDecodeExtractedCommand+0x28>
					}
				}
			}
		}

		textualProtocolSendStatusMessage(textualProtocol, STATUS_MESSAGE_UNKNOWN_COMMAND);
 80041a6:	21ac      	movs	r1, #172	@ 0xac
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff febf 	bl	8003f2c <textualProtocolSendStatusMessage>
		//textualProtocolPrintCurrentData(textualProtocol);
		textualProtocolClear(textualProtocol, CLEAR_ALL);
 80041ae:	2101      	movs	r1, #1
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff fddd 	bl	8003d70 <textualProtocolClear>
	}
}
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd90      	pop	{r4, r7, pc}
 80041bc:	0800457c 	.word	0x0800457c

080041c0 <textualProtocolFindDelimiters>:

void textualProtocolFindDelimiters(TextualProtocol *textualProtocol)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80041c8:	2300      	movs	r3, #0
 80041ca:	73fb      	strb	r3, [r7, #15]
	uint8_t i_delimeters = 0;
 80041cc:	2300      	movs	r3, #0
 80041ce:	73bb      	strb	r3, [r7, #14]

	for (i = 0; i < QTY_MAX_RX_DATA_BYTES; i++)
 80041d0:	2300      	movs	r3, #0
 80041d2:	73fb      	strb	r3, [r7, #15]
 80041d4:	e01c      	b.n	8004210 <textualProtocolFindDelimiters+0x50>
	{
		if (i_delimeters < QTY_MAX_OF_DELIMITERS)
 80041d6:	7bbb      	ldrb	r3, [r7, #14]
 80041d8:	2b09      	cmp	r3, #9
 80041da:	d816      	bhi.n	800420a <textualProtocolFindDelimiters+0x4a>
		{
			if (textualProtocol->dataPacket[i] == textualProtocol->delimiter)
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	4413      	add	r3, r2
 80041e2:	7a9a      	ldrb	r2, [r3, #10]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	785b      	ldrb	r3, [r3, #1]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d10e      	bne.n	800420a <textualProtocolFindDelimiters+0x4a>
			{
				textualProtocol->indexesOfDelimiters[i_delimeters] = i;
 80041ec:	7bbb      	ldrb	r3, [r7, #14]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	4413      	add	r3, r2
 80041f2:	7bfa      	ldrb	r2, [r7, #15]
 80041f4:	f883 21c7 	strb.w	r2, [r3, #455]	@ 0x1c7
				textualProtocol->qtyOfDelimiters++;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	7a5b      	ldrb	r3, [r3, #9]
 80041fc:	3301      	adds	r3, #1
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	725a      	strb	r2, [r3, #9]
				i_delimeters++;
 8004204:	7bbb      	ldrb	r3, [r7, #14]
 8004206:	3301      	adds	r3, #1
 8004208:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < QTY_MAX_RX_DATA_BYTES; i++)
 800420a:	7bfb      	ldrb	r3, [r7, #15]
 800420c:	3301      	adds	r3, #1
 800420e:	73fb      	strb	r3, [r7, #15]
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	2bea      	cmp	r3, #234	@ 0xea
 8004214:	d9df      	bls.n	80041d6 <textualProtocolFindDelimiters+0x16>
			}
		}
	}
}
 8004216:	bf00      	nop
 8004218:	bf00      	nop
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <textualProtocolExtractValues>:

void textualProtocolExtractValues(TextualProtocol *textualProtocol)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
	uint8_t value = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	73bb      	strb	r3, [r7, #14]
	for (value = 0; value < textualProtocol->qtyOfDelimiters; value++)
 8004234:	2300      	movs	r3, #0
 8004236:	73fb      	strb	r3, [r7, #15]
 8004238:	e02c      	b.n	8004294 <textualProtocolExtractValues+0x70>
	{
		for (byte = 0; byte < (QTY_MAX_OF_BYTES_PER_VALUE - 1); byte++)
 800423a:	2300      	movs	r3, #0
 800423c:	73bb      	strb	r3, [r7, #14]
 800423e:	e023      	b.n	8004288 <textualProtocolExtractValues+0x64>
		{
			uint8_t index_delimiter = textualProtocol->indexesOfDelimiters[value];
 8004240:	7bfb      	ldrb	r3, [r7, #15]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	4413      	add	r3, r2
 8004246:	f893 31c7 	ldrb.w	r3, [r3, #455]	@ 0x1c7
 800424a:	737b      	strb	r3, [r7, #13]
			uint8_t data = textualProtocol->dataPacket[index_delimiter + byte + 1];
 800424c:	7b7a      	ldrb	r2, [r7, #13]
 800424e:	7bbb      	ldrb	r3, [r7, #14]
 8004250:	4413      	add	r3, r2
 8004252:	3301      	adds	r3, #1
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	4413      	add	r3, r2
 8004258:	7a9b      	ldrb	r3, [r3, #10]
 800425a:	733b      	strb	r3, [r7, #12]
			if ((data == ',') || (data == 0))
 800425c:	7b3b      	ldrb	r3, [r7, #12]
 800425e:	2b2c      	cmp	r3, #44	@ 0x2c
 8004260:	d015      	beq.n	800428e <textualProtocolExtractValues+0x6a>
 8004262:	7b3b      	ldrb	r3, [r7, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d012      	beq.n	800428e <textualProtocolExtractValues+0x6a>
			{
				break;
			}

			textualProtocol->values[value][byte] = data;
 8004268:	7bfa      	ldrb	r2, [r7, #15]
 800426a:	7bb9      	ldrb	r1, [r7, #14]
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	4413      	add	r3, r2
 8004274:	00da      	lsls	r2, r3, #3
 8004276:	1ad2      	subs	r2, r2, r3
 8004278:	1883      	adds	r3, r0, r2
 800427a:	440b      	add	r3, r1
 800427c:	33f5      	adds	r3, #245	@ 0xf5
 800427e:	7b3a      	ldrb	r2, [r7, #12]
 8004280:	701a      	strb	r2, [r3, #0]
		for (byte = 0; byte < (QTY_MAX_OF_BYTES_PER_VALUE - 1); byte++)
 8004282:	7bbb      	ldrb	r3, [r7, #14]
 8004284:	3301      	adds	r3, #1
 8004286:	73bb      	strb	r3, [r7, #14]
 8004288:	7bbb      	ldrb	r3, [r7, #14]
 800428a:	2b13      	cmp	r3, #19
 800428c:	d9d8      	bls.n	8004240 <textualProtocolExtractValues+0x1c>
	for (value = 0; value < textualProtocol->qtyOfDelimiters; value++)
 800428e:	7bfb      	ldrb	r3, [r7, #15]
 8004290:	3301      	adds	r3, #1
 8004292:	73fb      	strb	r3, [r7, #15]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	7a5b      	ldrb	r3, [r3, #9]
 8004298:	7bfa      	ldrb	r2, [r7, #15]
 800429a:	429a      	cmp	r2, r3
 800429c:	d3cd      	bcc.n	800423a <textualProtocolExtractValues+0x16>
		}
	}
}
 800429e:	bf00      	nop
 80042a0:	bf00      	nop
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <textualProtocolGetEchoEnable>:
	sprintf(message, "==============================\r\n");
	HAL_UART_Transmit(&textualProtocol->huart, ((uint8_t *) message), strlen(message), HAL_MAX_DELAY);
}

Bool textualProtocolGetEchoEnable(TextualProtocol *textualProtocol)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
	return textualProtocol->enableEcho;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	79db      	ldrb	r3, [r3, #7]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <textualProtocalSetEchoEnable>:

void textualProtocalSetEchoEnable(TextualProtocol *textualProtocol, Bool status)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	460b      	mov	r3, r1
 80042ce:	70fb      	strb	r3, [r7, #3]
	textualProtocol->enableEcho = status;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	78fa      	ldrb	r2, [r7, #3]
 80042d4:	71da      	strb	r2, [r3, #7]
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <textualProtocolGetCommandStatus>:

TextualProtocolRxCommandStatus textualProtocolGetCommandStatus(TextualProtocol *textualProtocol)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
	return textualProtocol->textualProtocolRxCommandStatus;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 31dd 	ldrb.w	r3, [r3, #477]	@ 0x1dd
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <textualProtocolGetDecodedCommand>:

DecodedReceivedCommands textualProtocolGetDecodedCommand(TextualProtocol *textualProtocol)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
	return textualProtocol->commandCode;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	78db      	ldrb	r3, [r3, #3]
}
 8004308:	4618      	mov	r0, r3
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <atoi>:
 8004314:	220a      	movs	r2, #10
 8004316:	2100      	movs	r1, #0
 8004318:	f000 b87a 	b.w	8004410 <strtol>

0800431c <_strtol_l.constprop.0>:
 800431c:	2b24      	cmp	r3, #36	@ 0x24
 800431e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004322:	4686      	mov	lr, r0
 8004324:	4690      	mov	r8, r2
 8004326:	d801      	bhi.n	800432c <_strtol_l.constprop.0+0x10>
 8004328:	2b01      	cmp	r3, #1
 800432a:	d106      	bne.n	800433a <_strtol_l.constprop.0+0x1e>
 800432c:	f000 f882 	bl	8004434 <__errno>
 8004330:	2316      	movs	r3, #22
 8004332:	6003      	str	r3, [r0, #0]
 8004334:	2000      	movs	r0, #0
 8004336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800433a:	4834      	ldr	r0, [pc, #208]	@ (800440c <_strtol_l.constprop.0+0xf0>)
 800433c:	460d      	mov	r5, r1
 800433e:	462a      	mov	r2, r5
 8004340:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004344:	5d06      	ldrb	r6, [r0, r4]
 8004346:	f016 0608 	ands.w	r6, r6, #8
 800434a:	d1f8      	bne.n	800433e <_strtol_l.constprop.0+0x22>
 800434c:	2c2d      	cmp	r4, #45	@ 0x2d
 800434e:	d12d      	bne.n	80043ac <_strtol_l.constprop.0+0x90>
 8004350:	782c      	ldrb	r4, [r5, #0]
 8004352:	2601      	movs	r6, #1
 8004354:	1c95      	adds	r5, r2, #2
 8004356:	f033 0210 	bics.w	r2, r3, #16
 800435a:	d109      	bne.n	8004370 <_strtol_l.constprop.0+0x54>
 800435c:	2c30      	cmp	r4, #48	@ 0x30
 800435e:	d12a      	bne.n	80043b6 <_strtol_l.constprop.0+0x9a>
 8004360:	782a      	ldrb	r2, [r5, #0]
 8004362:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004366:	2a58      	cmp	r2, #88	@ 0x58
 8004368:	d125      	bne.n	80043b6 <_strtol_l.constprop.0+0x9a>
 800436a:	786c      	ldrb	r4, [r5, #1]
 800436c:	2310      	movs	r3, #16
 800436e:	3502      	adds	r5, #2
 8004370:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004374:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004378:	2200      	movs	r2, #0
 800437a:	fbbc f9f3 	udiv	r9, ip, r3
 800437e:	4610      	mov	r0, r2
 8004380:	fb03 ca19 	mls	sl, r3, r9, ip
 8004384:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004388:	2f09      	cmp	r7, #9
 800438a:	d81b      	bhi.n	80043c4 <_strtol_l.constprop.0+0xa8>
 800438c:	463c      	mov	r4, r7
 800438e:	42a3      	cmp	r3, r4
 8004390:	dd27      	ble.n	80043e2 <_strtol_l.constprop.0+0xc6>
 8004392:	1c57      	adds	r7, r2, #1
 8004394:	d007      	beq.n	80043a6 <_strtol_l.constprop.0+0x8a>
 8004396:	4581      	cmp	r9, r0
 8004398:	d320      	bcc.n	80043dc <_strtol_l.constprop.0+0xc0>
 800439a:	d101      	bne.n	80043a0 <_strtol_l.constprop.0+0x84>
 800439c:	45a2      	cmp	sl, r4
 800439e:	db1d      	blt.n	80043dc <_strtol_l.constprop.0+0xc0>
 80043a0:	fb00 4003 	mla	r0, r0, r3, r4
 80043a4:	2201      	movs	r2, #1
 80043a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80043aa:	e7eb      	b.n	8004384 <_strtol_l.constprop.0+0x68>
 80043ac:	2c2b      	cmp	r4, #43	@ 0x2b
 80043ae:	bf04      	itt	eq
 80043b0:	782c      	ldrbeq	r4, [r5, #0]
 80043b2:	1c95      	addeq	r5, r2, #2
 80043b4:	e7cf      	b.n	8004356 <_strtol_l.constprop.0+0x3a>
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1da      	bne.n	8004370 <_strtol_l.constprop.0+0x54>
 80043ba:	2c30      	cmp	r4, #48	@ 0x30
 80043bc:	bf0c      	ite	eq
 80043be:	2308      	moveq	r3, #8
 80043c0:	230a      	movne	r3, #10
 80043c2:	e7d5      	b.n	8004370 <_strtol_l.constprop.0+0x54>
 80043c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80043c8:	2f19      	cmp	r7, #25
 80043ca:	d801      	bhi.n	80043d0 <_strtol_l.constprop.0+0xb4>
 80043cc:	3c37      	subs	r4, #55	@ 0x37
 80043ce:	e7de      	b.n	800438e <_strtol_l.constprop.0+0x72>
 80043d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80043d4:	2f19      	cmp	r7, #25
 80043d6:	d804      	bhi.n	80043e2 <_strtol_l.constprop.0+0xc6>
 80043d8:	3c57      	subs	r4, #87	@ 0x57
 80043da:	e7d8      	b.n	800438e <_strtol_l.constprop.0+0x72>
 80043dc:	f04f 32ff 	mov.w	r2, #4294967295
 80043e0:	e7e1      	b.n	80043a6 <_strtol_l.constprop.0+0x8a>
 80043e2:	1c53      	adds	r3, r2, #1
 80043e4:	d108      	bne.n	80043f8 <_strtol_l.constprop.0+0xdc>
 80043e6:	2322      	movs	r3, #34	@ 0x22
 80043e8:	f8ce 3000 	str.w	r3, [lr]
 80043ec:	4660      	mov	r0, ip
 80043ee:	f1b8 0f00 	cmp.w	r8, #0
 80043f2:	d0a0      	beq.n	8004336 <_strtol_l.constprop.0+0x1a>
 80043f4:	1e69      	subs	r1, r5, #1
 80043f6:	e006      	b.n	8004406 <_strtol_l.constprop.0+0xea>
 80043f8:	b106      	cbz	r6, 80043fc <_strtol_l.constprop.0+0xe0>
 80043fa:	4240      	negs	r0, r0
 80043fc:	f1b8 0f00 	cmp.w	r8, #0
 8004400:	d099      	beq.n	8004336 <_strtol_l.constprop.0+0x1a>
 8004402:	2a00      	cmp	r2, #0
 8004404:	d1f6      	bne.n	80043f4 <_strtol_l.constprop.0+0xd8>
 8004406:	f8c8 1000 	str.w	r1, [r8]
 800440a:	e794      	b.n	8004336 <_strtol_l.constprop.0+0x1a>
 800440c:	08004593 	.word	0x08004593

08004410 <strtol>:
 8004410:	4613      	mov	r3, r2
 8004412:	460a      	mov	r2, r1
 8004414:	4601      	mov	r1, r0
 8004416:	4802      	ldr	r0, [pc, #8]	@ (8004420 <strtol+0x10>)
 8004418:	6800      	ldr	r0, [r0, #0]
 800441a:	f7ff bf7f 	b.w	800431c <_strtol_l.constprop.0>
 800441e:	bf00      	nop
 8004420:	2000000c 	.word	0x2000000c

08004424 <memset>:
 8004424:	4402      	add	r2, r0
 8004426:	4603      	mov	r3, r0
 8004428:	4293      	cmp	r3, r2
 800442a:	d100      	bne.n	800442e <memset+0xa>
 800442c:	4770      	bx	lr
 800442e:	f803 1b01 	strb.w	r1, [r3], #1
 8004432:	e7f9      	b.n	8004428 <memset+0x4>

08004434 <__errno>:
 8004434:	4b01      	ldr	r3, [pc, #4]	@ (800443c <__errno+0x8>)
 8004436:	6818      	ldr	r0, [r3, #0]
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	2000000c 	.word	0x2000000c

08004440 <__libc_init_array>:
 8004440:	b570      	push	{r4, r5, r6, lr}
 8004442:	4d0d      	ldr	r5, [pc, #52]	@ (8004478 <__libc_init_array+0x38>)
 8004444:	4c0d      	ldr	r4, [pc, #52]	@ (800447c <__libc_init_array+0x3c>)
 8004446:	1b64      	subs	r4, r4, r5
 8004448:	10a4      	asrs	r4, r4, #2
 800444a:	2600      	movs	r6, #0
 800444c:	42a6      	cmp	r6, r4
 800444e:	d109      	bne.n	8004464 <__libc_init_array+0x24>
 8004450:	4d0b      	ldr	r5, [pc, #44]	@ (8004480 <__libc_init_array+0x40>)
 8004452:	4c0c      	ldr	r4, [pc, #48]	@ (8004484 <__libc_init_array+0x44>)
 8004454:	f000 f826 	bl	80044a4 <_init>
 8004458:	1b64      	subs	r4, r4, r5
 800445a:	10a4      	asrs	r4, r4, #2
 800445c:	2600      	movs	r6, #0
 800445e:	42a6      	cmp	r6, r4
 8004460:	d105      	bne.n	800446e <__libc_init_array+0x2e>
 8004462:	bd70      	pop	{r4, r5, r6, pc}
 8004464:	f855 3b04 	ldr.w	r3, [r5], #4
 8004468:	4798      	blx	r3
 800446a:	3601      	adds	r6, #1
 800446c:	e7ee      	b.n	800444c <__libc_init_array+0xc>
 800446e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004472:	4798      	blx	r3
 8004474:	3601      	adds	r6, #1
 8004476:	e7f2      	b.n	800445e <__libc_init_array+0x1e>
 8004478:	0800469c 	.word	0x0800469c
 800447c:	0800469c 	.word	0x0800469c
 8004480:	0800469c 	.word	0x0800469c
 8004484:	080046a0 	.word	0x080046a0

08004488 <memcpy>:
 8004488:	440a      	add	r2, r1
 800448a:	4291      	cmp	r1, r2
 800448c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004490:	d100      	bne.n	8004494 <memcpy+0xc>
 8004492:	4770      	bx	lr
 8004494:	b510      	push	{r4, lr}
 8004496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800449a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800449e:	4291      	cmp	r1, r2
 80044a0:	d1f9      	bne.n	8004496 <memcpy+0xe>
 80044a2:	bd10      	pop	{r4, pc}

080044a4 <_init>:
 80044a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a6:	bf00      	nop
 80044a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044aa:	bc08      	pop	{r3}
 80044ac:	469e      	mov	lr, r3
 80044ae:	4770      	bx	lr

080044b0 <_fini>:
 80044b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b2:	bf00      	nop
 80044b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044b6:	bc08      	pop	{r3}
 80044b8:	469e      	mov	lr, r3
 80044ba:	4770      	bx	lr

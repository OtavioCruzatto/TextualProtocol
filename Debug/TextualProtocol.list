
TextualProtocol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c94  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08004e64  08004e64  00005e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f70  08004f70  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f70  08004f70  00005f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f78  08004f78  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f78  08004f78  00005f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f7c  08004f7c  00005f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004f80  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  2000005c  08004fdc  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08004fdc  00006498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd17  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e1  00000000  00000000  00015da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00018488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b22  00000000  00000000  000192d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022c2c  00000000  00000000  00019dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012816  00000000  00000000  0003ca26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1a67  00000000  00000000  0004f23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120ca3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a4  00000000  00000000  00120ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00124d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004e4c 	.word	0x08004e4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004e4c 	.word	0x08004e4c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <appInit>:
#include "app.h"

// ======== Init =========== //
void appInit(App *app, GPIO_TypeDef* ledPort, uint16_t ledPin,
			UART_HandleTypeDef huart)
{
 80005b0:	b082      	sub	sp, #8
 80005b2:	b590      	push	{r4, r7, lr}
 80005b4:	b097      	sub	sp, #92	@ 0x5c
 80005b6:	af12      	add	r7, sp, #72	@ 0x48
 80005b8:	60f8      	str	r0, [r7, #12]
 80005ba:	60b9      	str	r1, [r7, #8]
 80005bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80005be:	4613      	mov	r3, r2
 80005c0:	80fb      	strh	r3, [r7, #6]
	// ======== LED =========== //
	blinkLedInit(&app->blinkLed, ledPort, ledPin, PATTERN_TOGGLE_EACH_100_MS);
 80005c2:	68f8      	ldr	r0, [r7, #12]
 80005c4:	88fa      	ldrh	r2, [r7, #6]
 80005c6:	2301      	movs	r3, #1
 80005c8:	68b9      	ldr	r1, [r7, #8]
 80005ca:	f000 f895 	bl	80006f8 <blinkLedInit>

	// ======== Textual protocol =========== //
	textualProtocolInit(&app->textualProtocol, '$', ',', huart);
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f103 0410 	add.w	r4, r3, #16
 80005d4:	4668      	mov	r0, sp
 80005d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005da:	2244      	movs	r2, #68	@ 0x44
 80005dc:	4619      	mov	r1, r3
 80005de:	f003 ffe9 	bl	80045b4 <memcpy>
 80005e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005e4:	222c      	movs	r2, #44	@ 0x2c
 80005e6:	2124      	movs	r1, #36	@ 0x24
 80005e8:	4620      	mov	r0, r4
 80005ea:	f003 fb67 	bl	8003cbc <textualProtocolInit>
}
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80005f8:	b002      	add	sp, #8
 80005fa:	4770      	bx	lr

080005fc <appExecuteBlinkLed>:

// ======== LED =========== //
void appExecuteBlinkLed(App *app)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	blinkLedExecuteBlink(&app->blinkLed);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f89e 	bl	8000748 <blinkLedExecuteBlink>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <appAppendTpByte>:

// ======== Textual protocol =========== //
void appAppendTpByte(App *app, uint8_t receivedByte)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	70fb      	strb	r3, [r7, #3]
	textualProtocolAppendByte(&app->textualProtocol, receivedByte);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	3310      	adds	r3, #16
 8000624:	78fa      	ldrb	r2, [r7, #3]
 8000626:	4611      	mov	r1, r2
 8000628:	4618      	mov	r0, r3
 800062a:	f003 fb6e 	bl	8003d0a <textualProtocolAppendByte>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <appExtractTpData>:

void appExtractTpData(App *app)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	b082      	sub	sp, #8
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
	textualProtocolExtractData(&app->textualProtocol);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	3310      	adds	r3, #16
 8000642:	4618      	mov	r0, r3
 8000644:	f003 fcf2 	bl	800402c <textualProtocolExtractData>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <appDecodeExtractedTpCommand>:

void appDecodeExtractedTpCommand(App *app)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	textualProtocolDecodeExtractedCommand(&app->textualProtocol);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3310      	adds	r3, #16
 800065c:	4618      	mov	r0, r3
 800065e:	f003 fd69 	bl	8004134 <textualProtocolDecodeExtractedCommand>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <appPrintCurrentTpData>:

void appPrintCurrentTpData(App *app)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
	textualProtocolPrintCurrentData(&app->textualProtocol);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	3310      	adds	r3, #16
 8000676:	4618      	mov	r0, r3
 8000678:	f003 fe40 	bl	80042fc <textualProtocolPrintCurrentData>
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <appClearTpData>:

void appClearTpData(App *app, TextualProtocolClear clear)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	70fb      	strb	r3, [r7, #3]
	textualProtocolClear(&app->textualProtocol, clear);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3310      	adds	r3, #16
 8000694:	78fa      	ldrb	r2, [r7, #3]
 8000696:	4611      	mov	r1, r2
 8000698:	4618      	mov	r0, r3
 800069a:	f003 fb89 	bl	8003db0 <textualProtocolClear>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <appGetBlinkDelay>:

// ======= Getters and Setters ======== //
uint32_t appGetBlinkDelay(App *app)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
	return blinkLedGetBlinkDelay(&app->blinkLed);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 f97f 	bl	80009b4 <blinkLedGetBlinkDelay>
 80006b6:	4603      	mov	r3, r0
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <appGetTpEchoEnable>:

Bool appGetTpEchoEnable(App *app)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	return textualProtocolGetEchoEnable(&app->textualProtocol);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3310      	adds	r3, #16
 80006cc:	4618      	mov	r0, r3
 80006ce:	f003 ff03 	bl	80044d8 <textualProtocolGetEchoEnable>
 80006d2:	4603      	mov	r3, r0
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <appGetCommandStatus>:

TextualProtocolRxCommandStatus appGetCommandStatus(App *app)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	return textualProtocolGetCommandStatus(&app->textualProtocol);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	3310      	adds	r3, #16
 80006e8:	4618      	mov	r0, r3
 80006ea:	f003 ff01 	bl	80044f0 <textualProtocolGetCommandStatus>
 80006ee:	4603      	mov	r3, r0
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <blinkLedInit>:

#include "blinkLed.h"

// ======== Init =========== //
void blinkLedInit(BlinkLed *blinkLed, GPIO_TypeDef* ledPort, uint16_t ledPin, uint8_t blinkPattern)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	4611      	mov	r1, r2
 8000704:	461a      	mov	r2, r3
 8000706:	460b      	mov	r3, r1
 8000708:	80fb      	strh	r3, [r7, #6]
 800070a:	4613      	mov	r3, r2
 800070c:	717b      	strb	r3, [r7, #5]
	blinkLed->ledPort = ledPort;
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	68ba      	ldr	r2, [r7, #8]
 8000712:	609a      	str	r2, [r3, #8]
	blinkLed->ledPin = ledPin;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	88fa      	ldrh	r2, [r7, #6]
 8000718:	819a      	strh	r2, [r3, #12]
	blinkLed->blinkPattern = blinkPattern;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	797a      	ldrb	r2, [r7, #5]
 800071e:	715a      	strb	r2, [r3, #5]
	blinkLed->counter = 0;
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	2200      	movs	r2, #0
 8000724:	711a      	strb	r2, [r3, #4]
	HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	6898      	ldr	r0, [r3, #8]
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	899b      	ldrh	r3, [r3, #12]
 800072e:	2200      	movs	r2, #0
 8000730:	4619      	mov	r1, r3
 8000732:	f001 f88d 	bl	8001850 <HAL_GPIO_WritePin>
	blinkLedSetBlinkDelay(blinkLed, DELAY_100_MILISECONDS);
 8000736:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800073a:	68f8      	ldr	r0, [r7, #12]
 800073c:	f000 f946 	bl	80009cc <blinkLedSetBlinkDelay>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <blinkLedExecuteBlink>:

// ======== LED =========== //
void blinkLedExecuteBlink(BlinkLed *blinkLed)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	switch (blinkLedGetBlinkPattern(blinkLed))
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f000 f964 	bl	8000a1e <blinkLedGetBlinkPattern>
 8000756:	4603      	mov	r3, r0
 8000758:	2b05      	cmp	r3, #5
 800075a:	f200 8127 	bhi.w	80009ac <blinkLedExecuteBlink+0x264>
 800075e:	a201      	add	r2, pc, #4	@ (adr r2, 8000764 <blinkLedExecuteBlink+0x1c>)
 8000760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000764:	0800077d 	.word	0x0800077d
 8000768:	080007b5 	.word	0x080007b5
 800076c:	080007ed 	.word	0x080007ed
 8000770:	080008f3 	.word	0x080008f3
 8000774:	080007d1 	.word	0x080007d1
 8000778:	08000799 	.word	0x08000799
	{
		case PATTERN_ALWAYS_OFF:
			HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6898      	ldr	r0, [r3, #8]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	899b      	ldrh	r3, [r3, #12]
 8000784:	2200      	movs	r2, #0
 8000786:	4619      	mov	r1, r3
 8000788:	f001 f862 	bl	8001850 <HAL_GPIO_WritePin>
			blinkLedSetBlinkDelay(blinkLed, DELAY_500_MILISECONDS);
 800078c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 f91b 	bl	80009cc <blinkLedSetBlinkDelay>
			break;
 8000796:	e109      	b.n	80009ac <blinkLedExecuteBlink+0x264>

		case PATTERN_ALWAYS_ON:
			HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	6898      	ldr	r0, [r3, #8]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	899b      	ldrh	r3, [r3, #12]
 80007a0:	2201      	movs	r2, #1
 80007a2:	4619      	mov	r1, r3
 80007a4:	f001 f854 	bl	8001850 <HAL_GPIO_WritePin>
			blinkLedSetBlinkDelay(blinkLed, DELAY_500_MILISECONDS);
 80007a8:	f241 3188 	movw	r1, #5000	@ 0x1388
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f000 f90d 	bl	80009cc <blinkLedSetBlinkDelay>
			break;
 80007b2:	e0fb      	b.n	80009ac <blinkLedExecuteBlink+0x264>

		case PATTERN_TOGGLE_EACH_100_MS:
			HAL_GPIO_TogglePin(blinkLed->ledPort, blinkLed->ledPin);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689a      	ldr	r2, [r3, #8]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	899b      	ldrh	r3, [r3, #12]
 80007bc:	4619      	mov	r1, r3
 80007be:	4610      	mov	r0, r2
 80007c0:	f001 f85f 	bl	8001882 <HAL_GPIO_TogglePin>
			blinkLedSetBlinkDelay(blinkLed, DELAY_100_MILISECONDS);
 80007c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f000 f8ff 	bl	80009cc <blinkLedSetBlinkDelay>
			break;
 80007ce:	e0ed      	b.n	80009ac <blinkLedExecuteBlink+0x264>

		case PATTERN_TOGGLE_EACH_250_MS:
			HAL_GPIO_TogglePin(blinkLed->ledPort, blinkLed->ledPin);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	689a      	ldr	r2, [r3, #8]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	899b      	ldrh	r3, [r3, #12]
 80007d8:	4619      	mov	r1, r3
 80007da:	4610      	mov	r0, r2
 80007dc:	f001 f851 	bl	8001882 <HAL_GPIO_TogglePin>
			blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 80007e0:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f000 f8f1 	bl	80009cc <blinkLedSetBlinkDelay>
			break;
 80007ea:	e0df      	b.n	80009ac <blinkLedExecuteBlink+0x264>

		case PATTERN_SHORT_SHORT_LONG:
			switch (blinkLedGetCounter(blinkLed))
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f000 f8fb 	bl	80009e8 <blinkLedGetCounter>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b05      	cmp	r3, #5
 80007f6:	f200 80d6 	bhi.w	80009a6 <blinkLedExecuteBlink+0x25e>
 80007fa:	a201      	add	r2, pc, #4	@ (adr r2, 8000800 <blinkLedExecuteBlink+0xb8>)
 80007fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000800:	08000819 	.word	0x08000819
 8000804:	0800083d 	.word	0x0800083d
 8000808:	08000861 	.word	0x08000861
 800080c:	08000885 	.word	0x08000885
 8000810:	080008a9 	.word	0x080008a9
 8000814:	080008cd 	.word	0x080008cd
			{
				case 0:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6898      	ldr	r0, [r3, #8]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	899b      	ldrh	r3, [r3, #12]
 8000820:	2201      	movs	r2, #1
 8000822:	4619      	mov	r1, r3
 8000824:	f001 f814 	bl	8001850 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 8000828:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f000 f8cd 	bl	80009cc <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 1);
 8000832:	2101      	movs	r1, #1
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f000 f8e3 	bl	8000a00 <blinkLedSetCounter>
					break;
 800083a:	e059      	b.n	80008f0 <blinkLedExecuteBlink+0x1a8>

				case 1:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6898      	ldr	r0, [r3, #8]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	899b      	ldrh	r3, [r3, #12]
 8000844:	2200      	movs	r2, #0
 8000846:	4619      	mov	r1, r3
 8000848:	f001 f802 	bl	8001850 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 800084c:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f000 f8bb 	bl	80009cc <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 2);
 8000856:	2102      	movs	r1, #2
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f000 f8d1 	bl	8000a00 <blinkLedSetCounter>
					break;
 800085e:	e047      	b.n	80008f0 <blinkLedExecuteBlink+0x1a8>

				case 2:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6898      	ldr	r0, [r3, #8]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	899b      	ldrh	r3, [r3, #12]
 8000868:	2201      	movs	r2, #1
 800086a:	4619      	mov	r1, r3
 800086c:	f000 fff0 	bl	8001850 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 8000870:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f000 f8a9 	bl	80009cc <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 3);
 800087a:	2103      	movs	r1, #3
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f000 f8bf 	bl	8000a00 <blinkLedSetCounter>
					break;
 8000882:	e035      	b.n	80008f0 <blinkLedExecuteBlink+0x1a8>

				case 3:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6898      	ldr	r0, [r3, #8]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	899b      	ldrh	r3, [r3, #12]
 800088c:	2200      	movs	r2, #0
 800088e:	4619      	mov	r1, r3
 8000890:	f000 ffde 	bl	8001850 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 8000894:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f000 f897 	bl	80009cc <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 4);
 800089e:	2104      	movs	r1, #4
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f000 f8ad 	bl	8000a00 <blinkLedSetCounter>
					break;
 80008a6:	e023      	b.n	80008f0 <blinkLedExecuteBlink+0x1a8>

				case 4:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6898      	ldr	r0, [r3, #8]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	899b      	ldrh	r3, [r3, #12]
 80008b0:	2201      	movs	r2, #1
 80008b2:	4619      	mov	r1, r3
 80008b4:	f000 ffcc 	bl	8001850 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_750_MILISECONDS);
 80008b8:	f641 514c 	movw	r1, #7500	@ 0x1d4c
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f000 f885 	bl	80009cc <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 5);
 80008c2:	2105      	movs	r1, #5
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f000 f89b 	bl	8000a00 <blinkLedSetCounter>
					break;
 80008ca:	e011      	b.n	80008f0 <blinkLedExecuteBlink+0x1a8>

				case 5:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6898      	ldr	r0, [r3, #8]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	899b      	ldrh	r3, [r3, #12]
 80008d4:	2200      	movs	r2, #0
 80008d6:	4619      	mov	r1, r3
 80008d8:	f000 ffba 	bl	8001850 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_500_MILISECONDS);
 80008dc:	f241 3188 	movw	r1, #5000	@ 0x1388
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f000 f873 	bl	80009cc <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 0);
 80008e6:	2100      	movs	r1, #0
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f000 f889 	bl	8000a00 <blinkLedSetCounter>
					break;
 80008ee:	bf00      	nop
			}
			break;
 80008f0:	e059      	b.n	80009a6 <blinkLedExecuteBlink+0x25e>

		case PATTERN_HEART_BEAT:
			switch (blinkLedGetCounter(blinkLed))
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f000 f878 	bl	80009e8 <blinkLedGetCounter>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b03      	cmp	r3, #3
 80008fc:	d855      	bhi.n	80009aa <blinkLedExecuteBlink+0x262>
 80008fe:	a201      	add	r2, pc, #4	@ (adr r2, 8000904 <blinkLedExecuteBlink+0x1bc>)
 8000900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000904:	08000915 	.word	0x08000915
 8000908:	08000939 	.word	0x08000939
 800090c:	0800095d 	.word	0x0800095d
 8000910:	08000981 	.word	0x08000981
			{
				case 0:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6898      	ldr	r0, [r3, #8]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	899b      	ldrh	r3, [r3, #12]
 800091c:	2201      	movs	r2, #1
 800091e:	4619      	mov	r1, r3
 8000920:	f000 ff96 	bl	8001850 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_200_MILISECONDS);
 8000924:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f000 f84f 	bl	80009cc <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 1);
 800092e:	2101      	movs	r1, #1
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f000 f865 	bl	8000a00 <blinkLedSetCounter>
					break;
 8000936:	e035      	b.n	80009a4 <blinkLedExecuteBlink+0x25c>

				case 1:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6898      	ldr	r0, [r3, #8]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	899b      	ldrh	r3, [r3, #12]
 8000940:	2200      	movs	r2, #0
 8000942:	4619      	mov	r1, r3
 8000944:	f000 ff84 	bl	8001850 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_150_MILISECONDS);
 8000948:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f000 f83d 	bl	80009cc <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 2);
 8000952:	2102      	movs	r1, #2
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f000 f853 	bl	8000a00 <blinkLedSetCounter>
					break;
 800095a:	e023      	b.n	80009a4 <blinkLedExecuteBlink+0x25c>

				case 2:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6898      	ldr	r0, [r3, #8]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	899b      	ldrh	r3, [r3, #12]
 8000964:	2201      	movs	r2, #1
 8000966:	4619      	mov	r1, r3
 8000968:	f000 ff72 	bl	8001850 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_500_MILISECONDS);
 800096c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f000 f82b 	bl	80009cc <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 3);
 8000976:	2103      	movs	r1, #3
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f000 f841 	bl	8000a00 <blinkLedSetCounter>
					break;
 800097e:	e011      	b.n	80009a4 <blinkLedExecuteBlink+0x25c>

				case 3:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6898      	ldr	r0, [r3, #8]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	899b      	ldrh	r3, [r3, #12]
 8000988:	2200      	movs	r2, #0
 800098a:	4619      	mov	r1, r3
 800098c:	f000 ff60 	bl	8001850 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_400_MILISECONDS);
 8000990:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f000 f819 	bl	80009cc <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 0);
 800099a:	2100      	movs	r1, #0
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f000 f82f 	bl	8000a00 <blinkLedSetCounter>
					break;
 80009a2:	bf00      	nop
			}
			break;
 80009a4:	e001      	b.n	80009aa <blinkLedExecuteBlink+0x262>
			break;
 80009a6:	bf00      	nop
 80009a8:	e000      	b.n	80009ac <blinkLedExecuteBlink+0x264>
			break;
 80009aa:	bf00      	nop
	}
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <blinkLedGetBlinkDelay>:

// ======= Getters and Setters ======== //
uint32_t blinkLedGetBlinkDelay(BlinkLed *blinkLed)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	return blinkLed->blinkDelay;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <blinkLedSetBlinkDelay>:

void blinkLedSetBlinkDelay(BlinkLed *blinkLed, uint32_t blinkDelay)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
	blinkLed->blinkDelay = blinkDelay;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	683a      	ldr	r2, [r7, #0]
 80009da:	601a      	str	r2, [r3, #0]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <blinkLedGetCounter>:

uint8_t blinkLedGetCounter(BlinkLed *blinkLed)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	return blinkLed->counter;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	791b      	ldrb	r3, [r3, #4]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <blinkLedSetCounter>:

void blinkLedSetCounter(BlinkLed *blinkLed, uint8_t counter)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	70fb      	strb	r3, [r7, #3]
	blinkLed->counter = counter;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	78fa      	ldrb	r2, [r7, #3]
 8000a10:	711a      	strb	r2, [r3, #4]
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <blinkLedGetBlinkPattern>:

uint8_t blinkLedGetBlinkPattern(BlinkLed *blinkLed)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
	return blinkLed->blinkPattern;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	795b      	ldrb	r3, [r3, #5]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
	...

08000a38 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Timer interrupt handling (100us)
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	if (htim == &htim9)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a0a      	ldr	r2, [pc, #40]	@ (8000a6c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d10b      	bne.n	8000a60 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		sendDataDelay++;
 8000a48:	4b09      	ldr	r3, [pc, #36]	@ (8000a70 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	4b07      	ldr	r3, [pc, #28]	@ (8000a70 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a52:	801a      	strh	r2, [r3, #0]
		blinkLedDelay++;
 8000a54:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000a56:	881b      	ldrh	r3, [r3, #0]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000a5e:	801a      	strh	r2, [r3, #0]
	}
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	20000078 	.word	0x20000078
 8000a70:	2000010a 	.word	0x2000010a
 8000a74:	2000010c 	.word	0x2000010c

08000a78 <HAL_UART_RxCpltCallback>:

/*
 * Interrupt for UART RX
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a11      	ldr	r2, [pc, #68]	@ (8000ac8 <HAL_UART_RxCpltCallback+0x50>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d11a      	bne.n	8000abe <HAL_UART_RxCpltCallback+0x46>
	{
		HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4910      	ldr	r1, [pc, #64]	@ (8000acc <HAL_UART_RxCpltCallback+0x54>)
 8000a8c:	480e      	ldr	r0, [pc, #56]	@ (8000ac8 <HAL_UART_RxCpltCallback+0x50>)
 8000a8e:	f002 f99a 	bl	8002dc6 <HAL_UART_Receive_IT>
		if (appGetTpEchoEnable(&app) == TRUE)
 8000a92:	480f      	ldr	r0, [pc, #60]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x58>)
 8000a94:	f7ff fe14 	bl	80006c0 <appGetTpEchoEnable>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d106      	bne.n	8000aac <HAL_UART_RxCpltCallback+0x34>
		{
			HAL_UART_Transmit(&huart2, &receivedByte, 1, HAL_MAX_DELAY);
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4909      	ldr	r1, [pc, #36]	@ (8000acc <HAL_UART_RxCpltCallback+0x54>)
 8000aa6:	4808      	ldr	r0, [pc, #32]	@ (8000ac8 <HAL_UART_RxCpltCallback+0x50>)
 8000aa8:	f002 f902 	bl	8002cb0 <HAL_UART_Transmit>
		}
		appAppendTpByte(&app, receivedByte);
 8000aac:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <HAL_UART_RxCpltCallback+0x54>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4807      	ldr	r0, [pc, #28]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x58>)
 8000ab4:	f7ff fdae 	bl	8000614 <appAppendTpByte>
		receivedByte = 0x00;
 8000ab8:	4b04      	ldr	r3, [pc, #16]	@ (8000acc <HAL_UART_RxCpltCallback+0x54>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
	}
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200000c0 	.word	0x200000c0
 8000acc:	20000108 	.word	0x20000108
 8000ad0:	20000110 	.word	0x20000110

08000ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b093      	sub	sp, #76	@ 0x4c
 8000ad8:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ada:	f000 fb0f 	bl	80010fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ade:	f000 f889 	bl	8000bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae2:	f000 f95d 	bl	8000da0 <MX_GPIO_Init>
  MX_TIM9_Init();
 8000ae6:	f000 f8f7 	bl	8000cd8 <MX_TIM9_Init>
  MX_USART2_UART_Init();
 8000aea:	f000 f92f 	bl	8000d4c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim9);
 8000aee:	4839      	ldr	r0, [pc, #228]	@ (8000bd4 <main+0x100>)
 8000af0:	f001 fce4 	bl	80024bc <HAL_TIM_Base_Start_IT>
  appInit(&app, LED_GPIO_Port, LED_Pin, huart2);
 8000af4:	4c38      	ldr	r4, [pc, #224]	@ (8000bd8 <main+0x104>)
 8000af6:	4668      	mov	r0, sp
 8000af8:	1d23      	adds	r3, r4, #4
 8000afa:	2244      	movs	r2, #68	@ 0x44
 8000afc:	4619      	mov	r1, r3
 8000afe:	f003 fd59 	bl	80045b4 <memcpy>
 8000b02:	6823      	ldr	r3, [r4, #0]
 8000b04:	2220      	movs	r2, #32
 8000b06:	4935      	ldr	r1, [pc, #212]	@ (8000bdc <main+0x108>)
 8000b08:	4835      	ldr	r0, [pc, #212]	@ (8000be0 <main+0x10c>)
 8000b0a:	f7ff fd51 	bl	80005b0 <appInit>
  HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4934      	ldr	r1, [pc, #208]	@ (8000be4 <main+0x110>)
 8000b12:	4831      	ldr	r0, [pc, #196]	@ (8000bd8 <main+0x104>)
 8000b14:	f002 f957 	bl	8002dc6 <HAL_UART_Receive_IT>

	  /* ============================================================================= */

	  /****************************** STATE MACHINE START ******************************/

	  switch (stateMachine)
 8000b18:	4b33      	ldr	r3, [pc, #204]	@ (8000be8 <main+0x114>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b05      	cmp	r3, #5
 8000b1e:	d852      	bhi.n	8000bc6 <main+0xf2>
 8000b20:	a201      	add	r2, pc, #4	@ (adr r2, 8000b28 <main+0x54>)
 8000b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b26:	bf00      	nop
 8000b28:	08000b41 	.word	0x08000b41
 8000b2c:	08000b67 	.word	0x08000b67
 8000b30:	08000b75 	.word	0x08000b75
 8000b34:	08000b83 	.word	0x08000b83
 8000b38:	08000ba5 	.word	0x08000ba5
 8000b3c:	08000bad 	.word	0x08000bad
	  {
		  case 0:
			  if (blinkLedDelay >= appGetBlinkDelay(&app))
 8000b40:	4b2a      	ldr	r3, [pc, #168]	@ (8000bec <main+0x118>)
 8000b42:	881b      	ldrh	r3, [r3, #0]
 8000b44:	461c      	mov	r4, r3
 8000b46:	4826      	ldr	r0, [pc, #152]	@ (8000be0 <main+0x10c>)
 8000b48:	f7ff fdad 	bl	80006a6 <appGetBlinkDelay>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	429c      	cmp	r4, r3
 8000b50:	d305      	bcc.n	8000b5e <main+0x8a>
			  {
				  appExecuteBlinkLed(&app);
 8000b52:	4823      	ldr	r0, [pc, #140]	@ (8000be0 <main+0x10c>)
 8000b54:	f7ff fd52 	bl	80005fc <appExecuteBlinkLed>
				  blinkLedDelay = 0;
 8000b58:	4b24      	ldr	r3, [pc, #144]	@ (8000bec <main+0x118>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 1;
 8000b5e:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <main+0x114>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	701a      	strb	r2, [r3, #0]
			  break;
 8000b64:	e034      	b.n	8000bd0 <main+0xfc>

		  case 1:
			  appExtractTpData(&app);
 8000b66:	481e      	ldr	r0, [pc, #120]	@ (8000be0 <main+0x10c>)
 8000b68:	f7ff fd65 	bl	8000636 <appExtractTpData>
			  stateMachine = 2;
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000be8 <main+0x114>)
 8000b6e:	2202      	movs	r2, #2
 8000b70:	701a      	strb	r2, [r3, #0]
			  break;
 8000b72:	e02d      	b.n	8000bd0 <main+0xfc>

		  case 2:
			  appDecodeExtractedTpCommand(&app);
 8000b74:	481a      	ldr	r0, [pc, #104]	@ (8000be0 <main+0x10c>)
 8000b76:	f7ff fd6b 	bl	8000650 <appDecodeExtractedTpCommand>
			  stateMachine = 3;
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000be8 <main+0x114>)
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	701a      	strb	r2, [r3, #0]
			  break;
 8000b80:	e026      	b.n	8000bd0 <main+0xfc>

		  case 3:
			  stateMachine = 4;
 8000b82:	4b19      	ldr	r3, [pc, #100]	@ (8000be8 <main+0x114>)
 8000b84:	2204      	movs	r2, #4
 8000b86:	701a      	strb	r2, [r3, #0]
			  if (appGetCommandStatus(&app) == VALID_RX_COMMAND)
 8000b88:	4815      	ldr	r0, [pc, #84]	@ (8000be0 <main+0x10c>)
 8000b8a:	f7ff fda7 	bl	80006dc <appGetCommandStatus>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d11c      	bne.n	8000bce <main+0xfa>
			  {
				  appPrintCurrentTpData(&app);
 8000b94:	4812      	ldr	r0, [pc, #72]	@ (8000be0 <main+0x10c>)
 8000b96:	f7ff fd68 	bl	800066a <appPrintCurrentTpData>
				  appClearTpData(&app, CLEAR_ALL);
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	4810      	ldr	r0, [pc, #64]	@ (8000be0 <main+0x10c>)
 8000b9e:	f7ff fd71 	bl	8000684 <appClearTpData>
			  }
			  break;
 8000ba2:	e014      	b.n	8000bce <main+0xfa>

		  case 4:
			  stateMachine = 5;
 8000ba4:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <main+0x114>)
 8000ba6:	2205      	movs	r2, #5
 8000ba8:	701a      	strb	r2, [r3, #0]
			  break;
 8000baa:	e011      	b.n	8000bd0 <main+0xfc>

		  case 5:
			  if (sendDataDelay >= DELAY_5000_MILISECONDS)
 8000bac:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <main+0x11c>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d902      	bls.n	8000bbe <main+0xea>
			  {
				  sendDataDelay = 0;
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <main+0x11c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 0;
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <main+0x114>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
			  break;
 8000bc4:	e004      	b.n	8000bd0 <main+0xfc>

		  default:
			  stateMachine = 0;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <main+0x114>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
			  break;
 8000bcc:	e000      	b.n	8000bd0 <main+0xfc>
			  break;
 8000bce:	bf00      	nop
	  switch (stateMachine)
 8000bd0:	e7a2      	b.n	8000b18 <main+0x44>
 8000bd2:	bf00      	nop
 8000bd4:	20000078 	.word	0x20000078
 8000bd8:	200000c0 	.word	0x200000c0
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	20000110 	.word	0x20000110
 8000be4:	20000108 	.word	0x20000108
 8000be8:	20000109 	.word	0x20000109
 8000bec:	2000010c 	.word	0x2000010c
 8000bf0:	2000010a 	.word	0x2000010a

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b094      	sub	sp, #80	@ 0x50
 8000bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	2234      	movs	r2, #52	@ 0x34
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f003 fca2 	bl	800454c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c18:	2300      	movs	r3, #0
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd0 <SystemClock_Config+0xdc>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c20:	4a2b      	ldr	r2, [pc, #172]	@ (8000cd0 <SystemClock_Config+0xdc>)
 8000c22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c28:	4b29      	ldr	r3, [pc, #164]	@ (8000cd0 <SystemClock_Config+0xdc>)
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c34:	2300      	movs	r3, #0
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	4b26      	ldr	r3, [pc, #152]	@ (8000cd4 <SystemClock_Config+0xe0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a25      	ldr	r2, [pc, #148]	@ (8000cd4 <SystemClock_Config+0xe0>)
 8000c3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c42:	6013      	str	r3, [r2, #0]
 8000c44:	4b23      	ldr	r3, [pc, #140]	@ (8000cd4 <SystemClock_Config+0xe0>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c50:	2302      	movs	r3, #2
 8000c52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c54:	2301      	movs	r3, #1
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c58:	2310      	movs	r3, #16
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c60:	2300      	movs	r3, #0
 8000c62:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c64:	2308      	movs	r3, #8
 8000c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000c68:	23b4      	movs	r3, #180	@ 0xb4
 8000c6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c70:	2302      	movs	r3, #2
 8000c72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c74:	2302      	movs	r3, #2
 8000c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f001 f92f 	bl	8001ee0 <HAL_RCC_OscConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c88:	f000 f8dc 	bl	8000e44 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c8c:	f000 fe14 	bl	80018b8 <HAL_PWREx_EnableOverDrive>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c96:	f000 f8d5 	bl	8000e44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c9a:	230f      	movs	r3, #15
 8000c9c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ca6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000caa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cb0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	2105      	movs	r1, #5
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 fe4d 	bl	8001958 <HAL_RCC_ClockConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000cc4:	f000 f8be 	bl	8000e44 <Error_Handler>
  }
}
 8000cc8:	bf00      	nop
 8000cca:	3750      	adds	r7, #80	@ 0x50
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40007000 	.word	0x40007000

08000cd8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cde:	463b      	mov	r3, r7
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000cea:	4b16      	ldr	r3, [pc, #88]	@ (8000d44 <MX_TIM9_Init+0x6c>)
 8000cec:	4a16      	ldr	r2, [pc, #88]	@ (8000d48 <MX_TIM9_Init+0x70>)
 8000cee:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 5-1;
 8000cf0:	4b14      	ldr	r3, [pc, #80]	@ (8000d44 <MX_TIM9_Init+0x6c>)
 8000cf2:	2204      	movs	r2, #4
 8000cf4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <MX_TIM9_Init+0x6c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 3665;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <MX_TIM9_Init+0x6c>)
 8000cfe:	f640 6251 	movw	r2, #3665	@ 0xe51
 8000d02:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <MX_TIM9_Init+0x6c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <MX_TIM9_Init+0x6c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000d10:	480c      	ldr	r0, [pc, #48]	@ (8000d44 <MX_TIM9_Init+0x6c>)
 8000d12:	f001 fb83 	bl	800241c <HAL_TIM_Base_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8000d1c:	f000 f892 	bl	8000e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d24:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000d26:	463b      	mov	r3, r7
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4806      	ldr	r0, [pc, #24]	@ (8000d44 <MX_TIM9_Init+0x6c>)
 8000d2c:	f001 fd26 	bl	800277c <HAL_TIM_ConfigClockSource>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8000d36:	f000 f885 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000078 	.word	0x20000078
 8000d48:	40014000 	.word	0x40014000

08000d4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d50:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	@ (8000d9c <MX_USART2_UART_Init+0x50>)
 8000d54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d56:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d70:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d72:	220c      	movs	r2, #12
 8000d74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d76:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d82:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <MX_USART2_UART_Init+0x4c>)
 8000d84:	f001 ff44 	bl	8002c10 <HAL_UART_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d8e:	f000 f859 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200000c0 	.word	0x200000c0
 8000d9c:	40004400 	.word	0x40004400

08000da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	f107 030c 	add.w	r3, r7, #12
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	4b1f      	ldr	r3, [pc, #124]	@ (8000e38 <MX_GPIO_Init+0x98>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a1e      	ldr	r2, [pc, #120]	@ (8000e38 <MX_GPIO_Init+0x98>)
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e38 <MX_GPIO_Init+0x98>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	4b18      	ldr	r3, [pc, #96]	@ (8000e38 <MX_GPIO_Init+0x98>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4a17      	ldr	r2, [pc, #92]	@ (8000e38 <MX_GPIO_Init+0x98>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <MX_GPIO_Init+0x98>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2120      	movs	r1, #32
 8000df2:	4812      	ldr	r0, [pc, #72]	@ (8000e3c <MX_GPIO_Init+0x9c>)
 8000df4:	f000 fd2c 	bl	8001850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000df8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480c      	ldr	r0, [pc, #48]	@ (8000e40 <MX_GPIO_Init+0xa0>)
 8000e0e:	f000 fb8b 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e12:	2320      	movs	r3, #32
 8000e14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	4619      	mov	r1, r3
 8000e28:	4804      	ldr	r0, [pc, #16]	@ (8000e3c <MX_GPIO_Init+0x9c>)
 8000e2a:	f000 fb7d 	bl	8001528 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e2e:	bf00      	nop
 8000e30:	3720      	adds	r7, #32
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020000 	.word	0x40020000
 8000e40:	40020800 	.word	0x40020800

08000e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e48:	b672      	cpsid	i
}
 8000e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <Error_Handler+0x8>

08000e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <HAL_MspInit+0x4c>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e9c <HAL_MspInit+0x4c>)
 8000e60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e66:	4b0d      	ldr	r3, [pc, #52]	@ (8000e9c <HAL_MspInit+0x4c>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	603b      	str	r3, [r7, #0]
 8000e76:	4b09      	ldr	r3, [pc, #36]	@ (8000e9c <HAL_MspInit+0x4c>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7a:	4a08      	ldr	r2, [pc, #32]	@ (8000e9c <HAL_MspInit+0x4c>)
 8000e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e82:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <HAL_MspInit+0x4c>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0e      	ldr	r2, [pc, #56]	@ (8000ee8 <HAL_TIM_Base_MspInit+0x48>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d115      	bne.n	8000ede <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <HAL_TIM_Base_MspInit+0x4c>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eba:	4a0c      	ldr	r2, [pc, #48]	@ (8000eec <HAL_TIM_Base_MspInit+0x4c>)
 8000ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ec0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8000eec <HAL_TIM_Base_MspInit+0x4c>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2018      	movs	r0, #24
 8000ed4:	f000 fa5f 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000ed8:	2018      	movs	r0, #24
 8000eda:	f000 fa78 	bl	80013ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM9_MspInit 1 */

  }

}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40014000 	.word	0x40014000
 8000eec:	40023800 	.word	0x40023800

08000ef0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	@ 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000f84 <HAL_UART_MspInit+0x94>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d133      	bne.n	8000f7a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b1c      	ldr	r3, [pc, #112]	@ (8000f88 <HAL_UART_MspInit+0x98>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8000f88 <HAL_UART_MspInit+0x98>)
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f22:	4b19      	ldr	r3, [pc, #100]	@ (8000f88 <HAL_UART_MspInit+0x98>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <HAL_UART_MspInit+0x98>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	4a14      	ldr	r2, [pc, #80]	@ (8000f88 <HAL_UART_MspInit+0x98>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3e:	4b12      	ldr	r3, [pc, #72]	@ (8000f88 <HAL_UART_MspInit+0x98>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f4a:	230c      	movs	r3, #12
 8000f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f56:	2303      	movs	r3, #3
 8000f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	4809      	ldr	r0, [pc, #36]	@ (8000f8c <HAL_UART_MspInit+0x9c>)
 8000f66:	f000 fadf 	bl	8001528 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2026      	movs	r0, #38	@ 0x26
 8000f70:	f000 fa11 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f74:	2026      	movs	r0, #38	@ 0x26
 8000f76:	f000 fa2a 	bl	80013ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	@ 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40004400 	.word	0x40004400
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020000 	.word	0x40020000

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <NMI_Handler+0x4>

08000f98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <HardFault_Handler+0x4>

08000fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <MemManage_Handler+0x4>

08000fa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <BusFault_Handler+0x4>

08000fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <UsageFault_Handler+0x4>

08000fb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe6:	f000 f8db 	bl	80011a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000ff4:	4802      	ldr	r0, [pc, #8]	@ (8001000 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000ff6:	f001 fad1 	bl	800259c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000078 	.word	0x20000078

08001004 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001008:	4802      	ldr	r0, [pc, #8]	@ (8001014 <USART2_IRQHandler+0x10>)
 800100a:	f001 ff01 	bl	8002e10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200000c0 	.word	0x200000c0

08001018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001020:	4a14      	ldr	r2, [pc, #80]	@ (8001074 <_sbrk+0x5c>)
 8001022:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <_sbrk+0x60>)
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800102c:	4b13      	ldr	r3, [pc, #76]	@ (800107c <_sbrk+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d102      	bne.n	800103a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001034:	4b11      	ldr	r3, [pc, #68]	@ (800107c <_sbrk+0x64>)
 8001036:	4a12      	ldr	r2, [pc, #72]	@ (8001080 <_sbrk+0x68>)
 8001038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800103a:	4b10      	ldr	r3, [pc, #64]	@ (800107c <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	429a      	cmp	r2, r3
 8001046:	d207      	bcs.n	8001058 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001048:	f003 fa88 	bl	800455c <__errno>
 800104c:	4603      	mov	r3, r0
 800104e:	220c      	movs	r2, #12
 8001050:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	e009      	b.n	800106c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001058:	4b08      	ldr	r3, [pc, #32]	@ (800107c <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800105e:	4b07      	ldr	r3, [pc, #28]	@ (800107c <_sbrk+0x64>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	4a05      	ldr	r2, [pc, #20]	@ (800107c <_sbrk+0x64>)
 8001068:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800106a:	68fb      	ldr	r3, [r7, #12]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20020000 	.word	0x20020000
 8001078:	00000400 	.word	0x00000400
 800107c:	20000348 	.word	0x20000348
 8001080:	20000498 	.word	0x20000498

08001084 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <SystemInit+0x20>)
 800108a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800108e:	4a05      	ldr	r2, [pc, #20]	@ (80010a4 <SystemInit+0x20>)
 8001090:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001094:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010ac:	f7ff ffea 	bl	8001084 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010b0:	480c      	ldr	r0, [pc, #48]	@ (80010e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010b2:	490d      	ldr	r1, [pc, #52]	@ (80010e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010b4:	4a0d      	ldr	r2, [pc, #52]	@ (80010ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b8:	e002      	b.n	80010c0 <LoopCopyDataInit>

080010ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010be:	3304      	adds	r3, #4

080010c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c4:	d3f9      	bcc.n	80010ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c6:	4a0a      	ldr	r2, [pc, #40]	@ (80010f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010c8:	4c0a      	ldr	r4, [pc, #40]	@ (80010f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010cc:	e001      	b.n	80010d2 <LoopFillZerobss>

080010ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d0:	3204      	adds	r2, #4

080010d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d4:	d3fb      	bcc.n	80010ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80010d6:	f003 fa47 	bl	8004568 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010da:	f7ff fcfb 	bl	8000ad4 <main>
  bx  lr    
 80010de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010ec:	08004f80 	.word	0x08004f80
  ldr r2, =_sbss
 80010f0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010f4:	20000498 	.word	0x20000498

080010f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f8:	e7fe      	b.n	80010f8 <ADC_IRQHandler>
	...

080010fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001100:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <HAL_Init+0x40>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0d      	ldr	r2, [pc, #52]	@ (800113c <HAL_Init+0x40>)
 8001106:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800110a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800110c:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <HAL_Init+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0a      	ldr	r2, [pc, #40]	@ (800113c <HAL_Init+0x40>)
 8001112:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001116:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001118:	4b08      	ldr	r3, [pc, #32]	@ (800113c <HAL_Init+0x40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a07      	ldr	r2, [pc, #28]	@ (800113c <HAL_Init+0x40>)
 800111e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001122:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001124:	2003      	movs	r0, #3
 8001126:	f000 f92b 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112a:	200f      	movs	r0, #15
 800112c:	f000 f808 	bl	8001140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001130:	f7ff fe8e 	bl	8000e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023c00 	.word	0x40023c00

08001140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001148:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <HAL_InitTick+0x54>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <HAL_InitTick+0x58>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001156:	fbb3 f3f1 	udiv	r3, r3, r1
 800115a:	fbb2 f3f3 	udiv	r3, r2, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f943 	bl	80013ea <HAL_SYSTICK_Config>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e00e      	b.n	800118c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b0f      	cmp	r3, #15
 8001172:	d80a      	bhi.n	800118a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001174:	2200      	movs	r2, #0
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f000 f90b 	bl	8001396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001180:	4a06      	ldr	r2, [pc, #24]	@ (800119c <HAL_InitTick+0x5c>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	e000      	b.n	800118c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000000 	.word	0x20000000
 8001198:	20000008 	.word	0x20000008
 800119c:	20000004 	.word	0x20000004

080011a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a4:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <HAL_IncTick+0x20>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <HAL_IncTick+0x24>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4a04      	ldr	r2, [pc, #16]	@ (80011c4 <HAL_IncTick+0x24>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000008 	.word	0x20000008
 80011c4:	2000034c 	.word	0x2000034c

080011c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b03      	ldr	r3, [pc, #12]	@ (80011dc <HAL_GetTick+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	2000034c 	.word	0x2000034c

080011e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011fc:	4013      	ands	r3, r2
 80011fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001208:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800120c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800122c:	4b04      	ldr	r3, [pc, #16]	@ (8001240 <__NVIC_GetPriorityGrouping+0x18>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f003 0307 	and.w	r3, r3, #7
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	2b00      	cmp	r3, #0
 8001254:	db0b      	blt.n	800126e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	f003 021f 	and.w	r2, r3, #31
 800125c:	4907      	ldr	r1, [pc, #28]	@ (800127c <__NVIC_EnableIRQ+0x38>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	095b      	lsrs	r3, r3, #5
 8001264:	2001      	movs	r0, #1
 8001266:	fa00 f202 	lsl.w	r2, r0, r2
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000e100 	.word	0xe000e100

08001280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	db0a      	blt.n	80012aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	490c      	ldr	r1, [pc, #48]	@ (80012cc <__NVIC_SetPriority+0x4c>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a8:	e00a      	b.n	80012c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4908      	ldr	r1, [pc, #32]	@ (80012d0 <__NVIC_SetPriority+0x50>)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	3b04      	subs	r3, #4
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	440b      	add	r3, r1
 80012be:	761a      	strb	r2, [r3, #24]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000e100 	.word	0xe000e100
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	@ 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f1c3 0307 	rsb	r3, r3, #7
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	bf28      	it	cs
 80012f2:	2304      	movcs	r3, #4
 80012f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3304      	adds	r3, #4
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d902      	bls.n	8001304 <NVIC_EncodePriority+0x30>
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3b03      	subs	r3, #3
 8001302:	e000      	b.n	8001306 <NVIC_EncodePriority+0x32>
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43d9      	mvns	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	4313      	orrs	r3, r2
         );
}
 800132e:	4618      	mov	r0, r3
 8001330:	3724      	adds	r7, #36	@ 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800134c:	d301      	bcc.n	8001352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134e:	2301      	movs	r3, #1
 8001350:	e00f      	b.n	8001372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001352:	4a0a      	ldr	r2, [pc, #40]	@ (800137c <SysTick_Config+0x40>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135a:	210f      	movs	r1, #15
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f7ff ff8e 	bl	8001280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001364:	4b05      	ldr	r3, [pc, #20]	@ (800137c <SysTick_Config+0x40>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136a:	4b04      	ldr	r3, [pc, #16]	@ (800137c <SysTick_Config+0x40>)
 800136c:	2207      	movs	r2, #7
 800136e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	e000e010 	.word	0xe000e010

08001380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff29 	bl	80011e0 <__NVIC_SetPriorityGrouping>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a8:	f7ff ff3e 	bl	8001228 <__NVIC_GetPriorityGrouping>
 80013ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	f7ff ff8e 	bl	80012d4 <NVIC_EncodePriority>
 80013b8:	4602      	mov	r2, r0
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff5d 	bl	8001280 <__NVIC_SetPriority>
}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff31 	bl	8001244 <__NVIC_EnableIRQ>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ffa2 	bl	800133c <SysTick_Config>
 80013f8:	4603      	mov	r3, r0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b084      	sub	sp, #16
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001410:	f7ff feda 	bl	80011c8 <HAL_GetTick>
 8001414:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d008      	beq.n	8001434 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2280      	movs	r2, #128	@ 0x80
 8001426:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e052      	b.n	80014da <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0216 	bic.w	r2, r2, #22
 8001442:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	695a      	ldr	r2, [r3, #20]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001452:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001458:	2b00      	cmp	r3, #0
 800145a:	d103      	bne.n	8001464 <HAL_DMA_Abort+0x62>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001460:	2b00      	cmp	r3, #0
 8001462:	d007      	beq.n	8001474 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 0208 	bic.w	r2, r2, #8
 8001472:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0201 	bic.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001484:	e013      	b.n	80014ae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001486:	f7ff fe9f 	bl	80011c8 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b05      	cmp	r3, #5
 8001492:	d90c      	bls.n	80014ae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2220      	movs	r2, #32
 8001498:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2203      	movs	r2, #3
 800149e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e015      	b.n	80014da <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1e4      	bne.n	8001486 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014c0:	223f      	movs	r2, #63	@ 0x3f
 80014c2:	409a      	lsls	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d004      	beq.n	8001500 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2280      	movs	r2, #128	@ 0x80
 80014fa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e00c      	b.n	800151a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2205      	movs	r2, #5
 8001504:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0201 	bic.w	r2, r2, #1
 8001516:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001528:	b480      	push	{r7}
 800152a:	b089      	sub	sp, #36	@ 0x24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
 8001542:	e165      	b.n	8001810 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001544:	2201      	movs	r2, #1
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	429a      	cmp	r2, r3
 800155e:	f040 8154 	bne.w	800180a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	2b01      	cmp	r3, #1
 800156c:	d005      	beq.n	800157a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001576:	2b02      	cmp	r3, #2
 8001578:	d130      	bne.n	80015dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	2203      	movs	r2, #3
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015b0:	2201      	movs	r2, #1
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	091b      	lsrs	r3, r3, #4
 80015c6:	f003 0201 	and.w	r2, r3, #1
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d017      	beq.n	8001618 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	2203      	movs	r2, #3
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d123      	bne.n	800166c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	08da      	lsrs	r2, r3, #3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3208      	adds	r2, #8
 800162c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	220f      	movs	r2, #15
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	691a      	ldr	r2, [r3, #16]
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	08da      	lsrs	r2, r3, #3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3208      	adds	r2, #8
 8001666:	69b9      	ldr	r1, [r7, #24]
 8001668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	2203      	movs	r2, #3
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0203 	and.w	r2, r3, #3
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 80ae 	beq.w	800180a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	4b5d      	ldr	r3, [pc, #372]	@ (8001828 <HAL_GPIO_Init+0x300>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b6:	4a5c      	ldr	r2, [pc, #368]	@ (8001828 <HAL_GPIO_Init+0x300>)
 80016b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80016be:	4b5a      	ldr	r3, [pc, #360]	@ (8001828 <HAL_GPIO_Init+0x300>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ca:	4a58      	ldr	r2, [pc, #352]	@ (800182c <HAL_GPIO_Init+0x304>)
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	089b      	lsrs	r3, r3, #2
 80016d0:	3302      	adds	r3, #2
 80016d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	220f      	movs	r2, #15
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4013      	ands	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a4f      	ldr	r2, [pc, #316]	@ (8001830 <HAL_GPIO_Init+0x308>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d025      	beq.n	8001742 <HAL_GPIO_Init+0x21a>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4e      	ldr	r2, [pc, #312]	@ (8001834 <HAL_GPIO_Init+0x30c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d01f      	beq.n	800173e <HAL_GPIO_Init+0x216>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4d      	ldr	r2, [pc, #308]	@ (8001838 <HAL_GPIO_Init+0x310>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d019      	beq.n	800173a <HAL_GPIO_Init+0x212>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4c      	ldr	r2, [pc, #304]	@ (800183c <HAL_GPIO_Init+0x314>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d013      	beq.n	8001736 <HAL_GPIO_Init+0x20e>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a4b      	ldr	r2, [pc, #300]	@ (8001840 <HAL_GPIO_Init+0x318>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d00d      	beq.n	8001732 <HAL_GPIO_Init+0x20a>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a4a      	ldr	r2, [pc, #296]	@ (8001844 <HAL_GPIO_Init+0x31c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d007      	beq.n	800172e <HAL_GPIO_Init+0x206>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a49      	ldr	r2, [pc, #292]	@ (8001848 <HAL_GPIO_Init+0x320>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d101      	bne.n	800172a <HAL_GPIO_Init+0x202>
 8001726:	2306      	movs	r3, #6
 8001728:	e00c      	b.n	8001744 <HAL_GPIO_Init+0x21c>
 800172a:	2307      	movs	r3, #7
 800172c:	e00a      	b.n	8001744 <HAL_GPIO_Init+0x21c>
 800172e:	2305      	movs	r3, #5
 8001730:	e008      	b.n	8001744 <HAL_GPIO_Init+0x21c>
 8001732:	2304      	movs	r3, #4
 8001734:	e006      	b.n	8001744 <HAL_GPIO_Init+0x21c>
 8001736:	2303      	movs	r3, #3
 8001738:	e004      	b.n	8001744 <HAL_GPIO_Init+0x21c>
 800173a:	2302      	movs	r3, #2
 800173c:	e002      	b.n	8001744 <HAL_GPIO_Init+0x21c>
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <HAL_GPIO_Init+0x21c>
 8001742:	2300      	movs	r3, #0
 8001744:	69fa      	ldr	r2, [r7, #28]
 8001746:	f002 0203 	and.w	r2, r2, #3
 800174a:	0092      	lsls	r2, r2, #2
 800174c:	4093      	lsls	r3, r2
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001754:	4935      	ldr	r1, [pc, #212]	@ (800182c <HAL_GPIO_Init+0x304>)
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	089b      	lsrs	r3, r3, #2
 800175a:	3302      	adds	r3, #2
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001762:	4b3a      	ldr	r3, [pc, #232]	@ (800184c <HAL_GPIO_Init+0x324>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	43db      	mvns	r3, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4013      	ands	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001786:	4a31      	ldr	r2, [pc, #196]	@ (800184c <HAL_GPIO_Init+0x324>)
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800178c:	4b2f      	ldr	r3, [pc, #188]	@ (800184c <HAL_GPIO_Init+0x324>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d003      	beq.n	80017b0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017b0:	4a26      	ldr	r2, [pc, #152]	@ (800184c <HAL_GPIO_Init+0x324>)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017b6:	4b25      	ldr	r3, [pc, #148]	@ (800184c <HAL_GPIO_Init+0x324>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	43db      	mvns	r3, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4013      	ands	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017da:	4a1c      	ldr	r2, [pc, #112]	@ (800184c <HAL_GPIO_Init+0x324>)
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017e0:	4b1a      	ldr	r3, [pc, #104]	@ (800184c <HAL_GPIO_Init+0x324>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001804:	4a11      	ldr	r2, [pc, #68]	@ (800184c <HAL_GPIO_Init+0x324>)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3301      	adds	r3, #1
 800180e:	61fb      	str	r3, [r7, #28]
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	2b0f      	cmp	r3, #15
 8001814:	f67f ae96 	bls.w	8001544 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001818:	bf00      	nop
 800181a:	bf00      	nop
 800181c:	3724      	adds	r7, #36	@ 0x24
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800
 800182c:	40013800 	.word	0x40013800
 8001830:	40020000 	.word	0x40020000
 8001834:	40020400 	.word	0x40020400
 8001838:	40020800 	.word	0x40020800
 800183c:	40020c00 	.word	0x40020c00
 8001840:	40021000 	.word	0x40021000
 8001844:	40021400 	.word	0x40021400
 8001848:	40021800 	.word	0x40021800
 800184c:	40013c00 	.word	0x40013c00

08001850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	807b      	strh	r3, [r7, #2]
 800185c:	4613      	mov	r3, r2
 800185e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001860:	787b      	ldrb	r3, [r7, #1]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001866:	887a      	ldrh	r2, [r7, #2]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800186c:	e003      	b.n	8001876 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800186e:	887b      	ldrh	r3, [r7, #2]
 8001870:	041a      	lsls	r2, r3, #16
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	619a      	str	r2, [r3, #24]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001882:	b480      	push	{r7}
 8001884:	b085      	sub	sp, #20
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	460b      	mov	r3, r1
 800188c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001894:	887a      	ldrh	r2, [r7, #2]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4013      	ands	r3, r2
 800189a:	041a      	lsls	r2, r3, #16
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	43d9      	mvns	r1, r3
 80018a0:	887b      	ldrh	r3, [r7, #2]
 80018a2:	400b      	ands	r3, r1
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	619a      	str	r2, [r3, #24]
}
 80018aa:	bf00      	nop
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	603b      	str	r3, [r7, #0]
 80018c6:	4b20      	ldr	r3, [pc, #128]	@ (8001948 <HAL_PWREx_EnableOverDrive+0x90>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001948 <HAL_PWREx_EnableOverDrive+0x90>)
 80018cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001948 <HAL_PWREx_EnableOverDrive+0x90>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80018de:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <HAL_PWREx_EnableOverDrive+0x94>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018e4:	f7ff fc70 	bl	80011c8 <HAL_GetTick>
 80018e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018ea:	e009      	b.n	8001900 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018ec:	f7ff fc6c 	bl	80011c8 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018fa:	d901      	bls.n	8001900 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e01f      	b.n	8001940 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001900:	4b13      	ldr	r3, [pc, #76]	@ (8001950 <HAL_PWREx_EnableOverDrive+0x98>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800190c:	d1ee      	bne.n	80018ec <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800190e:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001910:	2201      	movs	r2, #1
 8001912:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001914:	f7ff fc58 	bl	80011c8 <HAL_GetTick>
 8001918:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800191a:	e009      	b.n	8001930 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800191c:	f7ff fc54 	bl	80011c8 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800192a:	d901      	bls.n	8001930 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e007      	b.n	8001940 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001930:	4b07      	ldr	r3, [pc, #28]	@ (8001950 <HAL_PWREx_EnableOverDrive+0x98>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001938:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800193c:	d1ee      	bne.n	800191c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40023800 	.word	0x40023800
 800194c:	420e0040 	.word	0x420e0040
 8001950:	40007000 	.word	0x40007000
 8001954:	420e0044 	.word	0x420e0044

08001958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e0cc      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800196c:	4b68      	ldr	r3, [pc, #416]	@ (8001b10 <HAL_RCC_ClockConfig+0x1b8>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 030f 	and.w	r3, r3, #15
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d90c      	bls.n	8001994 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197a:	4b65      	ldr	r3, [pc, #404]	@ (8001b10 <HAL_RCC_ClockConfig+0x1b8>)
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001982:	4b63      	ldr	r3, [pc, #396]	@ (8001b10 <HAL_RCC_ClockConfig+0x1b8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0b8      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d020      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d005      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019ac:	4b59      	ldr	r3, [pc, #356]	@ (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	4a58      	ldr	r2, [pc, #352]	@ (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0308 	and.w	r3, r3, #8
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019c4:	4b53      	ldr	r3, [pc, #332]	@ (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	4a52      	ldr	r2, [pc, #328]	@ (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d0:	4b50      	ldr	r3, [pc, #320]	@ (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	494d      	ldr	r1, [pc, #308]	@ (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d044      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d107      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f6:	4b47      	ldr	r3, [pc, #284]	@ (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d119      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e07f      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d003      	beq.n	8001a16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d107      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a16:	4b3f      	ldr	r3, [pc, #252]	@ (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d109      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e06f      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a26:	4b3b      	ldr	r3, [pc, #236]	@ (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e067      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a36:	4b37      	ldr	r3, [pc, #220]	@ (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f023 0203 	bic.w	r2, r3, #3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	4934      	ldr	r1, [pc, #208]	@ (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a48:	f7ff fbbe 	bl	80011c8 <HAL_GetTick>
 8001a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4e:	e00a      	b.n	8001a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a50:	f7ff fbba 	bl	80011c8 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e04f      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a66:	4b2b      	ldr	r3, [pc, #172]	@ (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 020c 	and.w	r2, r3, #12
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d1eb      	bne.n	8001a50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a78:	4b25      	ldr	r3, [pc, #148]	@ (8001b10 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 030f 	and.w	r3, r3, #15
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d20c      	bcs.n	8001aa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	4b22      	ldr	r3, [pc, #136]	@ (8001b10 <HAL_RCC_ClockConfig+0x1b8>)
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8e:	4b20      	ldr	r3, [pc, #128]	@ (8001b10 <HAL_RCC_ClockConfig+0x1b8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d001      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e032      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d008      	beq.n	8001abe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aac:	4b19      	ldr	r3, [pc, #100]	@ (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	4916      	ldr	r1, [pc, #88]	@ (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d009      	beq.n	8001ade <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aca:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	490e      	ldr	r1, [pc, #56]	@ (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ade:	f000 f855 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	091b      	lsrs	r3, r3, #4
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	490a      	ldr	r1, [pc, #40]	@ (8001b18 <HAL_RCC_ClockConfig+0x1c0>)
 8001af0:	5ccb      	ldrb	r3, [r1, r3]
 8001af2:	fa22 f303 	lsr.w	r3, r2, r3
 8001af6:	4a09      	ldr	r2, [pc, #36]	@ (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 8001af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001afa:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fb1e 	bl	8001140 <HAL_InitTick>

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023c00 	.word	0x40023c00
 8001b14:	40023800 	.word	0x40023800
 8001b18:	08004f0c 	.word	0x08004f0c
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	20000004 	.word	0x20000004

08001b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b28:	4b03      	ldr	r3, [pc, #12]	@ (8001b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000000 	.word	0x20000000

08001b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b40:	f7ff fff0 	bl	8001b24 <HAL_RCC_GetHCLKFreq>
 8001b44:	4602      	mov	r2, r0
 8001b46:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	0a9b      	lsrs	r3, r3, #10
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	4903      	ldr	r1, [pc, #12]	@ (8001b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b52:	5ccb      	ldrb	r3, [r1, r3]
 8001b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	08004f1c 	.word	0x08004f1c

08001b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b68:	f7ff ffdc 	bl	8001b24 <HAL_RCC_GetHCLKFreq>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	4b05      	ldr	r3, [pc, #20]	@ (8001b84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	0b5b      	lsrs	r3, r3, #13
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	4903      	ldr	r1, [pc, #12]	@ (8001b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b7a:	5ccb      	ldrb	r3, [r1, r3]
 8001b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40023800 	.word	0x40023800
 8001b88:	08004f1c 	.word	0x08004f1c

08001b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b90:	b0a6      	sub	sp, #152	@ 0x98
 8001b92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bb2:	4bc8      	ldr	r3, [pc, #800]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b0c      	cmp	r3, #12
 8001bbc:	f200 817e 	bhi.w	8001ebc <HAL_RCC_GetSysClockFreq+0x330>
 8001bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8001bc8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc6:	bf00      	nop
 8001bc8:	08001bfd 	.word	0x08001bfd
 8001bcc:	08001ebd 	.word	0x08001ebd
 8001bd0:	08001ebd 	.word	0x08001ebd
 8001bd4:	08001ebd 	.word	0x08001ebd
 8001bd8:	08001c05 	.word	0x08001c05
 8001bdc:	08001ebd 	.word	0x08001ebd
 8001be0:	08001ebd 	.word	0x08001ebd
 8001be4:	08001ebd 	.word	0x08001ebd
 8001be8:	08001c0d 	.word	0x08001c0d
 8001bec:	08001ebd 	.word	0x08001ebd
 8001bf0:	08001ebd 	.word	0x08001ebd
 8001bf4:	08001ebd 	.word	0x08001ebd
 8001bf8:	08001d77 	.word	0x08001d77
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bfc:	4bb6      	ldr	r3, [pc, #728]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001bfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8001c02:	e15f      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c04:	4bb5      	ldr	r3, [pc, #724]	@ (8001edc <HAL_RCC_GetSysClockFreq+0x350>)
 8001c06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001c0a:	e15b      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c0c:	4bb1      	ldr	r3, [pc, #708]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c18:	4bae      	ldr	r3, [pc, #696]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d031      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c24:	4bab      	ldr	r3, [pc, #684]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	099b      	lsrs	r3, r3, #6
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001c2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001c30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c36:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c38:	2300      	movs	r3, #0
 8001c3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c3c:	4ba7      	ldr	r3, [pc, #668]	@ (8001edc <HAL_RCC_GetSysClockFreq+0x350>)
 8001c3e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001c42:	462a      	mov	r2, r5
 8001c44:	fb03 f202 	mul.w	r2, r3, r2
 8001c48:	2300      	movs	r3, #0
 8001c4a:	4621      	mov	r1, r4
 8001c4c:	fb01 f303 	mul.w	r3, r1, r3
 8001c50:	4413      	add	r3, r2
 8001c52:	4aa2      	ldr	r2, [pc, #648]	@ (8001edc <HAL_RCC_GetSysClockFreq+0x350>)
 8001c54:	4621      	mov	r1, r4
 8001c56:	fba1 1202 	umull	r1, r2, r1, r2
 8001c5a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001c5c:	460a      	mov	r2, r1
 8001c5e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001c60:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001c62:	4413      	add	r3, r2
 8001c64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001c66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001c6e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001c70:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c74:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001c78:	f7fe fb22 	bl	80002c0 <__aeabi_uldivmod>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4613      	mov	r3, r2
 8001c82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c86:	e064      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c88:	4b92      	ldr	r3, [pc, #584]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	099b      	lsrs	r3, r3, #6
 8001c8e:	2200      	movs	r2, #0
 8001c90:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c92:	657a      	str	r2, [r7, #84]	@ 0x54
 8001c94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ca0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001ca4:	4622      	mov	r2, r4
 8001ca6:	462b      	mov	r3, r5
 8001ca8:	f04f 0000 	mov.w	r0, #0
 8001cac:	f04f 0100 	mov.w	r1, #0
 8001cb0:	0159      	lsls	r1, r3, #5
 8001cb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cb6:	0150      	lsls	r0, r2, #5
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4621      	mov	r1, r4
 8001cbe:	1a51      	subs	r1, r2, r1
 8001cc0:	6139      	str	r1, [r7, #16]
 8001cc2:	4629      	mov	r1, r5
 8001cc4:	eb63 0301 	sbc.w	r3, r3, r1
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cd6:	4659      	mov	r1, fp
 8001cd8:	018b      	lsls	r3, r1, #6
 8001cda:	4651      	mov	r1, sl
 8001cdc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ce0:	4651      	mov	r1, sl
 8001ce2:	018a      	lsls	r2, r1, #6
 8001ce4:	4651      	mov	r1, sl
 8001ce6:	ebb2 0801 	subs.w	r8, r2, r1
 8001cea:	4659      	mov	r1, fp
 8001cec:	eb63 0901 	sbc.w	r9, r3, r1
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cfc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d04:	4690      	mov	r8, r2
 8001d06:	4699      	mov	r9, r3
 8001d08:	4623      	mov	r3, r4
 8001d0a:	eb18 0303 	adds.w	r3, r8, r3
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	462b      	mov	r3, r5
 8001d12:	eb49 0303 	adc.w	r3, r9, r3
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d24:	4629      	mov	r1, r5
 8001d26:	028b      	lsls	r3, r1, #10
 8001d28:	4621      	mov	r1, r4
 8001d2a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d2e:	4621      	mov	r1, r4
 8001d30:	028a      	lsls	r2, r1, #10
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8001d40:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001d44:	f7fe fabc 	bl	80002c0 <__aeabi_uldivmod>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d52:	4b60      	ldr	r3, [pc, #384]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	0c1b      	lsrs	r3, r3, #16
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8001d64:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001d68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001d74:	e0a6      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d76:	4b57      	ldr	r3, [pc, #348]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d82:	4b54      	ldr	r3, [pc, #336]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d02a      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d8e:	4b51      	ldr	r3, [pc, #324]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	099b      	lsrs	r3, r3, #6
 8001d94:	2200      	movs	r2, #0
 8001d96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d98:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001da0:	2100      	movs	r1, #0
 8001da2:	4b4e      	ldr	r3, [pc, #312]	@ (8001edc <HAL_RCC_GetSysClockFreq+0x350>)
 8001da4:	fb03 f201 	mul.w	r2, r3, r1
 8001da8:	2300      	movs	r3, #0
 8001daa:	fb00 f303 	mul.w	r3, r0, r3
 8001dae:	4413      	add	r3, r2
 8001db0:	4a4a      	ldr	r2, [pc, #296]	@ (8001edc <HAL_RCC_GetSysClockFreq+0x350>)
 8001db2:	fba0 1202 	umull	r1, r2, r0, r2
 8001db6:	677a      	str	r2, [r7, #116]	@ 0x74
 8001db8:	460a      	mov	r2, r1
 8001dba:	673a      	str	r2, [r7, #112]	@ 0x70
 8001dbc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001dbe:	4413      	add	r3, r2
 8001dc0:	677b      	str	r3, [r7, #116]	@ 0x74
 8001dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dca:	637a      	str	r2, [r7, #52]	@ 0x34
 8001dcc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001dd0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001dd4:	f7fe fa74 	bl	80002c0 <__aeabi_uldivmod>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4613      	mov	r3, r2
 8001dde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001de2:	e05b      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001de4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	099b      	lsrs	r3, r3, #6
 8001dea:	2200      	movs	r2, #0
 8001dec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001df6:	623b      	str	r3, [r7, #32]
 8001df8:	2300      	movs	r3, #0
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e00:	4642      	mov	r2, r8
 8001e02:	464b      	mov	r3, r9
 8001e04:	f04f 0000 	mov.w	r0, #0
 8001e08:	f04f 0100 	mov.w	r1, #0
 8001e0c:	0159      	lsls	r1, r3, #5
 8001e0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e12:	0150      	lsls	r0, r2, #5
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4641      	mov	r1, r8
 8001e1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e1e:	4649      	mov	r1, r9
 8001e20:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e38:	ebb2 040a 	subs.w	r4, r2, sl
 8001e3c:	eb63 050b 	sbc.w	r5, r3, fp
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	f04f 0300 	mov.w	r3, #0
 8001e48:	00eb      	lsls	r3, r5, #3
 8001e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e4e:	00e2      	lsls	r2, r4, #3
 8001e50:	4614      	mov	r4, r2
 8001e52:	461d      	mov	r5, r3
 8001e54:	4643      	mov	r3, r8
 8001e56:	18e3      	adds	r3, r4, r3
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	464b      	mov	r3, r9
 8001e5c:	eb45 0303 	adc.w	r3, r5, r3
 8001e60:	607b      	str	r3, [r7, #4]
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	f04f 0300 	mov.w	r3, #0
 8001e6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e6e:	4629      	mov	r1, r5
 8001e70:	028b      	lsls	r3, r1, #10
 8001e72:	4621      	mov	r1, r4
 8001e74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e78:	4621      	mov	r1, r4
 8001e7a:	028a      	lsls	r2, r1, #10
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e84:	2200      	movs	r2, #0
 8001e86:	61bb      	str	r3, [r7, #24]
 8001e88:	61fa      	str	r2, [r7, #28]
 8001e8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e8e:	f7fe fa17 	bl	80002c0 <__aeabi_uldivmod>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4613      	mov	r3, r2
 8001e98:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	0f1b      	lsrs	r3, r3, #28
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8001eaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001eae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001eba:	e003      	b.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001ebe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001ec2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ec4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3798      	adds	r7, #152	@ 0x98
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	00f42400 	.word	0x00f42400
 8001edc:	017d7840 	.word	0x017d7840

08001ee0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e28d      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 8083 	beq.w	8002006 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f00:	4b94      	ldr	r3, [pc, #592]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d019      	beq.n	8001f40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f0c:	4b91      	ldr	r3, [pc, #580]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d106      	bne.n	8001f26 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f18:	4b8e      	ldr	r3, [pc, #568]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f24:	d00c      	beq.n	8001f40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f26:	4b8b      	ldr	r3, [pc, #556]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f2e:	2b0c      	cmp	r3, #12
 8001f30:	d112      	bne.n	8001f58 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f32:	4b88      	ldr	r3, [pc, #544]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f3e:	d10b      	bne.n	8001f58 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	4b84      	ldr	r3, [pc, #528]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d05b      	beq.n	8002004 <HAL_RCC_OscConfig+0x124>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d157      	bne.n	8002004 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e25a      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f60:	d106      	bne.n	8001f70 <HAL_RCC_OscConfig+0x90>
 8001f62:	4b7c      	ldr	r3, [pc, #496]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a7b      	ldr	r2, [pc, #492]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e01d      	b.n	8001fac <HAL_RCC_OscConfig+0xcc>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f78:	d10c      	bne.n	8001f94 <HAL_RCC_OscConfig+0xb4>
 8001f7a:	4b76      	ldr	r3, [pc, #472]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a75      	ldr	r2, [pc, #468]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	4b73      	ldr	r3, [pc, #460]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a72      	ldr	r2, [pc, #456]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e00b      	b.n	8001fac <HAL_RCC_OscConfig+0xcc>
 8001f94:	4b6f      	ldr	r3, [pc, #444]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a6e      	ldr	r2, [pc, #440]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	4b6c      	ldr	r3, [pc, #432]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a6b      	ldr	r2, [pc, #428]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001fa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d013      	beq.n	8001fdc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb4:	f7ff f908 	bl	80011c8 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fbc:	f7ff f904 	bl	80011c8 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b64      	cmp	r3, #100	@ 0x64
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e21f      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fce:	4b61      	ldr	r3, [pc, #388]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCC_OscConfig+0xdc>
 8001fda:	e014      	b.n	8002006 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fdc:	f7ff f8f4 	bl	80011c8 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe4:	f7ff f8f0 	bl	80011c8 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b64      	cmp	r3, #100	@ 0x64
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e20b      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff6:	4b57      	ldr	r3, [pc, #348]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x104>
 8002002:	e000      	b.n	8002006 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d06f      	beq.n	80020f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002012:	4b50      	ldr	r3, [pc, #320]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b00      	cmp	r3, #0
 800201c:	d017      	beq.n	800204e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800201e:	4b4d      	ldr	r3, [pc, #308]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002026:	2b08      	cmp	r3, #8
 8002028:	d105      	bne.n	8002036 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800202a:	4b4a      	ldr	r3, [pc, #296]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00b      	beq.n	800204e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002036:	4b47      	ldr	r3, [pc, #284]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800203e:	2b0c      	cmp	r3, #12
 8002040:	d11c      	bne.n	800207c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002042:	4b44      	ldr	r3, [pc, #272]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d116      	bne.n	800207c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204e:	4b41      	ldr	r3, [pc, #260]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d005      	beq.n	8002066 <HAL_RCC_OscConfig+0x186>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d001      	beq.n	8002066 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e1d3      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002066:	4b3b      	ldr	r3, [pc, #236]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4937      	ldr	r1, [pc, #220]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207a:	e03a      	b.n	80020f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d020      	beq.n	80020c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002084:	4b34      	ldr	r3, [pc, #208]	@ (8002158 <HAL_RCC_OscConfig+0x278>)
 8002086:	2201      	movs	r2, #1
 8002088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208a:	f7ff f89d 	bl	80011c8 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002092:	f7ff f899 	bl	80011c8 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e1b4      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b0:	4b28      	ldr	r3, [pc, #160]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4925      	ldr	r1, [pc, #148]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	600b      	str	r3, [r1, #0]
 80020c4:	e015      	b.n	80020f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c6:	4b24      	ldr	r3, [pc, #144]	@ (8002158 <HAL_RCC_OscConfig+0x278>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7ff f87c 	bl	80011c8 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d4:	f7ff f878 	bl	80011c8 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e193      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d036      	beq.n	800216c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d016      	beq.n	8002134 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002106:	4b15      	ldr	r3, [pc, #84]	@ (800215c <HAL_RCC_OscConfig+0x27c>)
 8002108:	2201      	movs	r2, #1
 800210a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210c:	f7ff f85c 	bl	80011c8 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002114:	f7ff f858 	bl	80011c8 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e173      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002126:	4b0b      	ldr	r3, [pc, #44]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 8002128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f0      	beq.n	8002114 <HAL_RCC_OscConfig+0x234>
 8002132:	e01b      	b.n	800216c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002134:	4b09      	ldr	r3, [pc, #36]	@ (800215c <HAL_RCC_OscConfig+0x27c>)
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213a:	f7ff f845 	bl	80011c8 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002140:	e00e      	b.n	8002160 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002142:	f7ff f841 	bl	80011c8 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d907      	bls.n	8002160 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e15c      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
 8002154:	40023800 	.word	0x40023800
 8002158:	42470000 	.word	0x42470000
 800215c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002160:	4b8a      	ldr	r3, [pc, #552]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002162:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1ea      	bne.n	8002142 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 8097 	beq.w	80022a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800217a:	2300      	movs	r3, #0
 800217c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800217e:	4b83      	ldr	r3, [pc, #524]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10f      	bne.n	80021aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	4b7f      	ldr	r3, [pc, #508]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	4a7e      	ldr	r2, [pc, #504]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002198:	6413      	str	r3, [r2, #64]	@ 0x40
 800219a:	4b7c      	ldr	r3, [pc, #496]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a6:	2301      	movs	r3, #1
 80021a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021aa:	4b79      	ldr	r3, [pc, #484]	@ (8002390 <HAL_RCC_OscConfig+0x4b0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d118      	bne.n	80021e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021b6:	4b76      	ldr	r3, [pc, #472]	@ (8002390 <HAL_RCC_OscConfig+0x4b0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a75      	ldr	r2, [pc, #468]	@ (8002390 <HAL_RCC_OscConfig+0x4b0>)
 80021bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021c2:	f7ff f801 	bl	80011c8 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ca:	f7fe fffd 	bl	80011c8 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e118      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002390 <HAL_RCC_OscConfig+0x4b0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d106      	bne.n	80021fe <HAL_RCC_OscConfig+0x31e>
 80021f0:	4b66      	ldr	r3, [pc, #408]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 80021f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f4:	4a65      	ldr	r2, [pc, #404]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80021fc:	e01c      	b.n	8002238 <HAL_RCC_OscConfig+0x358>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2b05      	cmp	r3, #5
 8002204:	d10c      	bne.n	8002220 <HAL_RCC_OscConfig+0x340>
 8002206:	4b61      	ldr	r3, [pc, #388]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220a:	4a60      	ldr	r2, [pc, #384]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 800220c:	f043 0304 	orr.w	r3, r3, #4
 8002210:	6713      	str	r3, [r2, #112]	@ 0x70
 8002212:	4b5e      	ldr	r3, [pc, #376]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002216:	4a5d      	ldr	r2, [pc, #372]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6713      	str	r3, [r2, #112]	@ 0x70
 800221e:	e00b      	b.n	8002238 <HAL_RCC_OscConfig+0x358>
 8002220:	4b5a      	ldr	r3, [pc, #360]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002224:	4a59      	ldr	r2, [pc, #356]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002226:	f023 0301 	bic.w	r3, r3, #1
 800222a:	6713      	str	r3, [r2, #112]	@ 0x70
 800222c:	4b57      	ldr	r3, [pc, #348]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 800222e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002230:	4a56      	ldr	r2, [pc, #344]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002232:	f023 0304 	bic.w	r3, r3, #4
 8002236:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d015      	beq.n	800226c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002240:	f7fe ffc2 	bl	80011c8 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002246:	e00a      	b.n	800225e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002248:	f7fe ffbe 	bl	80011c8 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002256:	4293      	cmp	r3, r2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e0d7      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225e:	4b4b      	ldr	r3, [pc, #300]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0ee      	beq.n	8002248 <HAL_RCC_OscConfig+0x368>
 800226a:	e014      	b.n	8002296 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226c:	f7fe ffac 	bl	80011c8 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002272:	e00a      	b.n	800228a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002274:	f7fe ffa8 	bl	80011c8 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e0c1      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800228a:	4b40      	ldr	r3, [pc, #256]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 800228c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1ee      	bne.n	8002274 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002296:	7dfb      	ldrb	r3, [r7, #23]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d105      	bne.n	80022a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229c:	4b3b      	ldr	r3, [pc, #236]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 800229e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a0:	4a3a      	ldr	r2, [pc, #232]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 80022a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 80ad 	beq.w	800240c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022b2:	4b36      	ldr	r3, [pc, #216]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d060      	beq.n	8002380 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d145      	bne.n	8002352 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c6:	4b33      	ldr	r3, [pc, #204]	@ (8002394 <HAL_RCC_OscConfig+0x4b4>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7fe ff7c 	bl	80011c8 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d4:	f7fe ff78 	bl	80011c8 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e093      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e6:	4b29      	ldr	r3, [pc, #164]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69da      	ldr	r2, [r3, #28]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002300:	019b      	lsls	r3, r3, #6
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002308:	085b      	lsrs	r3, r3, #1
 800230a:	3b01      	subs	r3, #1
 800230c:	041b      	lsls	r3, r3, #16
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002314:	061b      	lsls	r3, r3, #24
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231c:	071b      	lsls	r3, r3, #28
 800231e:	491b      	ldr	r1, [pc, #108]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002320:	4313      	orrs	r3, r2
 8002322:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002324:	4b1b      	ldr	r3, [pc, #108]	@ (8002394 <HAL_RCC_OscConfig+0x4b4>)
 8002326:	2201      	movs	r2, #1
 8002328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232a:	f7fe ff4d 	bl	80011c8 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002332:	f7fe ff49 	bl	80011c8 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e064      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002344:	4b11      	ldr	r3, [pc, #68]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0f0      	beq.n	8002332 <HAL_RCC_OscConfig+0x452>
 8002350:	e05c      	b.n	800240c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002352:	4b10      	ldr	r3, [pc, #64]	@ (8002394 <HAL_RCC_OscConfig+0x4b4>)
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002358:	f7fe ff36 	bl	80011c8 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002360:	f7fe ff32 	bl	80011c8 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e04d      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002372:	4b06      	ldr	r3, [pc, #24]	@ (800238c <HAL_RCC_OscConfig+0x4ac>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0x480>
 800237e:	e045      	b.n	800240c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d107      	bne.n	8002398 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e040      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
 800238c:	40023800 	.word	0x40023800
 8002390:	40007000 	.word	0x40007000
 8002394:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002398:	4b1f      	ldr	r3, [pc, #124]	@ (8002418 <HAL_RCC_OscConfig+0x538>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d030      	beq.n	8002408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d129      	bne.n	8002408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023be:	429a      	cmp	r2, r3
 80023c0:	d122      	bne.n	8002408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023c8:	4013      	ands	r3, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d119      	bne.n	8002408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023de:	085b      	lsrs	r3, r3, #1
 80023e0:	3b01      	subs	r3, #1
 80023e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d10f      	bne.n	8002408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d107      	bne.n	8002408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800

0800241c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e041      	b.n	80024b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d106      	bne.n	8002448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7fe fd2c 	bl	8000ea0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3304      	adds	r3, #4
 8002458:	4619      	mov	r1, r3
 800245a:	4610      	mov	r0, r2
 800245c:	f000 fa7e 	bl	800295c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d001      	beq.n	80024d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e04e      	b.n	8002572 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a23      	ldr	r2, [pc, #140]	@ (8002580 <HAL_TIM_Base_Start_IT+0xc4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d022      	beq.n	800253c <HAL_TIM_Base_Start_IT+0x80>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024fe:	d01d      	beq.n	800253c <HAL_TIM_Base_Start_IT+0x80>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a1f      	ldr	r2, [pc, #124]	@ (8002584 <HAL_TIM_Base_Start_IT+0xc8>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d018      	beq.n	800253c <HAL_TIM_Base_Start_IT+0x80>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a1e      	ldr	r2, [pc, #120]	@ (8002588 <HAL_TIM_Base_Start_IT+0xcc>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d013      	beq.n	800253c <HAL_TIM_Base_Start_IT+0x80>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a1c      	ldr	r2, [pc, #112]	@ (800258c <HAL_TIM_Base_Start_IT+0xd0>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00e      	beq.n	800253c <HAL_TIM_Base_Start_IT+0x80>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1b      	ldr	r2, [pc, #108]	@ (8002590 <HAL_TIM_Base_Start_IT+0xd4>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d009      	beq.n	800253c <HAL_TIM_Base_Start_IT+0x80>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a19      	ldr	r2, [pc, #100]	@ (8002594 <HAL_TIM_Base_Start_IT+0xd8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d004      	beq.n	800253c <HAL_TIM_Base_Start_IT+0x80>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a18      	ldr	r2, [pc, #96]	@ (8002598 <HAL_TIM_Base_Start_IT+0xdc>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d111      	bne.n	8002560 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b06      	cmp	r3, #6
 800254c:	d010      	beq.n	8002570 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0201 	orr.w	r2, r2, #1
 800255c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800255e:	e007      	b.n	8002570 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0201 	orr.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40010000 	.word	0x40010000
 8002584:	40000400 	.word	0x40000400
 8002588:	40000800 	.word	0x40000800
 800258c:	40000c00 	.word	0x40000c00
 8002590:	40010400 	.word	0x40010400
 8002594:	40014000 	.word	0x40014000
 8002598:	40001800 	.word	0x40001800

0800259c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d020      	beq.n	8002600 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d01b      	beq.n	8002600 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f06f 0202 	mvn.w	r2, #2
 80025d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f999 	bl	800291e <HAL_TIM_IC_CaptureCallback>
 80025ec:	e005      	b.n	80025fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f98b 	bl	800290a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f99c 	bl	8002932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b00      	cmp	r3, #0
 8002608:	d020      	beq.n	800264c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d01b      	beq.n	800264c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f06f 0204 	mvn.w	r2, #4
 800261c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2202      	movs	r2, #2
 8002622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f973 	bl	800291e <HAL_TIM_IC_CaptureCallback>
 8002638:	e005      	b.n	8002646 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f965 	bl	800290a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f976 	bl	8002932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d020      	beq.n	8002698 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	2b00      	cmp	r3, #0
 800265e:	d01b      	beq.n	8002698 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f06f 0208 	mvn.w	r2, #8
 8002668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2204      	movs	r2, #4
 800266e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f94d 	bl	800291e <HAL_TIM_IC_CaptureCallback>
 8002684:	e005      	b.n	8002692 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f93f 	bl	800290a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f950 	bl	8002932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d020      	beq.n	80026e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d01b      	beq.n	80026e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0210 	mvn.w	r2, #16
 80026b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2208      	movs	r2, #8
 80026ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f927 	bl	800291e <HAL_TIM_IC_CaptureCallback>
 80026d0:	e005      	b.n	80026de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f919 	bl	800290a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f92a 	bl	8002932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00c      	beq.n	8002708 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d007      	beq.n	8002708 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f06f 0201 	mvn.w	r2, #1
 8002700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7fe f998 	bl	8000a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00c      	beq.n	800272c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002718:	2b00      	cmp	r3, #0
 800271a:	d007      	beq.n	800272c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fa68 	bl	8002bfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00c      	beq.n	8002750 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800273c:	2b00      	cmp	r3, #0
 800273e:	d007      	beq.n	8002750 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f8fb 	bl	8002946 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	f003 0320 	and.w	r3, r3, #32
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00c      	beq.n	8002774 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b00      	cmp	r3, #0
 8002762:	d007      	beq.n	8002774 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f06f 0220 	mvn.w	r2, #32
 800276c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 fa3a 	bl	8002be8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002774:	bf00      	nop
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_TIM_ConfigClockSource+0x1c>
 8002794:	2302      	movs	r3, #2
 8002796:	e0b4      	b.n	8002902 <HAL_TIM_ConfigClockSource+0x186>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80027b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027d0:	d03e      	beq.n	8002850 <HAL_TIM_ConfigClockSource+0xd4>
 80027d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027d6:	f200 8087 	bhi.w	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
 80027da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027de:	f000 8086 	beq.w	80028ee <HAL_TIM_ConfigClockSource+0x172>
 80027e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027e6:	d87f      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
 80027e8:	2b70      	cmp	r3, #112	@ 0x70
 80027ea:	d01a      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0xa6>
 80027ec:	2b70      	cmp	r3, #112	@ 0x70
 80027ee:	d87b      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
 80027f0:	2b60      	cmp	r3, #96	@ 0x60
 80027f2:	d050      	beq.n	8002896 <HAL_TIM_ConfigClockSource+0x11a>
 80027f4:	2b60      	cmp	r3, #96	@ 0x60
 80027f6:	d877      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
 80027f8:	2b50      	cmp	r3, #80	@ 0x50
 80027fa:	d03c      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0xfa>
 80027fc:	2b50      	cmp	r3, #80	@ 0x50
 80027fe:	d873      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002800:	2b40      	cmp	r3, #64	@ 0x40
 8002802:	d058      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0x13a>
 8002804:	2b40      	cmp	r3, #64	@ 0x40
 8002806:	d86f      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002808:	2b30      	cmp	r3, #48	@ 0x30
 800280a:	d064      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x15a>
 800280c:	2b30      	cmp	r3, #48	@ 0x30
 800280e:	d86b      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002810:	2b20      	cmp	r3, #32
 8002812:	d060      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002814:	2b20      	cmp	r3, #32
 8002816:	d867      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002818:	2b00      	cmp	r3, #0
 800281a:	d05c      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x15a>
 800281c:	2b10      	cmp	r3, #16
 800281e:	d05a      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002820:	e062      	b.n	80028e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002832:	f000 f9b9 	bl	8002ba8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002844:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	609a      	str	r2, [r3, #8]
      break;
 800284e:	e04f      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002860:	f000 f9a2 	bl	8002ba8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002872:	609a      	str	r2, [r3, #8]
      break;
 8002874:	e03c      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002882:	461a      	mov	r2, r3
 8002884:	f000 f916 	bl	8002ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2150      	movs	r1, #80	@ 0x50
 800288e:	4618      	mov	r0, r3
 8002890:	f000 f96f 	bl	8002b72 <TIM_ITRx_SetConfig>
      break;
 8002894:	e02c      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028a2:	461a      	mov	r2, r3
 80028a4:	f000 f935 	bl	8002b12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2160      	movs	r1, #96	@ 0x60
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 f95f 	bl	8002b72 <TIM_ITRx_SetConfig>
      break;
 80028b4:	e01c      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c2:	461a      	mov	r2, r3
 80028c4:	f000 f8f6 	bl	8002ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2140      	movs	r1, #64	@ 0x40
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 f94f 	bl	8002b72 <TIM_ITRx_SetConfig>
      break;
 80028d4:	e00c      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4619      	mov	r1, r3
 80028e0:	4610      	mov	r0, r2
 80028e2:	f000 f946 	bl	8002b72 <TIM_ITRx_SetConfig>
      break;
 80028e6:	e003      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]
      break;
 80028ec:	e000      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002900:	7bfb      	ldrb	r3, [r7, #15]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a46      	ldr	r2, [pc, #280]	@ (8002a88 <TIM_Base_SetConfig+0x12c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d013      	beq.n	800299c <TIM_Base_SetConfig+0x40>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800297a:	d00f      	beq.n	800299c <TIM_Base_SetConfig+0x40>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a43      	ldr	r2, [pc, #268]	@ (8002a8c <TIM_Base_SetConfig+0x130>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d00b      	beq.n	800299c <TIM_Base_SetConfig+0x40>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a42      	ldr	r2, [pc, #264]	@ (8002a90 <TIM_Base_SetConfig+0x134>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d007      	beq.n	800299c <TIM_Base_SetConfig+0x40>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a41      	ldr	r2, [pc, #260]	@ (8002a94 <TIM_Base_SetConfig+0x138>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d003      	beq.n	800299c <TIM_Base_SetConfig+0x40>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a40      	ldr	r2, [pc, #256]	@ (8002a98 <TIM_Base_SetConfig+0x13c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d108      	bne.n	80029ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a35      	ldr	r2, [pc, #212]	@ (8002a88 <TIM_Base_SetConfig+0x12c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d02b      	beq.n	8002a0e <TIM_Base_SetConfig+0xb2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029bc:	d027      	beq.n	8002a0e <TIM_Base_SetConfig+0xb2>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a32      	ldr	r2, [pc, #200]	@ (8002a8c <TIM_Base_SetConfig+0x130>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d023      	beq.n	8002a0e <TIM_Base_SetConfig+0xb2>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a31      	ldr	r2, [pc, #196]	@ (8002a90 <TIM_Base_SetConfig+0x134>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d01f      	beq.n	8002a0e <TIM_Base_SetConfig+0xb2>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a30      	ldr	r2, [pc, #192]	@ (8002a94 <TIM_Base_SetConfig+0x138>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d01b      	beq.n	8002a0e <TIM_Base_SetConfig+0xb2>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a2f      	ldr	r2, [pc, #188]	@ (8002a98 <TIM_Base_SetConfig+0x13c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d017      	beq.n	8002a0e <TIM_Base_SetConfig+0xb2>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a2e      	ldr	r2, [pc, #184]	@ (8002a9c <TIM_Base_SetConfig+0x140>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d013      	beq.n	8002a0e <TIM_Base_SetConfig+0xb2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a2d      	ldr	r2, [pc, #180]	@ (8002aa0 <TIM_Base_SetConfig+0x144>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00f      	beq.n	8002a0e <TIM_Base_SetConfig+0xb2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a2c      	ldr	r2, [pc, #176]	@ (8002aa4 <TIM_Base_SetConfig+0x148>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00b      	beq.n	8002a0e <TIM_Base_SetConfig+0xb2>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a2b      	ldr	r2, [pc, #172]	@ (8002aa8 <TIM_Base_SetConfig+0x14c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d007      	beq.n	8002a0e <TIM_Base_SetConfig+0xb2>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a2a      	ldr	r2, [pc, #168]	@ (8002aac <TIM_Base_SetConfig+0x150>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d003      	beq.n	8002a0e <TIM_Base_SetConfig+0xb2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a29      	ldr	r2, [pc, #164]	@ (8002ab0 <TIM_Base_SetConfig+0x154>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d108      	bne.n	8002a20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a10      	ldr	r2, [pc, #64]	@ (8002a88 <TIM_Base_SetConfig+0x12c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d003      	beq.n	8002a54 <TIM_Base_SetConfig+0xf8>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a12      	ldr	r2, [pc, #72]	@ (8002a98 <TIM_Base_SetConfig+0x13c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d103      	bne.n	8002a5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d105      	bne.n	8002a7a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f023 0201 	bic.w	r2, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	611a      	str	r2, [r3, #16]
  }
}
 8002a7a:	bf00      	nop
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40010000 	.word	0x40010000
 8002a8c:	40000400 	.word	0x40000400
 8002a90:	40000800 	.word	0x40000800
 8002a94:	40000c00 	.word	0x40000c00
 8002a98:	40010400 	.word	0x40010400
 8002a9c:	40014000 	.word	0x40014000
 8002aa0:	40014400 	.word	0x40014400
 8002aa4:	40014800 	.word	0x40014800
 8002aa8:	40001800 	.word	0x40001800
 8002aac:	40001c00 	.word	0x40001c00
 8002ab0:	40002000 	.word	0x40002000

08002ab4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	f023 0201 	bic.w	r2, r3, #1
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f023 030a 	bic.w	r3, r3, #10
 8002af0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	621a      	str	r2, [r3, #32]
}
 8002b06:	bf00      	nop
 8002b08:	371c      	adds	r7, #28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b087      	sub	sp, #28
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	f023 0210 	bic.w	r2, r3, #16
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	031b      	lsls	r3, r3, #12
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	621a      	str	r2, [r3, #32]
}
 8002b66:	bf00      	nop
 8002b68:	371c      	adds	r7, #28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b085      	sub	sp, #20
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f043 0307 	orr.w	r3, r3, #7
 8002b94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	609a      	str	r2, [r3, #8]
}
 8002b9c:	bf00      	nop
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002bc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	021a      	lsls	r2, r3, #8
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	609a      	str	r2, [r3, #8]
}
 8002bdc:	bf00      	nop
 8002bde:	371c      	adds	r7, #28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e042      	b.n	8002ca8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fe f95a 	bl	8000ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2224      	movs	r2, #36	@ 0x24
 8002c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fdbd 	bl	80037d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	691a      	ldr	r2, [r3, #16]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695a      	ldr	r2, [r3, #20]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	@ 0x28
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	d175      	bne.n	8002dbc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <HAL_UART_Transmit+0x2c>
 8002cd6:	88fb      	ldrh	r3, [r7, #6]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e06e      	b.n	8002dbe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2221      	movs	r2, #33	@ 0x21
 8002cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cee:	f7fe fa6b 	bl	80011c8 <HAL_GetTick>
 8002cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	88fa      	ldrh	r2, [r7, #6]
 8002cf8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	88fa      	ldrh	r2, [r7, #6]
 8002cfe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d08:	d108      	bne.n	8002d1c <HAL_UART_Transmit+0x6c>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d104      	bne.n	8002d1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	61bb      	str	r3, [r7, #24]
 8002d1a:	e003      	b.n	8002d24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d24:	e02e      	b.n	8002d84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2180      	movs	r1, #128	@ 0x80
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 fb1f 	bl	8003374 <UART_WaitOnFlagUntilTimeout>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e03a      	b.n	8002dbe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10b      	bne.n	8002d66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	3302      	adds	r3, #2
 8002d62:	61bb      	str	r3, [r7, #24]
 8002d64:	e007      	b.n	8002d76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	781a      	ldrb	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	3301      	adds	r3, #1
 8002d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1cb      	bne.n	8002d26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2200      	movs	r2, #0
 8002d96:	2140      	movs	r1, #64	@ 0x40
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 faeb 	bl	8003374 <UART_WaitOnFlagUntilTimeout>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e006      	b.n	8002dbe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	e000      	b.n	8002dbe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002dbc:	2302      	movs	r3, #2
  }
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3720      	adds	r7, #32
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b20      	cmp	r3, #32
 8002dde:	d112      	bne.n	8002e06 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <HAL_UART_Receive_IT+0x26>
 8002de6:	88fb      	ldrh	r3, [r7, #6]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e00b      	b.n	8002e08 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002df6:	88fb      	ldrh	r3, [r7, #6]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 fb12 	bl	8003426 <UART_Start_Receive_IT>
 8002e02:	4603      	mov	r3, r0
 8002e04:	e000      	b.n	8002e08 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002e06:	2302      	movs	r3, #2
  }
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b0ba      	sub	sp, #232	@ 0xe8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002e4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10f      	bne.n	8002e76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e5a:	f003 0320 	and.w	r3, r3, #32
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d009      	beq.n	8002e76 <HAL_UART_IRQHandler+0x66>
 8002e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fbf2 	bl	8003658 <UART_Receive_IT>
      return;
 8002e74:	e25b      	b.n	800332e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 80de 	beq.w	800303c <HAL_UART_IRQHandler+0x22c>
 8002e80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d106      	bne.n	8002e9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e90:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 80d1 	beq.w	800303c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00b      	beq.n	8002ebe <HAL_UART_IRQHandler+0xae>
 8002ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d005      	beq.n	8002ebe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb6:	f043 0201 	orr.w	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00b      	beq.n	8002ee2 <HAL_UART_IRQHandler+0xd2>
 8002eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d005      	beq.n	8002ee2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eda:	f043 0202 	orr.w	r2, r3, #2
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00b      	beq.n	8002f06 <HAL_UART_IRQHandler+0xf6>
 8002eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d005      	beq.n	8002f06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efe:	f043 0204 	orr.w	r2, r3, #4
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d011      	beq.n	8002f36 <HAL_UART_IRQHandler+0x126>
 8002f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f16:	f003 0320 	and.w	r3, r3, #32
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d105      	bne.n	8002f2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d005      	beq.n	8002f36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2e:	f043 0208 	orr.w	r2, r3, #8
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 81f2 	beq.w	8003324 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_UART_IRQHandler+0x14e>
 8002f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 fb7d 	bl	8003658 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f68:	2b40      	cmp	r3, #64	@ 0x40
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2301      	moveq	r3, #1
 8002f6e:	2300      	movne	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d103      	bne.n	8002f8a <HAL_UART_IRQHandler+0x17a>
 8002f82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d04f      	beq.n	800302a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fa85 	bl	800349a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f9a:	2b40      	cmp	r3, #64	@ 0x40
 8002f9c:	d141      	bne.n	8003022 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3314      	adds	r3, #20
 8002fa4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002fac:	e853 3f00 	ldrex	r3, [r3]
 8002fb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002fb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3314      	adds	r3, #20
 8002fc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002fca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002fce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002fd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002fda:	e841 2300 	strex	r3, r2, [r1]
 8002fde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002fe2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1d9      	bne.n	8002f9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d013      	beq.n	800301a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff6:	4a7e      	ldr	r2, [pc, #504]	@ (80031f0 <HAL_UART_IRQHandler+0x3e0>)
 8002ff8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fe fa6f 	bl	80014e2 <HAL_DMA_Abort_IT>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d016      	beq.n	8003038 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800300e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003014:	4610      	mov	r0, r2
 8003016:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003018:	e00e      	b.n	8003038 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f994 	bl	8003348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003020:	e00a      	b.n	8003038 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f990 	bl	8003348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003028:	e006      	b.n	8003038 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f98c 	bl	8003348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003036:	e175      	b.n	8003324 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003038:	bf00      	nop
    return;
 800303a:	e173      	b.n	8003324 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003040:	2b01      	cmp	r3, #1
 8003042:	f040 814f 	bne.w	80032e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800304a:	f003 0310 	and.w	r3, r3, #16
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 8148 	beq.w	80032e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 8141 	beq.w	80032e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003082:	2b40      	cmp	r3, #64	@ 0x40
 8003084:	f040 80b6 	bne.w	80031f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003094:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 8145 	beq.w	8003328 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80030a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80030a6:	429a      	cmp	r2, r3
 80030a8:	f080 813e 	bcs.w	8003328 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80030b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030be:	f000 8088 	beq.w	80031d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	330c      	adds	r3, #12
 80030c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030d0:	e853 3f00 	ldrex	r3, [r3]
 80030d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80030d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	330c      	adds	r3, #12
 80030ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80030ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80030f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80030fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80030fe:	e841 2300 	strex	r3, r2, [r1]
 8003102:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003106:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1d9      	bne.n	80030c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	3314      	adds	r3, #20
 8003114:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003116:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003118:	e853 3f00 	ldrex	r3, [r3]
 800311c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800311e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3314      	adds	r3, #20
 800312e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003132:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003136:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003138:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800313a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800313e:	e841 2300 	strex	r3, r2, [r1]
 8003142:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003144:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1e1      	bne.n	800310e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3314      	adds	r3, #20
 8003150:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003152:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003154:	e853 3f00 	ldrex	r3, [r3]
 8003158:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800315a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800315c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003160:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3314      	adds	r3, #20
 800316a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800316e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003170:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003172:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003174:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003176:	e841 2300 	strex	r3, r2, [r1]
 800317a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800317c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1e3      	bne.n	800314a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2220      	movs	r2, #32
 8003186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	330c      	adds	r3, #12
 8003196:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003198:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800319a:	e853 3f00 	ldrex	r3, [r3]
 800319e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80031a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031a2:	f023 0310 	bic.w	r3, r3, #16
 80031a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	330c      	adds	r3, #12
 80031b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80031b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80031b6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80031bc:	e841 2300 	strex	r3, r2, [r1]
 80031c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80031c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1e3      	bne.n	8003190 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7fe f918 	bl	8001402 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2202      	movs	r2, #2
 80031d6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	4619      	mov	r1, r3
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f8b7 	bl	800335c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031ee:	e09b      	b.n	8003328 <HAL_UART_IRQHandler+0x518>
 80031f0:	08003561 	.word	0x08003561
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 808e 	beq.w	800332c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003210:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 8089 	beq.w	800332c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	330c      	adds	r3, #12
 8003220:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003224:	e853 3f00 	ldrex	r3, [r3]
 8003228:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800322a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800322c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003230:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	330c      	adds	r3, #12
 800323a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800323e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003240:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003242:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003244:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003246:	e841 2300 	strex	r3, r2, [r1]
 800324a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800324c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1e3      	bne.n	800321a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	3314      	adds	r3, #20
 8003258:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325c:	e853 3f00 	ldrex	r3, [r3]
 8003260:	623b      	str	r3, [r7, #32]
   return(result);
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	f023 0301 	bic.w	r3, r3, #1
 8003268:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3314      	adds	r3, #20
 8003272:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003276:	633a      	str	r2, [r7, #48]	@ 0x30
 8003278:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800327c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800327e:	e841 2300 	strex	r3, r2, [r1]
 8003282:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1e3      	bne.n	8003252 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2220      	movs	r2, #32
 800328e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	330c      	adds	r3, #12
 800329e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	e853 3f00 	ldrex	r3, [r3]
 80032a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 0310 	bic.w	r3, r3, #16
 80032ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	330c      	adds	r3, #12
 80032b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80032bc:	61fa      	str	r2, [r7, #28]
 80032be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c0:	69b9      	ldr	r1, [r7, #24]
 80032c2:	69fa      	ldr	r2, [r7, #28]
 80032c4:	e841 2300 	strex	r3, r2, [r1]
 80032c8:	617b      	str	r3, [r7, #20]
   return(result);
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1e3      	bne.n	8003298 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80032da:	4619      	mov	r1, r3
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f83d 	bl	800335c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032e2:	e023      	b.n	800332c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d009      	beq.n	8003304 <HAL_UART_IRQHandler+0x4f4>
 80032f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f943 	bl	8003588 <UART_Transmit_IT>
    return;
 8003302:	e014      	b.n	800332e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00e      	beq.n	800332e <HAL_UART_IRQHandler+0x51e>
 8003310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f983 	bl	8003628 <UART_EndTransmit_IT>
    return;
 8003322:	e004      	b.n	800332e <HAL_UART_IRQHandler+0x51e>
    return;
 8003324:	bf00      	nop
 8003326:	e002      	b.n	800332e <HAL_UART_IRQHandler+0x51e>
      return;
 8003328:	bf00      	nop
 800332a:	e000      	b.n	800332e <HAL_UART_IRQHandler+0x51e>
      return;
 800332c:	bf00      	nop
  }
}
 800332e:	37e8      	adds	r7, #232	@ 0xe8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	4613      	mov	r3, r2
 8003382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003384:	e03b      	b.n	80033fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d037      	beq.n	80033fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338e:	f7fd ff1b 	bl	80011c8 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	6a3a      	ldr	r2, [r7, #32]
 800339a:	429a      	cmp	r2, r3
 800339c:	d302      	bcc.n	80033a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e03a      	b.n	800341e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d023      	beq.n	80033fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b80      	cmp	r3, #128	@ 0x80
 80033ba:	d020      	beq.n	80033fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b40      	cmp	r3, #64	@ 0x40
 80033c0:	d01d      	beq.n	80033fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0308 	and.w	r3, r3, #8
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d116      	bne.n	80033fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 f857 	bl	800349a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2208      	movs	r2, #8
 80033f0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e00f      	b.n	800341e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4013      	ands	r3, r2
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	429a      	cmp	r2, r3
 800340c:	bf0c      	ite	eq
 800340e:	2301      	moveq	r3, #1
 8003410:	2300      	movne	r3, #0
 8003412:	b2db      	uxtb	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	429a      	cmp	r2, r3
 800341a:	d0b4      	beq.n	8003386 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003426:	b480      	push	{r7}
 8003428:	b085      	sub	sp, #20
 800342a:	af00      	add	r7, sp, #0
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	4613      	mov	r3, r2
 8003432:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	88fa      	ldrh	r2, [r7, #6]
 800343e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	88fa      	ldrh	r2, [r7, #6]
 8003444:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2222      	movs	r2, #34	@ 0x22
 8003450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d007      	beq.n	800346c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800346a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0220 	orr.w	r2, r2, #32
 800348a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800349a:	b480      	push	{r7}
 800349c:	b095      	sub	sp, #84	@ 0x54
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	330c      	adds	r3, #12
 80034a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ac:	e853 3f00 	ldrex	r3, [r3]
 80034b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	330c      	adds	r3, #12
 80034c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034c2:	643a      	str	r2, [r7, #64]	@ 0x40
 80034c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034ca:	e841 2300 	strex	r3, r2, [r1]
 80034ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1e5      	bne.n	80034a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3314      	adds	r3, #20
 80034dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	e853 3f00 	ldrex	r3, [r3]
 80034e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f023 0301 	bic.w	r3, r3, #1
 80034ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	3314      	adds	r3, #20
 80034f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034fe:	e841 2300 	strex	r3, r2, [r1]
 8003502:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1e5      	bne.n	80034d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350e:	2b01      	cmp	r3, #1
 8003510:	d119      	bne.n	8003546 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	330c      	adds	r3, #12
 8003518:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	e853 3f00 	ldrex	r3, [r3]
 8003520:	60bb      	str	r3, [r7, #8]
   return(result);
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f023 0310 	bic.w	r3, r3, #16
 8003528:	647b      	str	r3, [r7, #68]	@ 0x44
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	330c      	adds	r3, #12
 8003530:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003532:	61ba      	str	r2, [r7, #24]
 8003534:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003536:	6979      	ldr	r1, [r7, #20]
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	e841 2300 	strex	r3, r2, [r1]
 800353e:	613b      	str	r3, [r7, #16]
   return(result);
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1e5      	bne.n	8003512 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003554:	bf00      	nop
 8003556:	3754      	adds	r7, #84	@ 0x54
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800356c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f7ff fee4 	bl	8003348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003580:	bf00      	nop
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b21      	cmp	r3, #33	@ 0x21
 800359a:	d13e      	bne.n	800361a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035a4:	d114      	bne.n	80035d0 <UART_Transmit_IT+0x48>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d110      	bne.n	80035d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	461a      	mov	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	1c9a      	adds	r2, r3, #2
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	621a      	str	r2, [r3, #32]
 80035ce:	e008      	b.n	80035e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	1c59      	adds	r1, r3, #1
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6211      	str	r1, [r2, #32]
 80035da:	781a      	ldrb	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	4619      	mov	r1, r3
 80035f0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10f      	bne.n	8003616 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003604:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003614:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	e000      	b.n	800361c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800361a:	2302      	movs	r3, #2
  }
}
 800361c:	4618      	mov	r0, r3
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800363e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7ff fe73 	bl	8003334 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08c      	sub	sp, #48	@ 0x30
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b22      	cmp	r3, #34	@ 0x22
 800366a:	f040 80ae 	bne.w	80037ca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003676:	d117      	bne.n	80036a8 <UART_Receive_IT+0x50>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d113      	bne.n	80036a8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003680:	2300      	movs	r3, #0
 8003682:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003688:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	b29b      	uxth	r3, r3
 8003692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003696:	b29a      	uxth	r2, r3
 8003698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a0:	1c9a      	adds	r2, r3, #2
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80036a6:	e026      	b.n	80036f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ba:	d007      	beq.n	80036cc <UART_Receive_IT+0x74>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10a      	bne.n	80036da <UART_Receive_IT+0x82>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d106      	bne.n	80036da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d6:	701a      	strb	r2, [r3, #0]
 80036d8:	e008      	b.n	80036ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29b      	uxth	r3, r3
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	4619      	mov	r1, r3
 8003704:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003706:	2b00      	cmp	r3, #0
 8003708:	d15d      	bne.n	80037c6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0220 	bic.w	r2, r2, #32
 8003718:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003728:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695a      	ldr	r2, [r3, #20]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0201 	bic.w	r2, r2, #1
 8003738:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2220      	movs	r2, #32
 800373e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374c:	2b01      	cmp	r3, #1
 800374e:	d135      	bne.n	80037bc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	330c      	adds	r3, #12
 800375c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	e853 3f00 	ldrex	r3, [r3]
 8003764:	613b      	str	r3, [r7, #16]
   return(result);
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f023 0310 	bic.w	r3, r3, #16
 800376c:	627b      	str	r3, [r7, #36]	@ 0x24
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	330c      	adds	r3, #12
 8003774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003776:	623a      	str	r2, [r7, #32]
 8003778:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377a:	69f9      	ldr	r1, [r7, #28]
 800377c:	6a3a      	ldr	r2, [r7, #32]
 800377e:	e841 2300 	strex	r3, r2, [r1]
 8003782:	61bb      	str	r3, [r7, #24]
   return(result);
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1e5      	bne.n	8003756 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0310 	and.w	r3, r3, #16
 8003794:	2b10      	cmp	r3, #16
 8003796:	d10a      	bne.n	80037ae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037b2:	4619      	mov	r1, r3
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff fdd1 	bl	800335c <HAL_UARTEx_RxEventCallback>
 80037ba:	e002      	b.n	80037c2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7fd f95b 	bl	8000a78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	e002      	b.n	80037cc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	e000      	b.n	80037cc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80037ca:	2302      	movs	r3, #2
  }
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3730      	adds	r7, #48	@ 0x30
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037d8:	b0c0      	sub	sp, #256	@ 0x100
 80037da:	af00      	add	r7, sp, #0
 80037dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f0:	68d9      	ldr	r1, [r3, #12]
 80037f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	ea40 0301 	orr.w	r3, r0, r1
 80037fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	431a      	orrs	r2, r3
 800380c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	431a      	orrs	r2, r3
 8003814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800382c:	f021 010c 	bic.w	r1, r1, #12
 8003830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800383a:	430b      	orrs	r3, r1
 800383c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800383e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800384a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800384e:	6999      	ldr	r1, [r3, #24]
 8003850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	ea40 0301 	orr.w	r3, r0, r1
 800385a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	4b8f      	ldr	r3, [pc, #572]	@ (8003aa0 <UART_SetConfig+0x2cc>)
 8003864:	429a      	cmp	r2, r3
 8003866:	d005      	beq.n	8003874 <UART_SetConfig+0xa0>
 8003868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	4b8d      	ldr	r3, [pc, #564]	@ (8003aa4 <UART_SetConfig+0x2d0>)
 8003870:	429a      	cmp	r2, r3
 8003872:	d104      	bne.n	800387e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003874:	f7fe f976 	bl	8001b64 <HAL_RCC_GetPCLK2Freq>
 8003878:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800387c:	e003      	b.n	8003886 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800387e:	f7fe f95d 	bl	8001b3c <HAL_RCC_GetPCLK1Freq>
 8003882:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003890:	f040 810c 	bne.w	8003aac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003898:	2200      	movs	r2, #0
 800389a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800389e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80038a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80038a6:	4622      	mov	r2, r4
 80038a8:	462b      	mov	r3, r5
 80038aa:	1891      	adds	r1, r2, r2
 80038ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80038ae:	415b      	adcs	r3, r3
 80038b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038b6:	4621      	mov	r1, r4
 80038b8:	eb12 0801 	adds.w	r8, r2, r1
 80038bc:	4629      	mov	r1, r5
 80038be:	eb43 0901 	adc.w	r9, r3, r1
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038d6:	4690      	mov	r8, r2
 80038d8:	4699      	mov	r9, r3
 80038da:	4623      	mov	r3, r4
 80038dc:	eb18 0303 	adds.w	r3, r8, r3
 80038e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038e4:	462b      	mov	r3, r5
 80038e6:	eb49 0303 	adc.w	r3, r9, r3
 80038ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80038fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003902:	460b      	mov	r3, r1
 8003904:	18db      	adds	r3, r3, r3
 8003906:	653b      	str	r3, [r7, #80]	@ 0x50
 8003908:	4613      	mov	r3, r2
 800390a:	eb42 0303 	adc.w	r3, r2, r3
 800390e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003910:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003914:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003918:	f7fc fcd2 	bl	80002c0 <__aeabi_uldivmod>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4b61      	ldr	r3, [pc, #388]	@ (8003aa8 <UART_SetConfig+0x2d4>)
 8003922:	fba3 2302 	umull	r2, r3, r3, r2
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	011c      	lsls	r4, r3, #4
 800392a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800392e:	2200      	movs	r2, #0
 8003930:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003934:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003938:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800393c:	4642      	mov	r2, r8
 800393e:	464b      	mov	r3, r9
 8003940:	1891      	adds	r1, r2, r2
 8003942:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003944:	415b      	adcs	r3, r3
 8003946:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003948:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800394c:	4641      	mov	r1, r8
 800394e:	eb12 0a01 	adds.w	sl, r2, r1
 8003952:	4649      	mov	r1, r9
 8003954:	eb43 0b01 	adc.w	fp, r3, r1
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003964:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003968:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800396c:	4692      	mov	sl, r2
 800396e:	469b      	mov	fp, r3
 8003970:	4643      	mov	r3, r8
 8003972:	eb1a 0303 	adds.w	r3, sl, r3
 8003976:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800397a:	464b      	mov	r3, r9
 800397c:	eb4b 0303 	adc.w	r3, fp, r3
 8003980:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003990:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003994:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003998:	460b      	mov	r3, r1
 800399a:	18db      	adds	r3, r3, r3
 800399c:	643b      	str	r3, [r7, #64]	@ 0x40
 800399e:	4613      	mov	r3, r2
 80039a0:	eb42 0303 	adc.w	r3, r2, r3
 80039a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80039a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80039aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80039ae:	f7fc fc87 	bl	80002c0 <__aeabi_uldivmod>
 80039b2:	4602      	mov	r2, r0
 80039b4:	460b      	mov	r3, r1
 80039b6:	4611      	mov	r1, r2
 80039b8:	4b3b      	ldr	r3, [pc, #236]	@ (8003aa8 <UART_SetConfig+0x2d4>)
 80039ba:	fba3 2301 	umull	r2, r3, r3, r1
 80039be:	095b      	lsrs	r3, r3, #5
 80039c0:	2264      	movs	r2, #100	@ 0x64
 80039c2:	fb02 f303 	mul.w	r3, r2, r3
 80039c6:	1acb      	subs	r3, r1, r3
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80039ce:	4b36      	ldr	r3, [pc, #216]	@ (8003aa8 <UART_SetConfig+0x2d4>)
 80039d0:	fba3 2302 	umull	r2, r3, r3, r2
 80039d4:	095b      	lsrs	r3, r3, #5
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80039dc:	441c      	add	r4, r3
 80039de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80039ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80039f0:	4642      	mov	r2, r8
 80039f2:	464b      	mov	r3, r9
 80039f4:	1891      	adds	r1, r2, r2
 80039f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039f8:	415b      	adcs	r3, r3
 80039fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a00:	4641      	mov	r1, r8
 8003a02:	1851      	adds	r1, r2, r1
 8003a04:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a06:	4649      	mov	r1, r9
 8003a08:	414b      	adcs	r3, r1
 8003a0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	f04f 0300 	mov.w	r3, #0
 8003a14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a18:	4659      	mov	r1, fp
 8003a1a:	00cb      	lsls	r3, r1, #3
 8003a1c:	4651      	mov	r1, sl
 8003a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a22:	4651      	mov	r1, sl
 8003a24:	00ca      	lsls	r2, r1, #3
 8003a26:	4610      	mov	r0, r2
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4642      	mov	r2, r8
 8003a2e:	189b      	adds	r3, r3, r2
 8003a30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a34:	464b      	mov	r3, r9
 8003a36:	460a      	mov	r2, r1
 8003a38:	eb42 0303 	adc.w	r3, r2, r3
 8003a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a54:	460b      	mov	r3, r1
 8003a56:	18db      	adds	r3, r3, r3
 8003a58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	eb42 0303 	adc.w	r3, r2, r3
 8003a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a6a:	f7fc fc29 	bl	80002c0 <__aeabi_uldivmod>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa8 <UART_SetConfig+0x2d4>)
 8003a74:	fba3 1302 	umull	r1, r3, r3, r2
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	2164      	movs	r1, #100	@ 0x64
 8003a7c:	fb01 f303 	mul.w	r3, r1, r3
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	3332      	adds	r3, #50	@ 0x32
 8003a86:	4a08      	ldr	r2, [pc, #32]	@ (8003aa8 <UART_SetConfig+0x2d4>)
 8003a88:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8c:	095b      	lsrs	r3, r3, #5
 8003a8e:	f003 0207 	and.w	r2, r3, #7
 8003a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4422      	add	r2, r4
 8003a9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a9c:	e106      	b.n	8003cac <UART_SetConfig+0x4d8>
 8003a9e:	bf00      	nop
 8003aa0:	40011000 	.word	0x40011000
 8003aa4:	40011400 	.word	0x40011400
 8003aa8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ab6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003aba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003abe:	4642      	mov	r2, r8
 8003ac0:	464b      	mov	r3, r9
 8003ac2:	1891      	adds	r1, r2, r2
 8003ac4:	6239      	str	r1, [r7, #32]
 8003ac6:	415b      	adcs	r3, r3
 8003ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ace:	4641      	mov	r1, r8
 8003ad0:	1854      	adds	r4, r2, r1
 8003ad2:	4649      	mov	r1, r9
 8003ad4:	eb43 0501 	adc.w	r5, r3, r1
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	00eb      	lsls	r3, r5, #3
 8003ae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ae6:	00e2      	lsls	r2, r4, #3
 8003ae8:	4614      	mov	r4, r2
 8003aea:	461d      	mov	r5, r3
 8003aec:	4643      	mov	r3, r8
 8003aee:	18e3      	adds	r3, r4, r3
 8003af0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003af4:	464b      	mov	r3, r9
 8003af6:	eb45 0303 	adc.w	r3, r5, r3
 8003afa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b1a:	4629      	mov	r1, r5
 8003b1c:	008b      	lsls	r3, r1, #2
 8003b1e:	4621      	mov	r1, r4
 8003b20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b24:	4621      	mov	r1, r4
 8003b26:	008a      	lsls	r2, r1, #2
 8003b28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b2c:	f7fc fbc8 	bl	80002c0 <__aeabi_uldivmod>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4b60      	ldr	r3, [pc, #384]	@ (8003cb8 <UART_SetConfig+0x4e4>)
 8003b36:	fba3 2302 	umull	r2, r3, r3, r2
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	011c      	lsls	r4, r3, #4
 8003b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b42:	2200      	movs	r2, #0
 8003b44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b50:	4642      	mov	r2, r8
 8003b52:	464b      	mov	r3, r9
 8003b54:	1891      	adds	r1, r2, r2
 8003b56:	61b9      	str	r1, [r7, #24]
 8003b58:	415b      	adcs	r3, r3
 8003b5a:	61fb      	str	r3, [r7, #28]
 8003b5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b60:	4641      	mov	r1, r8
 8003b62:	1851      	adds	r1, r2, r1
 8003b64:	6139      	str	r1, [r7, #16]
 8003b66:	4649      	mov	r1, r9
 8003b68:	414b      	adcs	r3, r1
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b78:	4659      	mov	r1, fp
 8003b7a:	00cb      	lsls	r3, r1, #3
 8003b7c:	4651      	mov	r1, sl
 8003b7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b82:	4651      	mov	r1, sl
 8003b84:	00ca      	lsls	r2, r1, #3
 8003b86:	4610      	mov	r0, r2
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	4642      	mov	r2, r8
 8003b8e:	189b      	adds	r3, r3, r2
 8003b90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b94:	464b      	mov	r3, r9
 8003b96:	460a      	mov	r2, r1
 8003b98:	eb42 0303 	adc.w	r3, r2, r3
 8003b9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003baa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003bb8:	4649      	mov	r1, r9
 8003bba:	008b      	lsls	r3, r1, #2
 8003bbc:	4641      	mov	r1, r8
 8003bbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bc2:	4641      	mov	r1, r8
 8003bc4:	008a      	lsls	r2, r1, #2
 8003bc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003bca:	f7fc fb79 	bl	80002c0 <__aeabi_uldivmod>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4611      	mov	r1, r2
 8003bd4:	4b38      	ldr	r3, [pc, #224]	@ (8003cb8 <UART_SetConfig+0x4e4>)
 8003bd6:	fba3 2301 	umull	r2, r3, r3, r1
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	2264      	movs	r2, #100	@ 0x64
 8003bde:	fb02 f303 	mul.w	r3, r2, r3
 8003be2:	1acb      	subs	r3, r1, r3
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	3332      	adds	r3, #50	@ 0x32
 8003be8:	4a33      	ldr	r2, [pc, #204]	@ (8003cb8 <UART_SetConfig+0x4e4>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	095b      	lsrs	r3, r3, #5
 8003bf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bf4:	441c      	add	r4, r3
 8003bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bfe:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c04:	4642      	mov	r2, r8
 8003c06:	464b      	mov	r3, r9
 8003c08:	1891      	adds	r1, r2, r2
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	415b      	adcs	r3, r3
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c14:	4641      	mov	r1, r8
 8003c16:	1851      	adds	r1, r2, r1
 8003c18:	6039      	str	r1, [r7, #0]
 8003c1a:	4649      	mov	r1, r9
 8003c1c:	414b      	adcs	r3, r1
 8003c1e:	607b      	str	r3, [r7, #4]
 8003c20:	f04f 0200 	mov.w	r2, #0
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c2c:	4659      	mov	r1, fp
 8003c2e:	00cb      	lsls	r3, r1, #3
 8003c30:	4651      	mov	r1, sl
 8003c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c36:	4651      	mov	r1, sl
 8003c38:	00ca      	lsls	r2, r1, #3
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4603      	mov	r3, r0
 8003c40:	4642      	mov	r2, r8
 8003c42:	189b      	adds	r3, r3, r2
 8003c44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c46:	464b      	mov	r3, r9
 8003c48:	460a      	mov	r2, r1
 8003c4a:	eb42 0303 	adc.w	r3, r2, r3
 8003c4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c5a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c68:	4649      	mov	r1, r9
 8003c6a:	008b      	lsls	r3, r1, #2
 8003c6c:	4641      	mov	r1, r8
 8003c6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c72:	4641      	mov	r1, r8
 8003c74:	008a      	lsls	r2, r1, #2
 8003c76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c7a:	f7fc fb21 	bl	80002c0 <__aeabi_uldivmod>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb8 <UART_SetConfig+0x4e4>)
 8003c84:	fba3 1302 	umull	r1, r3, r3, r2
 8003c88:	095b      	lsrs	r3, r3, #5
 8003c8a:	2164      	movs	r1, #100	@ 0x64
 8003c8c:	fb01 f303 	mul.w	r3, r1, r3
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	3332      	adds	r3, #50	@ 0x32
 8003c96:	4a08      	ldr	r2, [pc, #32]	@ (8003cb8 <UART_SetConfig+0x4e4>)
 8003c98:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9c:	095b      	lsrs	r3, r3, #5
 8003c9e:	f003 020f 	and.w	r2, r3, #15
 8003ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4422      	add	r2, r4
 8003caa:	609a      	str	r2, [r3, #8]
}
 8003cac:	bf00      	nop
 8003cae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cb8:	51eb851f 	.word	0x51eb851f

08003cbc <textualProtocolInit>:
		"blinkpatt"
};

// ======== Init =========== //
void textualProtocolInit(TextualProtocol *textualProtocol, uint8_t starterChar, uint8_t delimeter, UART_HandleTypeDef huart)
{
 8003cbc:	b082      	sub	sp, #8
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b082      	sub	sp, #8
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	70fb      	strb	r3, [r7, #3]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	70bb      	strb	r3, [r7, #2]
	textualProtocol->starterChar = starterChar;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	78fa      	ldrb	r2, [r7, #3]
 8003cd4:	701a      	strb	r2, [r3, #0]
	textualProtocol->delimiter = delimeter;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	78ba      	ldrb	r2, [r7, #2]
 8003cda:	705a      	strb	r2, [r3, #1]
	textualProtocol->enableEcho = TRUE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	71da      	strb	r2, [r3, #7]
	textualProtocol->huart = huart;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8003ce8:	f107 0114 	add.w	r1, r7, #20
 8003cec:	2248      	movs	r2, #72	@ 0x48
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 fc60 	bl	80045b4 <memcpy>

	textualProtocolClear(textualProtocol, CLEAR_ALL);
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f85a 	bl	8003db0 <textualProtocolClear>
}
 8003cfc:	bf00      	nop
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d06:	b002      	add	sp, #8
 8003d08:	4770      	bx	lr

08003d0a <textualProtocolAppendByte>:

void textualProtocolAppendByte(TextualProtocol *textualProtocol, uint8_t receivedByte)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	460b      	mov	r3, r1
 8003d14:	70fb      	strb	r3, [r7, #3]
	if ((receivedByte == CHAR_CR) || (receivedByte == CHAR_LF))
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	2b0d      	cmp	r3, #13
 8003d1a:	d002      	beq.n	8003d22 <textualProtocolAppendByte+0x18>
 8003d1c:	78fb      	ldrb	r3, [r7, #3]
 8003d1e:	2b0a      	cmp	r3, #10
 8003d20:	d117      	bne.n	8003d52 <textualProtocolAppendByte+0x48>
	{
		if (textualProtocol->length >= QTY_MIN_RX_DATA_BYTES)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	791b      	ldrb	r3, [r3, #4]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d90a      	bls.n	8003d40 <textualProtocolAppendByte+0x36>
		{
			if (textualProtocol->enableEcho == TRUE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	79db      	ldrb	r3, [r3, #7]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d102      	bne.n	8003d38 <textualProtocolAppendByte+0x2e>
			{
				textualProtocolSendNewLine(textualProtocol);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f966 	bl	8004004 <textualProtocolSendNewLine>
			}
			textualProtocol->enableExtractData = TRUE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	719a      	strb	r2, [r3, #6]
		if (textualProtocol->length >= QTY_MIN_RX_DATA_BYTES)
 8003d3e:	e033      	b.n	8003da8 <textualProtocolAppendByte+0x9e>
		}
		else
		{
			textualProtocolClear(textualProtocol, CLEAR_ALL);
 8003d40:	2101      	movs	r1, #1
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f834 	bl	8003db0 <textualProtocolClear>
			textualProtocolSendStatusMessage(textualProtocol, STATUS_MESSAGE_SYNTAX_ERROR);
 8003d48:	21ab      	movs	r1, #171	@ 0xab
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f90e 	bl	8003f6c <textualProtocolSendStatusMessage>
		if (textualProtocol->length >= QTY_MIN_RX_DATA_BYTES)
 8003d50:	e02a      	b.n	8003da8 <textualProtocolAppendByte+0x9e>
		}
	}
	else if ((receivedByte >= ' ') && (receivedByte <= 'z') && (textualProtocol->enableExtractData == FALSE))
 8003d52:	78fb      	ldrb	r3, [r7, #3]
 8003d54:	2b1f      	cmp	r3, #31
 8003d56:	d927      	bls.n	8003da8 <textualProtocolAppendByte+0x9e>
 8003d58:	78fb      	ldrb	r3, [r7, #3]
 8003d5a:	2b7a      	cmp	r3, #122	@ 0x7a
 8003d5c:	d824      	bhi.n	8003da8 <textualProtocolAppendByte+0x9e>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	799b      	ldrb	r3, [r3, #6]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d120      	bne.n	8003da8 <textualProtocolAppendByte+0x9e>
	{
		if (textualProtocol->byteIndex < QTY_MAX_RX_DATA_BYTES)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	795b      	ldrb	r3, [r3, #5]
 8003d6a:	2bea      	cmp	r3, #234	@ 0xea
 8003d6c:	d813      	bhi.n	8003d96 <textualProtocolAppendByte+0x8c>
		{
			textualProtocol->dataPacket[textualProtocol->byteIndex] = receivedByte;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	795b      	ldrb	r3, [r3, #5]
 8003d72:	461a      	mov	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4413      	add	r3, r2
 8003d78:	78fa      	ldrb	r2, [r7, #3]
 8003d7a:	729a      	strb	r2, [r3, #10]
			textualProtocol->byteIndex++;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	795b      	ldrb	r3, [r3, #5]
 8003d80:	3301      	adds	r3, #1
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	715a      	strb	r2, [r3, #5]
			textualProtocol->length++;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	791b      	ldrb	r3, [r3, #4]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	711a      	strb	r2, [r3, #4]
		{
			textualProtocolClear(textualProtocol, CLEAR_ALL);
			textualProtocolSendStatusMessage(textualProtocol, STATUS_MESSAGE_SYNTAX_ERROR);
		}
	}
}
 8003d94:	e008      	b.n	8003da8 <textualProtocolAppendByte+0x9e>
			textualProtocolClear(textualProtocol, CLEAR_ALL);
 8003d96:	2101      	movs	r1, #1
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f809 	bl	8003db0 <textualProtocolClear>
			textualProtocolSendStatusMessage(textualProtocol, STATUS_MESSAGE_SYNTAX_ERROR);
 8003d9e:	21ab      	movs	r1, #171	@ 0xab
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f8e3 	bl	8003f6c <textualProtocolSendStatusMessage>
}
 8003da6:	e7ff      	b.n	8003da8 <textualProtocolAppendByte+0x9e>
 8003da8:	bf00      	nop
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <textualProtocolClear>:

void textualProtocolClear(TextualProtocol *textualProtocol, TextualProtocolClear clear)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	73fb      	strb	r3, [r7, #15]

	switch (clear)
 8003dc0:	78fb      	ldrb	r3, [r7, #3]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	2b06      	cmp	r3, #6
 8003dc6:	f200 80cc 	bhi.w	8003f62 <textualProtocolClear+0x1b2>
 8003dca:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd0 <textualProtocolClear+0x20>)
 8003dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd0:	08003ded 	.word	0x08003ded
 8003dd4:	08003e89 	.word	0x08003e89
 8003dd8:	08003ebd 	.word	0x08003ebd
 8003ddc:	08003ed9 	.word	0x08003ed9
 8003de0:	08003ef1 	.word	0x08003ef1
 8003de4:	08003f1d 	.word	0x08003f1d
 8003de8:	08003f55 	.word	0x08003f55
	{
		case CLEAR_ALL:
			textualProtocol->length = 0;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	711a      	strb	r2, [r3, #4]
			textualProtocol->byteIndex = 0;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	715a      	strb	r2, [r3, #5]
			textualProtocol->qtyOfDelimiters = 0;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	725a      	strb	r2, [r3, #9]
			textualProtocol->enableExtractData = FALSE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	719a      	strb	r2, [r3, #6]
			textualProtocol->textualProtocolRxStatus = INVALID_RX_TEXTUAL_PROTOCOL;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 21dc 	strb.w	r2, [r3, #476]	@ 0x1dc
			textualProtocol->textualProtocolRxCommandStatus = INVALID_RX_COMMAND;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 21dd 	strb.w	r2, [r3, #477]	@ 0x1dd
			textualProtocol->commandLength = 0;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	709a      	strb	r2, [r3, #2]
			textualProtocol->commandCode = 0;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	70da      	strb	r2, [r3, #3]
			textualProtocol->enableDecodeExtractedCommand = FALSE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	721a      	strb	r2, [r3, #8]
			memset(textualProtocol->dataPacket, 0x00, QTY_MAX_RX_DATA_BYTES);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	330a      	adds	r3, #10
 8003e2a:	22eb      	movs	r2, #235	@ 0xeb
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fb8c 	bl	800454c <memset>
			memset(textualProtocol->indexesOfDelimiters, 0x00, QTY_MAX_OF_DELIMITERS);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f203 13c7 	addw	r3, r3, #455	@ 0x1c7
 8003e3a:	220a      	movs	r2, #10
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 fb84 	bl	800454c <memset>
			memset(textualProtocol->command, 0x00, QTY_MAX_OF_BYTES_IN_COMMAND);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f203 13d1 	addw	r3, r3, #465	@ 0x1d1
 8003e4a:	220b      	movs	r2, #11
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fb7c 	bl	800454c <memset>

			for (i = 0; i < QTY_MAX_OF_VALUES; i++)
 8003e54:	2300      	movs	r3, #0
 8003e56:	73fb      	strb	r3, [r7, #15]
 8003e58:	e012      	b.n	8003e80 <textualProtocolClear+0xd0>
			{
				memset(textualProtocol->values[i], 0x00, QTY_MAX_OF_BYTES_PER_VALUE);
 8003e5a:	7bfa      	ldrb	r2, [r7, #15]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	4413      	add	r3, r2
 8003e62:	00da      	lsls	r2, r3, #3
 8003e64:	1ad2      	subs	r2, r2, r3
 8003e66:	f102 03f0 	add.w	r3, r2, #240	@ 0xf0
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	3305      	adds	r3, #5
 8003e70:	2215      	movs	r2, #21
 8003e72:	2100      	movs	r1, #0
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 fb69 	bl	800454c <memset>
			for (i = 0; i < QTY_MAX_OF_VALUES; i++)
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
 8003e82:	2b09      	cmp	r3, #9
 8003e84:	d9e9      	bls.n	8003e5a <textualProtocolClear+0xaa>
			}

			break;
 8003e86:	e06d      	b.n	8003f64 <textualProtocolClear+0x1b4>

		case CLEAR_VALUES:
			for (i = 0; i < QTY_MAX_OF_VALUES; i++)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	73fb      	strb	r3, [r7, #15]
 8003e8c:	e012      	b.n	8003eb4 <textualProtocolClear+0x104>
			{
				memset(textualProtocol->values[i], 0x00, QTY_MAX_OF_BYTES_PER_VALUE);
 8003e8e:	7bfa      	ldrb	r2, [r7, #15]
 8003e90:	4613      	mov	r3, r2
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	4413      	add	r3, r2
 8003e96:	00da      	lsls	r2, r3, #3
 8003e98:	1ad2      	subs	r2, r2, r3
 8003e9a:	f102 03f0 	add.w	r3, r2, #240	@ 0xf0
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	3305      	adds	r3, #5
 8003ea4:	2215      	movs	r2, #21
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fb4f 	bl	800454c <memset>
			for (i = 0; i < QTY_MAX_OF_VALUES; i++)
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	73fb      	strb	r3, [r7, #15]
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	2b09      	cmp	r3, #9
 8003eb8:	d9e9      	bls.n	8003e8e <textualProtocolClear+0xde>
			}
			break;
 8003eba:	e053      	b.n	8003f64 <textualProtocolClear+0x1b4>

		case CLEAR_DATA_PACKET:
			textualProtocol->length = 0;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	711a      	strb	r2, [r3, #4]
			textualProtocol->byteIndex = 0;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	715a      	strb	r2, [r3, #5]
			memset(textualProtocol->dataPacket, 0x00, QTY_MAX_RX_DATA_BYTES);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	330a      	adds	r3, #10
 8003ecc:	22eb      	movs	r2, #235	@ 0xeb
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fb3b 	bl	800454c <memset>
			break;
 8003ed6:	e045      	b.n	8003f64 <textualProtocolClear+0x1b4>

		case CLEAR_INDEXES_OF_DELIMITERS:
			textualProtocol->qtyOfDelimiters = 0;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	725a      	strb	r2, [r3, #9]
			memset(textualProtocol->indexesOfDelimiters, 0x00, QTY_MAX_OF_DELIMITERS);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f203 13c7 	addw	r3, r3, #455	@ 0x1c7
 8003ee4:	220a      	movs	r2, #10
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fb2f 	bl	800454c <memset>
			break;
 8003eee:	e039      	b.n	8003f64 <textualProtocolClear+0x1b4>

		case CLEAR_COMMAND:
			textualProtocol->textualProtocolRxCommandStatus = INVALID_RX_COMMAND;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 21dd 	strb.w	r2, [r3, #477]	@ 0x1dd
			textualProtocol->commandLength = 0;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	709a      	strb	r2, [r3, #2]
			textualProtocol->commandCode = 0;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	70da      	strb	r2, [r3, #3]
			textualProtocol->enableDecodeExtractedCommand = FALSE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	721a      	strb	r2, [r3, #8]
			memset(textualProtocol->command, 0x00, QTY_MAX_OF_BYTES_IN_COMMAND);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f203 13d1 	addw	r3, r3, #465	@ 0x1d1
 8003f10:	220b      	movs	r2, #11
 8003f12:	2100      	movs	r1, #0
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 fb19 	bl	800454c <memset>
			break;
 8003f1a:	e023      	b.n	8003f64 <textualProtocolClear+0x1b4>

		case CLEAR_AFTER_EXTRACT_DATA:
			textualProtocol->length = 0;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	711a      	strb	r2, [r3, #4]
			textualProtocol->byteIndex = 0;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	715a      	strb	r2, [r3, #5]
			textualProtocol->qtyOfDelimiters = 0;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	725a      	strb	r2, [r3, #9]
			textualProtocol->enableExtractData = FALSE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	719a      	strb	r2, [r3, #6]
			memset(textualProtocol->dataPacket, 0x00, QTY_MAX_RX_DATA_BYTES);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	330a      	adds	r3, #10
 8003f38:	22eb      	movs	r2, #235	@ 0xeb
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 fb05 	bl	800454c <memset>
			memset(textualProtocol->indexesOfDelimiters, 0x00, QTY_MAX_OF_DELIMITERS);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f203 13c7 	addw	r3, r3, #455	@ 0x1c7
 8003f48:	220a      	movs	r2, #10
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 fafd 	bl	800454c <memset>
			break;
 8003f52:	e007      	b.n	8003f64 <textualProtocolClear+0x1b4>

		case CLEAR_AFTER_DECODE_EXTRACTED_COMMAND:
			textualProtocol->commandLength = 0;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	709a      	strb	r2, [r3, #2]
			textualProtocol->enableDecodeExtractedCommand = FALSE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	721a      	strb	r2, [r3, #8]
			break;
 8003f60:	e000      	b.n	8003f64 <textualProtocolClear+0x1b4>

		default:
			break;
 8003f62:	bf00      	nop
	}
}
 8003f64:	bf00      	nop
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <textualProtocolSendStatusMessage>:

void textualProtocolSendStatusMessage(TextualProtocol *textualProtocol, TextualProtocolStatusMessages statusMessage)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	70fb      	strb	r3, [r7, #3]
	switch (statusMessage)
 8003f78:	78fb      	ldrb	r3, [r7, #3]
 8003f7a:	3baa      	subs	r3, #170	@ 0xaa
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d833      	bhi.n	8003fe8 <textualProtocolSendStatusMessage+0x7c>
 8003f80:	a201      	add	r2, pc, #4	@ (adr r2, 8003f88 <textualProtocolSendStatusMessage+0x1c>)
 8003f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f86:	bf00      	nop
 8003f88:	08003f99 	.word	0x08003f99
 8003f8c:	08003fad 	.word	0x08003fad
 8003f90:	08003fc1 	.word	0x08003fc1
 8003f94:	08003fd5 	.word	0x08003fd5
	{
		case STATUS_MESSAGE_OK:
			HAL_UART_Transmit(&textualProtocol->huart, (uint8_t *) "OK\r\n", 4, HAL_MAX_DELAY);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f503 70f0 	add.w	r0, r3, #480	@ 0x1e0
 8003f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	4913      	ldr	r1, [pc, #76]	@ (8003ff4 <textualProtocolSendStatusMessage+0x88>)
 8003fa6:	f7fe fe83 	bl	8002cb0 <HAL_UART_Transmit>
			break;
 8003faa:	e01e      	b.n	8003fea <textualProtocolSendStatusMessage+0x7e>

		case STATUS_MESSAGE_SYNTAX_ERROR:
			HAL_UART_Transmit(&textualProtocol->huart, (uint8_t *) "Syntax Error\r\n", 14, HAL_MAX_DELAY);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f503 70f0 	add.w	r0, r3, #480	@ 0x1e0
 8003fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb6:	220e      	movs	r2, #14
 8003fb8:	490f      	ldr	r1, [pc, #60]	@ (8003ff8 <textualProtocolSendStatusMessage+0x8c>)
 8003fba:	f7fe fe79 	bl	8002cb0 <HAL_UART_Transmit>
			break;
 8003fbe:	e014      	b.n	8003fea <textualProtocolSendStatusMessage+0x7e>

		case STATUS_MESSAGE_UNKNOWN_COMMAND:
			HAL_UART_Transmit(&textualProtocol->huart, (uint8_t *) "Unknown Command\r\n", 17, HAL_MAX_DELAY);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f503 70f0 	add.w	r0, r3, #480	@ 0x1e0
 8003fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fca:	2211      	movs	r2, #17
 8003fcc:	490b      	ldr	r1, [pc, #44]	@ (8003ffc <textualProtocolSendStatusMessage+0x90>)
 8003fce:	f7fe fe6f 	bl	8002cb0 <HAL_UART_Transmit>
			break;
 8003fd2:	e00a      	b.n	8003fea <textualProtocolSendStatusMessage+0x7e>

		case STATUS_MESSAGE_VALUE_ERROR:
			HAL_UART_Transmit(&textualProtocol->huart, (uint8_t *) "Value Error\r\n", 13, HAL_MAX_DELAY);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f503 70f0 	add.w	r0, r3, #480	@ 0x1e0
 8003fda:	f04f 33ff 	mov.w	r3, #4294967295
 8003fde:	220d      	movs	r2, #13
 8003fe0:	4907      	ldr	r1, [pc, #28]	@ (8004000 <textualProtocolSendStatusMessage+0x94>)
 8003fe2:	f7fe fe65 	bl	8002cb0 <HAL_UART_Transmit>
			break;
 8003fe6:	e000      	b.n	8003fea <textualProtocolSendStatusMessage+0x7e>

		default:
			break;
 8003fe8:	bf00      	nop
	}
}
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	08004e64 	.word	0x08004e64
 8003ff8:	08004e6c 	.word	0x08004e6c
 8003ffc:	08004e7c 	.word	0x08004e7c
 8004000:	08004e90 	.word	0x08004e90

08004004 <textualProtocolSendNewLine>:

void textualProtocolSendNewLine(TextualProtocol *textualProtocol)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&textualProtocol->huart, (uint8_t *) "\r\n", 2, HAL_MAX_DELAY);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f503 70f0 	add.w	r0, r3, #480	@ 0x1e0
 8004012:	f04f 33ff 	mov.w	r3, #4294967295
 8004016:	2202      	movs	r2, #2
 8004018:	4903      	ldr	r1, [pc, #12]	@ (8004028 <textualProtocolSendNewLine+0x24>)
 800401a:	f7fe fe49 	bl	8002cb0 <HAL_UART_Transmit>
}
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	08004ea0 	.word	0x08004ea0

0800402c <textualProtocolExtractData>:

void textualProtocolExtractData(TextualProtocol *textualProtocol)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
	if (textualProtocol->enableExtractData == TRUE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	799b      	ldrb	r3, [r3, #6]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d122      	bne.n	8004082 <textualProtocolExtractData+0x56>
	{
		textualProtocol->enableExtractData = FALSE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	719a      	strb	r2, [r3, #6]
		if (textualProtocol->dataPacket[0] != textualProtocol->starterChar)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	7a9a      	ldrb	r2, [r3, #10]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d008      	beq.n	8004060 <textualProtocolExtractData+0x34>
		{
			textualProtocolSendStatusMessage(textualProtocol, STATUS_MESSAGE_SYNTAX_ERROR);
 800404e:	21ab      	movs	r1, #171	@ 0xab
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff ff8b 	bl	8003f6c <textualProtocolSendStatusMessage>
			textualProtocolClear(textualProtocol, CLEAR_ALL);
 8004056:	2101      	movs	r1, #1
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff fea9 	bl	8003db0 <textualProtocolClear>
			return;
 800405e:	e010      	b.n	8004082 <textualProtocolExtractData+0x56>
		}

		textualProtocolExtractCommand(textualProtocol);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f811 	bl	8004088 <textualProtocolExtractCommand>
		textualProtocolFindDelimiters(textualProtocol);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f8d2 	bl	8004210 <textualProtocolFindDelimiters>

		if (textualProtocol->qtyOfDelimiters > 0)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	7a5b      	ldrb	r3, [r3, #9]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <textualProtocolExtractData+0x4e>
		{
			textualProtocolExtractValues(textualProtocol);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f8fd 	bl	8004274 <textualProtocolExtractValues>
		}

		textualProtocolClear(textualProtocol, CLEAR_AFTER_EXTRACT_DATA);
 800407a:	2106      	movs	r1, #6
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7ff fe97 	bl	8003db0 <textualProtocolClear>
	}
}
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <textualProtocolExtractCommand>:

void textualProtocolExtractCommand(TextualProtocol *textualProtocol)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
	uint8_t i = 1;
 8004090:	2301      	movs	r3, #1
 8004092:	73fb      	strb	r3, [r7, #15]

	if (((textualProtocol->dataPacket[1] >= 'A') && (textualProtocol->dataPacket[1] <= 'Z'))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	7adb      	ldrb	r3, [r3, #11]
 8004098:	2b40      	cmp	r3, #64	@ 0x40
 800409a:	d903      	bls.n	80040a4 <textualProtocolExtractCommand+0x1c>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	7adb      	ldrb	r3, [r3, #11]
 80040a0:	2b5a      	cmp	r3, #90	@ 0x5a
 80040a2:	d907      	bls.n	80040b4 <textualProtocolExtractCommand+0x2c>
		||
		((textualProtocol->dataPacket[1] >= 'a') && (textualProtocol->dataPacket[1] <= 'z')))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	7adb      	ldrb	r3, [r3, #11]
		||
 80040a8:	2b60      	cmp	r3, #96	@ 0x60
 80040aa:	d934      	bls.n	8004116 <textualProtocolExtractCommand+0x8e>
		((textualProtocol->dataPacket[1] >= 'a') && (textualProtocol->dataPacket[1] <= 'z')))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	7adb      	ldrb	r3, [r3, #11]
 80040b0:	2b7a      	cmp	r3, #122	@ 0x7a
 80040b2:	d830      	bhi.n	8004116 <textualProtocolExtractCommand+0x8e>
	{
		textualProtocol->enableDecodeExtractedCommand = TRUE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	721a      	strb	r2, [r3, #8]
		while (textualProtocol->commandLength < (QTY_MAX_OF_BYTES_IN_COMMAND - 1))
 80040ba:	e027      	b.n	800410c <textualProtocolExtractCommand+0x84>
		{
			if (textualProtocol->dataPacket[i] == textualProtocol->delimiter)
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4413      	add	r3, r2
 80040c2:	7a9a      	ldrb	r2, [r3, #10]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	785b      	ldrb	r3, [r3, #1]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d02d      	beq.n	8004128 <textualProtocolExtractCommand+0xa0>
			{
				return;
			}
			else if ((textualProtocol->dataPacket[i] >= ' ') && (textualProtocol->dataPacket[i] <= '}'))
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	4413      	add	r3, r2
 80040d2:	7a9b      	ldrb	r3, [r3, #10]
 80040d4:	2b1f      	cmp	r3, #31
 80040d6:	d929      	bls.n	800412c <textualProtocolExtractCommand+0xa4>
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	4413      	add	r3, r2
 80040de:	7a9b      	ldrb	r3, [r3, #10]
 80040e0:	2b7d      	cmp	r3, #125	@ 0x7d
 80040e2:	d823      	bhi.n	800412c <textualProtocolExtractCommand+0xa4>
			{
				textualProtocol->command[textualProtocol->commandLength] = textualProtocol->dataPacket[i];
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	7892      	ldrb	r2, [r2, #2]
 80040ea:	4611      	mov	r1, r2
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	4413      	add	r3, r2
 80040f0:	7a9a      	ldrb	r2, [r3, #10]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	440b      	add	r3, r1
 80040f6:	f883 21d1 	strb.w	r2, [r3, #465]	@ 0x1d1
				textualProtocol->commandLength++;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	789b      	ldrb	r3, [r3, #2]
 80040fe:	3301      	adds	r3, #1
 8004100:	b2da      	uxtb	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	709a      	strb	r2, [r3, #2]
				i++;
 8004106:	7bfb      	ldrb	r3, [r7, #15]
 8004108:	3301      	adds	r3, #1
 800410a:	73fb      	strb	r3, [r7, #15]
		while (textualProtocol->commandLength < (QTY_MAX_OF_BYTES_IN_COMMAND - 1))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	789b      	ldrb	r3, [r3, #2]
 8004110:	2b09      	cmp	r3, #9
 8004112:	d9d3      	bls.n	80040bc <textualProtocolExtractCommand+0x34>
	if (((textualProtocol->dataPacket[1] >= 'A') && (textualProtocol->dataPacket[1] <= 'Z'))
 8004114:	e00b      	b.n	800412e <textualProtocolExtractCommand+0xa6>
			}
		}
	}
	else
	{
		textualProtocolSendStatusMessage(textualProtocol, STATUS_MESSAGE_UNKNOWN_COMMAND);
 8004116:	21ac      	movs	r1, #172	@ 0xac
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff ff27 	bl	8003f6c <textualProtocolSendStatusMessage>
		textualProtocolClear(textualProtocol, CLEAR_ALL);
 800411e:	2101      	movs	r1, #1
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7ff fe45 	bl	8003db0 <textualProtocolClear>
		return;
 8004126:	e002      	b.n	800412e <textualProtocolExtractCommand+0xa6>
				return;
 8004128:	bf00      	nop
 800412a:	e000      	b.n	800412e <textualProtocolExtractCommand+0xa6>
				return;
 800412c:	bf00      	nop
	}
}
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <textualProtocolDecodeExtractedCommand>:

void textualProtocolDecodeExtractedCommand(TextualProtocol *textualProtocol)
{
 8004134:	b590      	push	{r4, r7, lr}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
	uint8_t qtyOfFixedCommands = 2;
 800413c:	2302      	movs	r3, #2
 800413e:	737b      	strb	r3, [r7, #13]
	uint8_t currentFixedCommand = 0;
 8004140:	2300      	movs	r3, #0
 8004142:	73fb      	strb	r3, [r7, #15]
	uint8_t currentByteInFixedCommand = 0;
 8004144:	2300      	movs	r3, #0
 8004146:	73bb      	strb	r3, [r7, #14]

	if (textualProtocol->enableDecodeExtractedCommand == TRUE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	7a1b      	ldrb	r3, [r3, #8]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d15a      	bne.n	8004206 <textualProtocolDecodeExtractedCommand+0xd2>
	{
		textualProtocol->enableDecodeExtractedCommand = FALSE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	721a      	strb	r2, [r3, #8]

		for (currentFixedCommand = 0; currentFixedCommand < qtyOfFixedCommands; currentFixedCommand++)
 8004156:	2300      	movs	r3, #0
 8004158:	73fb      	strb	r3, [r7, #15]
 800415a:	e048      	b.n	80041ee <textualProtocolDecodeExtractedCommand+0xba>
		{
			for (currentByteInFixedCommand = 0; currentByteInFixedCommand < QTY_MAX_OF_BYTES_IN_COMMAND; currentByteInFixedCommand++)
 800415c:	2300      	movs	r3, #0
 800415e:	73bb      	strb	r3, [r7, #14]
 8004160:	e03d      	b.n	80041de <textualProtocolDecodeExtractedCommand+0xaa>
			{
				if (textualProtocol->command[currentByteInFixedCommand] != fixedTextualCommands[currentFixedCommand][currentByteInFixedCommand])
 8004162:	7bbb      	ldrb	r3, [r7, #14]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	4413      	add	r3, r2
 8004168:	f893 11d1 	ldrb.w	r1, [r3, #465]	@ 0x1d1
 800416c:	7bfa      	ldrb	r2, [r7, #15]
 800416e:	7bb8      	ldrb	r0, [r7, #14]
 8004170:	4c26      	ldr	r4, [pc, #152]	@ (800420c <textualProtocolDecodeExtractedCommand+0xd8>)
 8004172:	4613      	mov	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	4413      	add	r3, r2
 800417c:	4423      	add	r3, r4
 800417e:	4403      	add	r3, r0
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	4299      	cmp	r1, r3
 8004184:	d12f      	bne.n	80041e6 <textualProtocolDecodeExtractedCommand+0xb2>
				{
					break;
				}

				if (currentByteInFixedCommand == (QTY_MAX_OF_BYTES_IN_COMMAND-1))
 8004186:	7bbb      	ldrb	r3, [r7, #14]
 8004188:	2b0a      	cmp	r3, #10
 800418a:	d125      	bne.n	80041d8 <textualProtocolDecodeExtractedCommand+0xa4>
				{
					if (currentFixedCommand == 0)
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10f      	bne.n	80041b2 <textualProtocolDecodeExtractedCommand+0x7e>
					{
						textualProtocol->commandCode = CMD_RX_SET_ECHO_STATUS;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	70da      	strb	r2, [r3, #3]
						textualProtocol->textualProtocolRxCommandStatus = VALID_RX_COMMAND;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 21dd 	strb.w	r2, [r3, #477]	@ 0x1dd
						textualProtocolSendStatusMessage(textualProtocol, STATUS_MESSAGE_OK);
 80041a0:	21aa      	movs	r1, #170	@ 0xaa
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7ff fee2 	bl	8003f6c <textualProtocolSendStatusMessage>
						//textualProtocolPrintCurrentData(textualProtocol);
						textualProtocolClear(textualProtocol, CLEAR_AFTER_DECODE_EXTRACTED_COMMAND);
 80041a8:	2107      	movs	r1, #7
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7ff fe00 	bl	8003db0 <textualProtocolClear>
						return;
 80041b0:	e029      	b.n	8004206 <textualProtocolDecodeExtractedCommand+0xd2>
					}
					else if (currentFixedCommand == 1)
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d10f      	bne.n	80041d8 <textualProtocolDecodeExtractedCommand+0xa4>
					{
						textualProtocol->commandCode = CMD_RX_SET_BLINK_PATTERN;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	70da      	strb	r2, [r3, #3]
						textualProtocol->textualProtocolRxCommandStatus = VALID_RX_COMMAND;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 21dd 	strb.w	r2, [r3, #477]	@ 0x1dd
						textualProtocolSendStatusMessage(textualProtocol, STATUS_MESSAGE_OK);
 80041c6:	21aa      	movs	r1, #170	@ 0xaa
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff fecf 	bl	8003f6c <textualProtocolSendStatusMessage>
						//textualProtocolPrintCurrentData(textualProtocol);
						textualProtocolClear(textualProtocol, CLEAR_AFTER_DECODE_EXTRACTED_COMMAND);
 80041ce:	2107      	movs	r1, #7
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff fded 	bl	8003db0 <textualProtocolClear>
						return;
 80041d6:	e016      	b.n	8004206 <textualProtocolDecodeExtractedCommand+0xd2>
			for (currentByteInFixedCommand = 0; currentByteInFixedCommand < QTY_MAX_OF_BYTES_IN_COMMAND; currentByteInFixedCommand++)
 80041d8:	7bbb      	ldrb	r3, [r7, #14]
 80041da:	3301      	adds	r3, #1
 80041dc:	73bb      	strb	r3, [r7, #14]
 80041de:	7bbb      	ldrb	r3, [r7, #14]
 80041e0:	2b0a      	cmp	r3, #10
 80041e2:	d9be      	bls.n	8004162 <textualProtocolDecodeExtractedCommand+0x2e>
 80041e4:	e000      	b.n	80041e8 <textualProtocolDecodeExtractedCommand+0xb4>
					break;
 80041e6:	bf00      	nop
		for (currentFixedCommand = 0; currentFixedCommand < qtyOfFixedCommands; currentFixedCommand++)
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	3301      	adds	r3, #1
 80041ec:	73fb      	strb	r3, [r7, #15]
 80041ee:	7bfa      	ldrb	r2, [r7, #15]
 80041f0:	7b7b      	ldrb	r3, [r7, #13]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d3b2      	bcc.n	800415c <textualProtocolDecodeExtractedCommand+0x28>
					}
				}
			}
		}

		textualProtocolSendStatusMessage(textualProtocol, STATUS_MESSAGE_UNKNOWN_COMMAND);
 80041f6:	21ac      	movs	r1, #172	@ 0xac
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7ff feb7 	bl	8003f6c <textualProtocolSendStatusMessage>
		//textualProtocolPrintCurrentData(textualProtocol);
		textualProtocolClear(textualProtocol, CLEAR_ALL);
 80041fe:	2101      	movs	r1, #1
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff fdd5 	bl	8003db0 <textualProtocolClear>
	}
}
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	bd90      	pop	{r4, r7, pc}
 800420c:	08004f24 	.word	0x08004f24

08004210 <textualProtocolFindDelimiters>:

void textualProtocolFindDelimiters(TextualProtocol *textualProtocol)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8004218:	2300      	movs	r3, #0
 800421a:	73fb      	strb	r3, [r7, #15]
	uint8_t i_delimeters = 0;
 800421c:	2300      	movs	r3, #0
 800421e:	73bb      	strb	r3, [r7, #14]

	for (i = 0; i < QTY_MAX_RX_DATA_BYTES; i++)
 8004220:	2300      	movs	r3, #0
 8004222:	73fb      	strb	r3, [r7, #15]
 8004224:	e01c      	b.n	8004260 <textualProtocolFindDelimiters+0x50>
	{
		if (i_delimeters < QTY_MAX_OF_DELIMITERS)
 8004226:	7bbb      	ldrb	r3, [r7, #14]
 8004228:	2b09      	cmp	r3, #9
 800422a:	d816      	bhi.n	800425a <textualProtocolFindDelimiters+0x4a>
		{
			if (textualProtocol->dataPacket[i] == textualProtocol->delimiter)
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	4413      	add	r3, r2
 8004232:	7a9a      	ldrb	r2, [r3, #10]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	785b      	ldrb	r3, [r3, #1]
 8004238:	429a      	cmp	r2, r3
 800423a:	d10e      	bne.n	800425a <textualProtocolFindDelimiters+0x4a>
			{
				textualProtocol->indexesOfDelimiters[i_delimeters] = i;
 800423c:	7bbb      	ldrb	r3, [r7, #14]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	4413      	add	r3, r2
 8004242:	7bfa      	ldrb	r2, [r7, #15]
 8004244:	f883 21c7 	strb.w	r2, [r3, #455]	@ 0x1c7
				textualProtocol->qtyOfDelimiters++;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	7a5b      	ldrb	r3, [r3, #9]
 800424c:	3301      	adds	r3, #1
 800424e:	b2da      	uxtb	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	725a      	strb	r2, [r3, #9]
				i_delimeters++;
 8004254:	7bbb      	ldrb	r3, [r7, #14]
 8004256:	3301      	adds	r3, #1
 8004258:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < QTY_MAX_RX_DATA_BYTES; i++)
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	3301      	adds	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	2bea      	cmp	r3, #234	@ 0xea
 8004264:	d9df      	bls.n	8004226 <textualProtocolFindDelimiters+0x16>
			}
		}
	}
}
 8004266:	bf00      	nop
 8004268:	bf00      	nop
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <textualProtocolExtractValues>:

void textualProtocolExtractValues(TextualProtocol *textualProtocol)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
	uint8_t value = 0;
 800427c:	2300      	movs	r3, #0
 800427e:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 8004280:	2300      	movs	r3, #0
 8004282:	73bb      	strb	r3, [r7, #14]
	for (value = 0; value < textualProtocol->qtyOfDelimiters; value++)
 8004284:	2300      	movs	r3, #0
 8004286:	73fb      	strb	r3, [r7, #15]
 8004288:	e02c      	b.n	80042e4 <textualProtocolExtractValues+0x70>
	{
		for (byte = 0; byte < (QTY_MAX_OF_BYTES_PER_VALUE - 1); byte++)
 800428a:	2300      	movs	r3, #0
 800428c:	73bb      	strb	r3, [r7, #14]
 800428e:	e023      	b.n	80042d8 <textualProtocolExtractValues+0x64>
		{
			uint8_t index_delimiter = textualProtocol->indexesOfDelimiters[value];
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	4413      	add	r3, r2
 8004296:	f893 31c7 	ldrb.w	r3, [r3, #455]	@ 0x1c7
 800429a:	737b      	strb	r3, [r7, #13]
			uint8_t data = textualProtocol->dataPacket[index_delimiter + byte + 1];
 800429c:	7b7a      	ldrb	r2, [r7, #13]
 800429e:	7bbb      	ldrb	r3, [r7, #14]
 80042a0:	4413      	add	r3, r2
 80042a2:	3301      	adds	r3, #1
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	4413      	add	r3, r2
 80042a8:	7a9b      	ldrb	r3, [r3, #10]
 80042aa:	733b      	strb	r3, [r7, #12]
			if ((data == ',') || (data == 0))
 80042ac:	7b3b      	ldrb	r3, [r7, #12]
 80042ae:	2b2c      	cmp	r3, #44	@ 0x2c
 80042b0:	d015      	beq.n	80042de <textualProtocolExtractValues+0x6a>
 80042b2:	7b3b      	ldrb	r3, [r7, #12]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d012      	beq.n	80042de <textualProtocolExtractValues+0x6a>
			{
				break;
			}

			textualProtocol->values[value][byte] = data;
 80042b8:	7bfa      	ldrb	r2, [r7, #15]
 80042ba:	7bb9      	ldrb	r1, [r7, #14]
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	4613      	mov	r3, r2
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	4413      	add	r3, r2
 80042c4:	00da      	lsls	r2, r3, #3
 80042c6:	1ad2      	subs	r2, r2, r3
 80042c8:	1883      	adds	r3, r0, r2
 80042ca:	440b      	add	r3, r1
 80042cc:	33f5      	adds	r3, #245	@ 0xf5
 80042ce:	7b3a      	ldrb	r2, [r7, #12]
 80042d0:	701a      	strb	r2, [r3, #0]
		for (byte = 0; byte < (QTY_MAX_OF_BYTES_PER_VALUE - 1); byte++)
 80042d2:	7bbb      	ldrb	r3, [r7, #14]
 80042d4:	3301      	adds	r3, #1
 80042d6:	73bb      	strb	r3, [r7, #14]
 80042d8:	7bbb      	ldrb	r3, [r7, #14]
 80042da:	2b13      	cmp	r3, #19
 80042dc:	d9d8      	bls.n	8004290 <textualProtocolExtractValues+0x1c>
	for (value = 0; value < textualProtocol->qtyOfDelimiters; value++)
 80042de:	7bfb      	ldrb	r3, [r7, #15]
 80042e0:	3301      	adds	r3, #1
 80042e2:	73fb      	strb	r3, [r7, #15]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	7a5b      	ldrb	r3, [r3, #9]
 80042e8:	7bfa      	ldrb	r2, [r7, #15]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d3cd      	bcc.n	800428a <textualProtocolExtractValues+0x16>
		}
	}
}
 80042ee:	bf00      	nop
 80042f0:	bf00      	nop
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <textualProtocolPrintCurrentData>:

void textualProtocolPrintCurrentData(TextualProtocol *textualProtocol)
{
 80042fc:	b590      	push	{r4, r7, lr}
 80042fe:	b08d      	sub	sp, #52	@ 0x34
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
	char message[35];
	uint8_t value = 0;
 8004304:	2300      	movs	r3, #0
 8004306:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	memset(message, 0x00, 35);
 800430a:	f107 030c 	add.w	r3, r7, #12
 800430e:	2223      	movs	r2, #35	@ 0x23
 8004310:	2100      	movs	r1, #0
 8004312:	4618      	mov	r0, r3
 8004314:	f000 f91a 	bl	800454c <memset>
	sprintf(message, "==============================\r\n");
 8004318:	f107 030c 	add.w	r3, r7, #12
 800431c:	4969      	ldr	r1, [pc, #420]	@ (80044c4 <textualProtocolPrintCurrentData+0x1c8>)
 800431e:	4618      	mov	r0, r3
 8004320:	f000 f8f4 	bl	800450c <siprintf>
	HAL_UART_Transmit(&textualProtocol->huart, ((uint8_t *) message), strlen(message), HAL_MAX_DELAY);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f503 74f0 	add.w	r4, r3, #480	@ 0x1e0
 800432a:	f107 030c 	add.w	r3, r7, #12
 800432e:	4618      	mov	r0, r3
 8004330:	f7fb ff6e 	bl	8000210 <strlen>
 8004334:	4603      	mov	r3, r0
 8004336:	b29a      	uxth	r2, r3
 8004338:	f107 010c 	add.w	r1, r7, #12
 800433c:	f04f 33ff 	mov.w	r3, #4294967295
 8004340:	4620      	mov	r0, r4
 8004342:	f7fe fcb5 	bl	8002cb0 <HAL_UART_Transmit>

	memset(message, 0x00, 35);
 8004346:	f107 030c 	add.w	r3, r7, #12
 800434a:	2223      	movs	r2, #35	@ 0x23
 800434c:	2100      	movs	r1, #0
 800434e:	4618      	mov	r0, r3
 8004350:	f000 f8fc 	bl	800454c <memset>
	sprintf(message, "Starter: '%c'\r\n", textualProtocol->starterChar);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	f107 030c 	add.w	r3, r7, #12
 800435e:	495a      	ldr	r1, [pc, #360]	@ (80044c8 <textualProtocolPrintCurrentData+0x1cc>)
 8004360:	4618      	mov	r0, r3
 8004362:	f000 f8d3 	bl	800450c <siprintf>
	HAL_UART_Transmit(&textualProtocol->huart, ((uint8_t *) message), strlen(message), HAL_MAX_DELAY);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f503 74f0 	add.w	r4, r3, #480	@ 0x1e0
 800436c:	f107 030c 	add.w	r3, r7, #12
 8004370:	4618      	mov	r0, r3
 8004372:	f7fb ff4d 	bl	8000210 <strlen>
 8004376:	4603      	mov	r3, r0
 8004378:	b29a      	uxth	r2, r3
 800437a:	f107 010c 	add.w	r1, r7, #12
 800437e:	f04f 33ff 	mov.w	r3, #4294967295
 8004382:	4620      	mov	r0, r4
 8004384:	f7fe fc94 	bl	8002cb0 <HAL_UART_Transmit>

	memset(message, 0x00, 35);
 8004388:	f107 030c 	add.w	r3, r7, #12
 800438c:	2223      	movs	r2, #35	@ 0x23
 800438e:	2100      	movs	r1, #0
 8004390:	4618      	mov	r0, r3
 8004392:	f000 f8db 	bl	800454c <memset>
	sprintf(message, "Command: '%s'\r\n", textualProtocol->command);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f203 12d1 	addw	r2, r3, #465	@ 0x1d1
 800439c:	f107 030c 	add.w	r3, r7, #12
 80043a0:	494a      	ldr	r1, [pc, #296]	@ (80044cc <textualProtocolPrintCurrentData+0x1d0>)
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 f8b2 	bl	800450c <siprintf>
	HAL_UART_Transmit(&textualProtocol->huart, ((uint8_t *) message), strlen(message), HAL_MAX_DELAY);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f503 74f0 	add.w	r4, r3, #480	@ 0x1e0
 80043ae:	f107 030c 	add.w	r3, r7, #12
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fb ff2c 	bl	8000210 <strlen>
 80043b8:	4603      	mov	r3, r0
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	f107 010c 	add.w	r1, r7, #12
 80043c0:	f04f 33ff 	mov.w	r3, #4294967295
 80043c4:	4620      	mov	r0, r4
 80043c6:	f7fe fc73 	bl	8002cb0 <HAL_UART_Transmit>

	memset(message, 0x00, 35);
 80043ca:	f107 030c 	add.w	r3, r7, #12
 80043ce:	2223      	movs	r2, #35	@ 0x23
 80043d0:	2100      	movs	r1, #0
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 f8ba 	bl	800454c <memset>
	sprintf(message, "Delimiter: '%c'\r\n", textualProtocol->delimiter);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	785b      	ldrb	r3, [r3, #1]
 80043dc:	461a      	mov	r2, r3
 80043de:	f107 030c 	add.w	r3, r7, #12
 80043e2:	493b      	ldr	r1, [pc, #236]	@ (80044d0 <textualProtocolPrintCurrentData+0x1d4>)
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 f891 	bl	800450c <siprintf>
	HAL_UART_Transmit(&textualProtocol->huart, ((uint8_t *) message), strlen(message), HAL_MAX_DELAY);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f503 74f0 	add.w	r4, r3, #480	@ 0x1e0
 80043f0:	f107 030c 	add.w	r3, r7, #12
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fb ff0b 	bl	8000210 <strlen>
 80043fa:	4603      	mov	r3, r0
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	f107 010c 	add.w	r1, r7, #12
 8004402:	f04f 33ff 	mov.w	r3, #4294967295
 8004406:	4620      	mov	r0, r4
 8004408:	f7fe fc52 	bl	8002cb0 <HAL_UART_Transmit>

	for (value = 0; value < QTY_MAX_OF_VALUES; value++)
 800440c:	2300      	movs	r3, #0
 800440e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004412:	e030      	b.n	8004476 <textualProtocolPrintCurrentData+0x17a>
	{
		memset(message, 0x00, 35);
 8004414:	f107 030c 	add.w	r3, r7, #12
 8004418:	2223      	movs	r2, #35	@ 0x23
 800441a:	2100      	movs	r1, #0
 800441c:	4618      	mov	r0, r3
 800441e:	f000 f895 	bl	800454c <memset>
		sprintf(message, "Value %d: %s\r\n", value, textualProtocol->values[value]);
 8004422:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004426:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800442a:	4613      	mov	r3, r2
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	4413      	add	r3, r2
 8004430:	00da      	lsls	r2, r3, #3
 8004432:	1ad2      	subs	r2, r2, r3
 8004434:	f102 03f0 	add.w	r3, r2, #240	@ 0xf0
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	4413      	add	r3, r2
 800443c:	3305      	adds	r3, #5
 800443e:	f107 000c 	add.w	r0, r7, #12
 8004442:	460a      	mov	r2, r1
 8004444:	4923      	ldr	r1, [pc, #140]	@ (80044d4 <textualProtocolPrintCurrentData+0x1d8>)
 8004446:	f000 f861 	bl	800450c <siprintf>
		HAL_UART_Transmit(&textualProtocol->huart, ((uint8_t *) message), strlen(message), HAL_MAX_DELAY);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f503 74f0 	add.w	r4, r3, #480	@ 0x1e0
 8004450:	f107 030c 	add.w	r3, r7, #12
 8004454:	4618      	mov	r0, r3
 8004456:	f7fb fedb 	bl	8000210 <strlen>
 800445a:	4603      	mov	r3, r0
 800445c:	b29a      	uxth	r2, r3
 800445e:	f107 010c 	add.w	r1, r7, #12
 8004462:	f04f 33ff 	mov.w	r3, #4294967295
 8004466:	4620      	mov	r0, r4
 8004468:	f7fe fc22 	bl	8002cb0 <HAL_UART_Transmit>
	for (value = 0; value < QTY_MAX_OF_VALUES; value++)
 800446c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004470:	3301      	adds	r3, #1
 8004472:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004476:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800447a:	2b09      	cmp	r3, #9
 800447c:	d9ca      	bls.n	8004414 <textualProtocolPrintCurrentData+0x118>
	}

	memset(message, 0x00, 35);
 800447e:	f107 030c 	add.w	r3, r7, #12
 8004482:	2223      	movs	r2, #35	@ 0x23
 8004484:	2100      	movs	r1, #0
 8004486:	4618      	mov	r0, r3
 8004488:	f000 f860 	bl	800454c <memset>
	sprintf(message, "==============================\r\n");
 800448c:	f107 030c 	add.w	r3, r7, #12
 8004490:	490c      	ldr	r1, [pc, #48]	@ (80044c4 <textualProtocolPrintCurrentData+0x1c8>)
 8004492:	4618      	mov	r0, r3
 8004494:	f000 f83a 	bl	800450c <siprintf>
	HAL_UART_Transmit(&textualProtocol->huart, ((uint8_t *) message), strlen(message), HAL_MAX_DELAY);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f503 74f0 	add.w	r4, r3, #480	@ 0x1e0
 800449e:	f107 030c 	add.w	r3, r7, #12
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fb feb4 	bl	8000210 <strlen>
 80044a8:	4603      	mov	r3, r0
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	f107 010c 	add.w	r1, r7, #12
 80044b0:	f04f 33ff 	mov.w	r3, #4294967295
 80044b4:	4620      	mov	r0, r4
 80044b6:	f7fe fbfb 	bl	8002cb0 <HAL_UART_Transmit>
}
 80044ba:	bf00      	nop
 80044bc:	3734      	adds	r7, #52	@ 0x34
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd90      	pop	{r4, r7, pc}
 80044c2:	bf00      	nop
 80044c4:	08004ea4 	.word	0x08004ea4
 80044c8:	08004ec8 	.word	0x08004ec8
 80044cc:	08004ed8 	.word	0x08004ed8
 80044d0:	08004ee8 	.word	0x08004ee8
 80044d4:	08004efc 	.word	0x08004efc

080044d8 <textualProtocolGetEchoEnable>:

Bool textualProtocolGetEchoEnable(TextualProtocol *textualProtocol)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
	return textualProtocol->enableEcho;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	79db      	ldrb	r3, [r3, #7]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <textualProtocolGetCommandStatus>:

TextualProtocolRxCommandStatus textualProtocolGetCommandStatus(TextualProtocol *textualProtocol)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
	return textualProtocol->textualProtocolRxCommandStatus;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 31dd 	ldrb.w	r3, [r3, #477]	@ 0x1dd
}
 80044fe:	4618      	mov	r0, r3
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
	...

0800450c <siprintf>:
 800450c:	b40e      	push	{r1, r2, r3}
 800450e:	b500      	push	{lr}
 8004510:	b09c      	sub	sp, #112	@ 0x70
 8004512:	ab1d      	add	r3, sp, #116	@ 0x74
 8004514:	9002      	str	r0, [sp, #8]
 8004516:	9006      	str	r0, [sp, #24]
 8004518:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800451c:	4809      	ldr	r0, [pc, #36]	@ (8004544 <siprintf+0x38>)
 800451e:	9107      	str	r1, [sp, #28]
 8004520:	9104      	str	r1, [sp, #16]
 8004522:	4909      	ldr	r1, [pc, #36]	@ (8004548 <siprintf+0x3c>)
 8004524:	f853 2b04 	ldr.w	r2, [r3], #4
 8004528:	9105      	str	r1, [sp, #20]
 800452a:	6800      	ldr	r0, [r0, #0]
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	a902      	add	r1, sp, #8
 8004530:	f000 f9a2 	bl	8004878 <_svfiprintf_r>
 8004534:	9b02      	ldr	r3, [sp, #8]
 8004536:	2200      	movs	r2, #0
 8004538:	701a      	strb	r2, [r3, #0]
 800453a:	b01c      	add	sp, #112	@ 0x70
 800453c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004540:	b003      	add	sp, #12
 8004542:	4770      	bx	lr
 8004544:	2000000c 	.word	0x2000000c
 8004548:	ffff0208 	.word	0xffff0208

0800454c <memset>:
 800454c:	4402      	add	r2, r0
 800454e:	4603      	mov	r3, r0
 8004550:	4293      	cmp	r3, r2
 8004552:	d100      	bne.n	8004556 <memset+0xa>
 8004554:	4770      	bx	lr
 8004556:	f803 1b01 	strb.w	r1, [r3], #1
 800455a:	e7f9      	b.n	8004550 <memset+0x4>

0800455c <__errno>:
 800455c:	4b01      	ldr	r3, [pc, #4]	@ (8004564 <__errno+0x8>)
 800455e:	6818      	ldr	r0, [r3, #0]
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	2000000c 	.word	0x2000000c

08004568 <__libc_init_array>:
 8004568:	b570      	push	{r4, r5, r6, lr}
 800456a:	4d0d      	ldr	r5, [pc, #52]	@ (80045a0 <__libc_init_array+0x38>)
 800456c:	4c0d      	ldr	r4, [pc, #52]	@ (80045a4 <__libc_init_array+0x3c>)
 800456e:	1b64      	subs	r4, r4, r5
 8004570:	10a4      	asrs	r4, r4, #2
 8004572:	2600      	movs	r6, #0
 8004574:	42a6      	cmp	r6, r4
 8004576:	d109      	bne.n	800458c <__libc_init_array+0x24>
 8004578:	4d0b      	ldr	r5, [pc, #44]	@ (80045a8 <__libc_init_array+0x40>)
 800457a:	4c0c      	ldr	r4, [pc, #48]	@ (80045ac <__libc_init_array+0x44>)
 800457c:	f000 fc66 	bl	8004e4c <_init>
 8004580:	1b64      	subs	r4, r4, r5
 8004582:	10a4      	asrs	r4, r4, #2
 8004584:	2600      	movs	r6, #0
 8004586:	42a6      	cmp	r6, r4
 8004588:	d105      	bne.n	8004596 <__libc_init_array+0x2e>
 800458a:	bd70      	pop	{r4, r5, r6, pc}
 800458c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004590:	4798      	blx	r3
 8004592:	3601      	adds	r6, #1
 8004594:	e7ee      	b.n	8004574 <__libc_init_array+0xc>
 8004596:	f855 3b04 	ldr.w	r3, [r5], #4
 800459a:	4798      	blx	r3
 800459c:	3601      	adds	r6, #1
 800459e:	e7f2      	b.n	8004586 <__libc_init_array+0x1e>
 80045a0:	08004f78 	.word	0x08004f78
 80045a4:	08004f78 	.word	0x08004f78
 80045a8:	08004f78 	.word	0x08004f78
 80045ac:	08004f7c 	.word	0x08004f7c

080045b0 <__retarget_lock_acquire_recursive>:
 80045b0:	4770      	bx	lr

080045b2 <__retarget_lock_release_recursive>:
 80045b2:	4770      	bx	lr

080045b4 <memcpy>:
 80045b4:	440a      	add	r2, r1
 80045b6:	4291      	cmp	r1, r2
 80045b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80045bc:	d100      	bne.n	80045c0 <memcpy+0xc>
 80045be:	4770      	bx	lr
 80045c0:	b510      	push	{r4, lr}
 80045c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045ca:	4291      	cmp	r1, r2
 80045cc:	d1f9      	bne.n	80045c2 <memcpy+0xe>
 80045ce:	bd10      	pop	{r4, pc}

080045d0 <_free_r>:
 80045d0:	b538      	push	{r3, r4, r5, lr}
 80045d2:	4605      	mov	r5, r0
 80045d4:	2900      	cmp	r1, #0
 80045d6:	d041      	beq.n	800465c <_free_r+0x8c>
 80045d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045dc:	1f0c      	subs	r4, r1, #4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	bfb8      	it	lt
 80045e2:	18e4      	addlt	r4, r4, r3
 80045e4:	f000 f8e0 	bl	80047a8 <__malloc_lock>
 80045e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004660 <_free_r+0x90>)
 80045ea:	6813      	ldr	r3, [r2, #0]
 80045ec:	b933      	cbnz	r3, 80045fc <_free_r+0x2c>
 80045ee:	6063      	str	r3, [r4, #4]
 80045f0:	6014      	str	r4, [r2, #0]
 80045f2:	4628      	mov	r0, r5
 80045f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045f8:	f000 b8dc 	b.w	80047b4 <__malloc_unlock>
 80045fc:	42a3      	cmp	r3, r4
 80045fe:	d908      	bls.n	8004612 <_free_r+0x42>
 8004600:	6820      	ldr	r0, [r4, #0]
 8004602:	1821      	adds	r1, r4, r0
 8004604:	428b      	cmp	r3, r1
 8004606:	bf01      	itttt	eq
 8004608:	6819      	ldreq	r1, [r3, #0]
 800460a:	685b      	ldreq	r3, [r3, #4]
 800460c:	1809      	addeq	r1, r1, r0
 800460e:	6021      	streq	r1, [r4, #0]
 8004610:	e7ed      	b.n	80045ee <_free_r+0x1e>
 8004612:	461a      	mov	r2, r3
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	b10b      	cbz	r3, 800461c <_free_r+0x4c>
 8004618:	42a3      	cmp	r3, r4
 800461a:	d9fa      	bls.n	8004612 <_free_r+0x42>
 800461c:	6811      	ldr	r1, [r2, #0]
 800461e:	1850      	adds	r0, r2, r1
 8004620:	42a0      	cmp	r0, r4
 8004622:	d10b      	bne.n	800463c <_free_r+0x6c>
 8004624:	6820      	ldr	r0, [r4, #0]
 8004626:	4401      	add	r1, r0
 8004628:	1850      	adds	r0, r2, r1
 800462a:	4283      	cmp	r3, r0
 800462c:	6011      	str	r1, [r2, #0]
 800462e:	d1e0      	bne.n	80045f2 <_free_r+0x22>
 8004630:	6818      	ldr	r0, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	6053      	str	r3, [r2, #4]
 8004636:	4408      	add	r0, r1
 8004638:	6010      	str	r0, [r2, #0]
 800463a:	e7da      	b.n	80045f2 <_free_r+0x22>
 800463c:	d902      	bls.n	8004644 <_free_r+0x74>
 800463e:	230c      	movs	r3, #12
 8004640:	602b      	str	r3, [r5, #0]
 8004642:	e7d6      	b.n	80045f2 <_free_r+0x22>
 8004644:	6820      	ldr	r0, [r4, #0]
 8004646:	1821      	adds	r1, r4, r0
 8004648:	428b      	cmp	r3, r1
 800464a:	bf04      	itt	eq
 800464c:	6819      	ldreq	r1, [r3, #0]
 800464e:	685b      	ldreq	r3, [r3, #4]
 8004650:	6063      	str	r3, [r4, #4]
 8004652:	bf04      	itt	eq
 8004654:	1809      	addeq	r1, r1, r0
 8004656:	6021      	streq	r1, [r4, #0]
 8004658:	6054      	str	r4, [r2, #4]
 800465a:	e7ca      	b.n	80045f2 <_free_r+0x22>
 800465c:	bd38      	pop	{r3, r4, r5, pc}
 800465e:	bf00      	nop
 8004660:	20000494 	.word	0x20000494

08004664 <sbrk_aligned>:
 8004664:	b570      	push	{r4, r5, r6, lr}
 8004666:	4e0f      	ldr	r6, [pc, #60]	@ (80046a4 <sbrk_aligned+0x40>)
 8004668:	460c      	mov	r4, r1
 800466a:	6831      	ldr	r1, [r6, #0]
 800466c:	4605      	mov	r5, r0
 800466e:	b911      	cbnz	r1, 8004676 <sbrk_aligned+0x12>
 8004670:	f000 fba6 	bl	8004dc0 <_sbrk_r>
 8004674:	6030      	str	r0, [r6, #0]
 8004676:	4621      	mov	r1, r4
 8004678:	4628      	mov	r0, r5
 800467a:	f000 fba1 	bl	8004dc0 <_sbrk_r>
 800467e:	1c43      	adds	r3, r0, #1
 8004680:	d103      	bne.n	800468a <sbrk_aligned+0x26>
 8004682:	f04f 34ff 	mov.w	r4, #4294967295
 8004686:	4620      	mov	r0, r4
 8004688:	bd70      	pop	{r4, r5, r6, pc}
 800468a:	1cc4      	adds	r4, r0, #3
 800468c:	f024 0403 	bic.w	r4, r4, #3
 8004690:	42a0      	cmp	r0, r4
 8004692:	d0f8      	beq.n	8004686 <sbrk_aligned+0x22>
 8004694:	1a21      	subs	r1, r4, r0
 8004696:	4628      	mov	r0, r5
 8004698:	f000 fb92 	bl	8004dc0 <_sbrk_r>
 800469c:	3001      	adds	r0, #1
 800469e:	d1f2      	bne.n	8004686 <sbrk_aligned+0x22>
 80046a0:	e7ef      	b.n	8004682 <sbrk_aligned+0x1e>
 80046a2:	bf00      	nop
 80046a4:	20000490 	.word	0x20000490

080046a8 <_malloc_r>:
 80046a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046ac:	1ccd      	adds	r5, r1, #3
 80046ae:	f025 0503 	bic.w	r5, r5, #3
 80046b2:	3508      	adds	r5, #8
 80046b4:	2d0c      	cmp	r5, #12
 80046b6:	bf38      	it	cc
 80046b8:	250c      	movcc	r5, #12
 80046ba:	2d00      	cmp	r5, #0
 80046bc:	4606      	mov	r6, r0
 80046be:	db01      	blt.n	80046c4 <_malloc_r+0x1c>
 80046c0:	42a9      	cmp	r1, r5
 80046c2:	d904      	bls.n	80046ce <_malloc_r+0x26>
 80046c4:	230c      	movs	r3, #12
 80046c6:	6033      	str	r3, [r6, #0]
 80046c8:	2000      	movs	r0, #0
 80046ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047a4 <_malloc_r+0xfc>
 80046d2:	f000 f869 	bl	80047a8 <__malloc_lock>
 80046d6:	f8d8 3000 	ldr.w	r3, [r8]
 80046da:	461c      	mov	r4, r3
 80046dc:	bb44      	cbnz	r4, 8004730 <_malloc_r+0x88>
 80046de:	4629      	mov	r1, r5
 80046e0:	4630      	mov	r0, r6
 80046e2:	f7ff ffbf 	bl	8004664 <sbrk_aligned>
 80046e6:	1c43      	adds	r3, r0, #1
 80046e8:	4604      	mov	r4, r0
 80046ea:	d158      	bne.n	800479e <_malloc_r+0xf6>
 80046ec:	f8d8 4000 	ldr.w	r4, [r8]
 80046f0:	4627      	mov	r7, r4
 80046f2:	2f00      	cmp	r7, #0
 80046f4:	d143      	bne.n	800477e <_malloc_r+0xd6>
 80046f6:	2c00      	cmp	r4, #0
 80046f8:	d04b      	beq.n	8004792 <_malloc_r+0xea>
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	4639      	mov	r1, r7
 80046fe:	4630      	mov	r0, r6
 8004700:	eb04 0903 	add.w	r9, r4, r3
 8004704:	f000 fb5c 	bl	8004dc0 <_sbrk_r>
 8004708:	4581      	cmp	r9, r0
 800470a:	d142      	bne.n	8004792 <_malloc_r+0xea>
 800470c:	6821      	ldr	r1, [r4, #0]
 800470e:	1a6d      	subs	r5, r5, r1
 8004710:	4629      	mov	r1, r5
 8004712:	4630      	mov	r0, r6
 8004714:	f7ff ffa6 	bl	8004664 <sbrk_aligned>
 8004718:	3001      	adds	r0, #1
 800471a:	d03a      	beq.n	8004792 <_malloc_r+0xea>
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	442b      	add	r3, r5
 8004720:	6023      	str	r3, [r4, #0]
 8004722:	f8d8 3000 	ldr.w	r3, [r8]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	bb62      	cbnz	r2, 8004784 <_malloc_r+0xdc>
 800472a:	f8c8 7000 	str.w	r7, [r8]
 800472e:	e00f      	b.n	8004750 <_malloc_r+0xa8>
 8004730:	6822      	ldr	r2, [r4, #0]
 8004732:	1b52      	subs	r2, r2, r5
 8004734:	d420      	bmi.n	8004778 <_malloc_r+0xd0>
 8004736:	2a0b      	cmp	r2, #11
 8004738:	d917      	bls.n	800476a <_malloc_r+0xc2>
 800473a:	1961      	adds	r1, r4, r5
 800473c:	42a3      	cmp	r3, r4
 800473e:	6025      	str	r5, [r4, #0]
 8004740:	bf18      	it	ne
 8004742:	6059      	strne	r1, [r3, #4]
 8004744:	6863      	ldr	r3, [r4, #4]
 8004746:	bf08      	it	eq
 8004748:	f8c8 1000 	streq.w	r1, [r8]
 800474c:	5162      	str	r2, [r4, r5]
 800474e:	604b      	str	r3, [r1, #4]
 8004750:	4630      	mov	r0, r6
 8004752:	f000 f82f 	bl	80047b4 <__malloc_unlock>
 8004756:	f104 000b 	add.w	r0, r4, #11
 800475a:	1d23      	adds	r3, r4, #4
 800475c:	f020 0007 	bic.w	r0, r0, #7
 8004760:	1ac2      	subs	r2, r0, r3
 8004762:	bf1c      	itt	ne
 8004764:	1a1b      	subne	r3, r3, r0
 8004766:	50a3      	strne	r3, [r4, r2]
 8004768:	e7af      	b.n	80046ca <_malloc_r+0x22>
 800476a:	6862      	ldr	r2, [r4, #4]
 800476c:	42a3      	cmp	r3, r4
 800476e:	bf0c      	ite	eq
 8004770:	f8c8 2000 	streq.w	r2, [r8]
 8004774:	605a      	strne	r2, [r3, #4]
 8004776:	e7eb      	b.n	8004750 <_malloc_r+0xa8>
 8004778:	4623      	mov	r3, r4
 800477a:	6864      	ldr	r4, [r4, #4]
 800477c:	e7ae      	b.n	80046dc <_malloc_r+0x34>
 800477e:	463c      	mov	r4, r7
 8004780:	687f      	ldr	r7, [r7, #4]
 8004782:	e7b6      	b.n	80046f2 <_malloc_r+0x4a>
 8004784:	461a      	mov	r2, r3
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	42a3      	cmp	r3, r4
 800478a:	d1fb      	bne.n	8004784 <_malloc_r+0xdc>
 800478c:	2300      	movs	r3, #0
 800478e:	6053      	str	r3, [r2, #4]
 8004790:	e7de      	b.n	8004750 <_malloc_r+0xa8>
 8004792:	230c      	movs	r3, #12
 8004794:	6033      	str	r3, [r6, #0]
 8004796:	4630      	mov	r0, r6
 8004798:	f000 f80c 	bl	80047b4 <__malloc_unlock>
 800479c:	e794      	b.n	80046c8 <_malloc_r+0x20>
 800479e:	6005      	str	r5, [r0, #0]
 80047a0:	e7d6      	b.n	8004750 <_malloc_r+0xa8>
 80047a2:	bf00      	nop
 80047a4:	20000494 	.word	0x20000494

080047a8 <__malloc_lock>:
 80047a8:	4801      	ldr	r0, [pc, #4]	@ (80047b0 <__malloc_lock+0x8>)
 80047aa:	f7ff bf01 	b.w	80045b0 <__retarget_lock_acquire_recursive>
 80047ae:	bf00      	nop
 80047b0:	2000048c 	.word	0x2000048c

080047b4 <__malloc_unlock>:
 80047b4:	4801      	ldr	r0, [pc, #4]	@ (80047bc <__malloc_unlock+0x8>)
 80047b6:	f7ff befc 	b.w	80045b2 <__retarget_lock_release_recursive>
 80047ba:	bf00      	nop
 80047bc:	2000048c 	.word	0x2000048c

080047c0 <__ssputs_r>:
 80047c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047c4:	688e      	ldr	r6, [r1, #8]
 80047c6:	461f      	mov	r7, r3
 80047c8:	42be      	cmp	r6, r7
 80047ca:	680b      	ldr	r3, [r1, #0]
 80047cc:	4682      	mov	sl, r0
 80047ce:	460c      	mov	r4, r1
 80047d0:	4690      	mov	r8, r2
 80047d2:	d82d      	bhi.n	8004830 <__ssputs_r+0x70>
 80047d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80047d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80047dc:	d026      	beq.n	800482c <__ssputs_r+0x6c>
 80047de:	6965      	ldr	r5, [r4, #20]
 80047e0:	6909      	ldr	r1, [r1, #16]
 80047e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047e6:	eba3 0901 	sub.w	r9, r3, r1
 80047ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047ee:	1c7b      	adds	r3, r7, #1
 80047f0:	444b      	add	r3, r9
 80047f2:	106d      	asrs	r5, r5, #1
 80047f4:	429d      	cmp	r5, r3
 80047f6:	bf38      	it	cc
 80047f8:	461d      	movcc	r5, r3
 80047fa:	0553      	lsls	r3, r2, #21
 80047fc:	d527      	bpl.n	800484e <__ssputs_r+0x8e>
 80047fe:	4629      	mov	r1, r5
 8004800:	f7ff ff52 	bl	80046a8 <_malloc_r>
 8004804:	4606      	mov	r6, r0
 8004806:	b360      	cbz	r0, 8004862 <__ssputs_r+0xa2>
 8004808:	6921      	ldr	r1, [r4, #16]
 800480a:	464a      	mov	r2, r9
 800480c:	f7ff fed2 	bl	80045b4 <memcpy>
 8004810:	89a3      	ldrh	r3, [r4, #12]
 8004812:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800481a:	81a3      	strh	r3, [r4, #12]
 800481c:	6126      	str	r6, [r4, #16]
 800481e:	6165      	str	r5, [r4, #20]
 8004820:	444e      	add	r6, r9
 8004822:	eba5 0509 	sub.w	r5, r5, r9
 8004826:	6026      	str	r6, [r4, #0]
 8004828:	60a5      	str	r5, [r4, #8]
 800482a:	463e      	mov	r6, r7
 800482c:	42be      	cmp	r6, r7
 800482e:	d900      	bls.n	8004832 <__ssputs_r+0x72>
 8004830:	463e      	mov	r6, r7
 8004832:	6820      	ldr	r0, [r4, #0]
 8004834:	4632      	mov	r2, r6
 8004836:	4641      	mov	r1, r8
 8004838:	f000 faa8 	bl	8004d8c <memmove>
 800483c:	68a3      	ldr	r3, [r4, #8]
 800483e:	1b9b      	subs	r3, r3, r6
 8004840:	60a3      	str	r3, [r4, #8]
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	4433      	add	r3, r6
 8004846:	6023      	str	r3, [r4, #0]
 8004848:	2000      	movs	r0, #0
 800484a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800484e:	462a      	mov	r2, r5
 8004850:	f000 fac6 	bl	8004de0 <_realloc_r>
 8004854:	4606      	mov	r6, r0
 8004856:	2800      	cmp	r0, #0
 8004858:	d1e0      	bne.n	800481c <__ssputs_r+0x5c>
 800485a:	6921      	ldr	r1, [r4, #16]
 800485c:	4650      	mov	r0, sl
 800485e:	f7ff feb7 	bl	80045d0 <_free_r>
 8004862:	230c      	movs	r3, #12
 8004864:	f8ca 3000 	str.w	r3, [sl]
 8004868:	89a3      	ldrh	r3, [r4, #12]
 800486a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800486e:	81a3      	strh	r3, [r4, #12]
 8004870:	f04f 30ff 	mov.w	r0, #4294967295
 8004874:	e7e9      	b.n	800484a <__ssputs_r+0x8a>
	...

08004878 <_svfiprintf_r>:
 8004878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800487c:	4698      	mov	r8, r3
 800487e:	898b      	ldrh	r3, [r1, #12]
 8004880:	061b      	lsls	r3, r3, #24
 8004882:	b09d      	sub	sp, #116	@ 0x74
 8004884:	4607      	mov	r7, r0
 8004886:	460d      	mov	r5, r1
 8004888:	4614      	mov	r4, r2
 800488a:	d510      	bpl.n	80048ae <_svfiprintf_r+0x36>
 800488c:	690b      	ldr	r3, [r1, #16]
 800488e:	b973      	cbnz	r3, 80048ae <_svfiprintf_r+0x36>
 8004890:	2140      	movs	r1, #64	@ 0x40
 8004892:	f7ff ff09 	bl	80046a8 <_malloc_r>
 8004896:	6028      	str	r0, [r5, #0]
 8004898:	6128      	str	r0, [r5, #16]
 800489a:	b930      	cbnz	r0, 80048aa <_svfiprintf_r+0x32>
 800489c:	230c      	movs	r3, #12
 800489e:	603b      	str	r3, [r7, #0]
 80048a0:	f04f 30ff 	mov.w	r0, #4294967295
 80048a4:	b01d      	add	sp, #116	@ 0x74
 80048a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048aa:	2340      	movs	r3, #64	@ 0x40
 80048ac:	616b      	str	r3, [r5, #20]
 80048ae:	2300      	movs	r3, #0
 80048b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80048b2:	2320      	movs	r3, #32
 80048b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80048b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80048bc:	2330      	movs	r3, #48	@ 0x30
 80048be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004a5c <_svfiprintf_r+0x1e4>
 80048c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80048c6:	f04f 0901 	mov.w	r9, #1
 80048ca:	4623      	mov	r3, r4
 80048cc:	469a      	mov	sl, r3
 80048ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048d2:	b10a      	cbz	r2, 80048d8 <_svfiprintf_r+0x60>
 80048d4:	2a25      	cmp	r2, #37	@ 0x25
 80048d6:	d1f9      	bne.n	80048cc <_svfiprintf_r+0x54>
 80048d8:	ebba 0b04 	subs.w	fp, sl, r4
 80048dc:	d00b      	beq.n	80048f6 <_svfiprintf_r+0x7e>
 80048de:	465b      	mov	r3, fp
 80048e0:	4622      	mov	r2, r4
 80048e2:	4629      	mov	r1, r5
 80048e4:	4638      	mov	r0, r7
 80048e6:	f7ff ff6b 	bl	80047c0 <__ssputs_r>
 80048ea:	3001      	adds	r0, #1
 80048ec:	f000 80a7 	beq.w	8004a3e <_svfiprintf_r+0x1c6>
 80048f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048f2:	445a      	add	r2, fp
 80048f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80048f6:	f89a 3000 	ldrb.w	r3, [sl]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 809f 	beq.w	8004a3e <_svfiprintf_r+0x1c6>
 8004900:	2300      	movs	r3, #0
 8004902:	f04f 32ff 	mov.w	r2, #4294967295
 8004906:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800490a:	f10a 0a01 	add.w	sl, sl, #1
 800490e:	9304      	str	r3, [sp, #16]
 8004910:	9307      	str	r3, [sp, #28]
 8004912:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004916:	931a      	str	r3, [sp, #104]	@ 0x68
 8004918:	4654      	mov	r4, sl
 800491a:	2205      	movs	r2, #5
 800491c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004920:	484e      	ldr	r0, [pc, #312]	@ (8004a5c <_svfiprintf_r+0x1e4>)
 8004922:	f7fb fc7d 	bl	8000220 <memchr>
 8004926:	9a04      	ldr	r2, [sp, #16]
 8004928:	b9d8      	cbnz	r0, 8004962 <_svfiprintf_r+0xea>
 800492a:	06d0      	lsls	r0, r2, #27
 800492c:	bf44      	itt	mi
 800492e:	2320      	movmi	r3, #32
 8004930:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004934:	0711      	lsls	r1, r2, #28
 8004936:	bf44      	itt	mi
 8004938:	232b      	movmi	r3, #43	@ 0x2b
 800493a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800493e:	f89a 3000 	ldrb.w	r3, [sl]
 8004942:	2b2a      	cmp	r3, #42	@ 0x2a
 8004944:	d015      	beq.n	8004972 <_svfiprintf_r+0xfa>
 8004946:	9a07      	ldr	r2, [sp, #28]
 8004948:	4654      	mov	r4, sl
 800494a:	2000      	movs	r0, #0
 800494c:	f04f 0c0a 	mov.w	ip, #10
 8004950:	4621      	mov	r1, r4
 8004952:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004956:	3b30      	subs	r3, #48	@ 0x30
 8004958:	2b09      	cmp	r3, #9
 800495a:	d94b      	bls.n	80049f4 <_svfiprintf_r+0x17c>
 800495c:	b1b0      	cbz	r0, 800498c <_svfiprintf_r+0x114>
 800495e:	9207      	str	r2, [sp, #28]
 8004960:	e014      	b.n	800498c <_svfiprintf_r+0x114>
 8004962:	eba0 0308 	sub.w	r3, r0, r8
 8004966:	fa09 f303 	lsl.w	r3, r9, r3
 800496a:	4313      	orrs	r3, r2
 800496c:	9304      	str	r3, [sp, #16]
 800496e:	46a2      	mov	sl, r4
 8004970:	e7d2      	b.n	8004918 <_svfiprintf_r+0xa0>
 8004972:	9b03      	ldr	r3, [sp, #12]
 8004974:	1d19      	adds	r1, r3, #4
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	9103      	str	r1, [sp, #12]
 800497a:	2b00      	cmp	r3, #0
 800497c:	bfbb      	ittet	lt
 800497e:	425b      	neglt	r3, r3
 8004980:	f042 0202 	orrlt.w	r2, r2, #2
 8004984:	9307      	strge	r3, [sp, #28]
 8004986:	9307      	strlt	r3, [sp, #28]
 8004988:	bfb8      	it	lt
 800498a:	9204      	strlt	r2, [sp, #16]
 800498c:	7823      	ldrb	r3, [r4, #0]
 800498e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004990:	d10a      	bne.n	80049a8 <_svfiprintf_r+0x130>
 8004992:	7863      	ldrb	r3, [r4, #1]
 8004994:	2b2a      	cmp	r3, #42	@ 0x2a
 8004996:	d132      	bne.n	80049fe <_svfiprintf_r+0x186>
 8004998:	9b03      	ldr	r3, [sp, #12]
 800499a:	1d1a      	adds	r2, r3, #4
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	9203      	str	r2, [sp, #12]
 80049a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80049a4:	3402      	adds	r4, #2
 80049a6:	9305      	str	r3, [sp, #20]
 80049a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004a6c <_svfiprintf_r+0x1f4>
 80049ac:	7821      	ldrb	r1, [r4, #0]
 80049ae:	2203      	movs	r2, #3
 80049b0:	4650      	mov	r0, sl
 80049b2:	f7fb fc35 	bl	8000220 <memchr>
 80049b6:	b138      	cbz	r0, 80049c8 <_svfiprintf_r+0x150>
 80049b8:	9b04      	ldr	r3, [sp, #16]
 80049ba:	eba0 000a 	sub.w	r0, r0, sl
 80049be:	2240      	movs	r2, #64	@ 0x40
 80049c0:	4082      	lsls	r2, r0
 80049c2:	4313      	orrs	r3, r2
 80049c4:	3401      	adds	r4, #1
 80049c6:	9304      	str	r3, [sp, #16]
 80049c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049cc:	4824      	ldr	r0, [pc, #144]	@ (8004a60 <_svfiprintf_r+0x1e8>)
 80049ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80049d2:	2206      	movs	r2, #6
 80049d4:	f7fb fc24 	bl	8000220 <memchr>
 80049d8:	2800      	cmp	r0, #0
 80049da:	d036      	beq.n	8004a4a <_svfiprintf_r+0x1d2>
 80049dc:	4b21      	ldr	r3, [pc, #132]	@ (8004a64 <_svfiprintf_r+0x1ec>)
 80049de:	bb1b      	cbnz	r3, 8004a28 <_svfiprintf_r+0x1b0>
 80049e0:	9b03      	ldr	r3, [sp, #12]
 80049e2:	3307      	adds	r3, #7
 80049e4:	f023 0307 	bic.w	r3, r3, #7
 80049e8:	3308      	adds	r3, #8
 80049ea:	9303      	str	r3, [sp, #12]
 80049ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049ee:	4433      	add	r3, r6
 80049f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80049f2:	e76a      	b.n	80048ca <_svfiprintf_r+0x52>
 80049f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80049f8:	460c      	mov	r4, r1
 80049fa:	2001      	movs	r0, #1
 80049fc:	e7a8      	b.n	8004950 <_svfiprintf_r+0xd8>
 80049fe:	2300      	movs	r3, #0
 8004a00:	3401      	adds	r4, #1
 8004a02:	9305      	str	r3, [sp, #20]
 8004a04:	4619      	mov	r1, r3
 8004a06:	f04f 0c0a 	mov.w	ip, #10
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a10:	3a30      	subs	r2, #48	@ 0x30
 8004a12:	2a09      	cmp	r2, #9
 8004a14:	d903      	bls.n	8004a1e <_svfiprintf_r+0x1a6>
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0c6      	beq.n	80049a8 <_svfiprintf_r+0x130>
 8004a1a:	9105      	str	r1, [sp, #20]
 8004a1c:	e7c4      	b.n	80049a8 <_svfiprintf_r+0x130>
 8004a1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a22:	4604      	mov	r4, r0
 8004a24:	2301      	movs	r3, #1
 8004a26:	e7f0      	b.n	8004a0a <_svfiprintf_r+0x192>
 8004a28:	ab03      	add	r3, sp, #12
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	462a      	mov	r2, r5
 8004a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a68 <_svfiprintf_r+0x1f0>)
 8004a30:	a904      	add	r1, sp, #16
 8004a32:	4638      	mov	r0, r7
 8004a34:	f3af 8000 	nop.w
 8004a38:	1c42      	adds	r2, r0, #1
 8004a3a:	4606      	mov	r6, r0
 8004a3c:	d1d6      	bne.n	80049ec <_svfiprintf_r+0x174>
 8004a3e:	89ab      	ldrh	r3, [r5, #12]
 8004a40:	065b      	lsls	r3, r3, #25
 8004a42:	f53f af2d 	bmi.w	80048a0 <_svfiprintf_r+0x28>
 8004a46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a48:	e72c      	b.n	80048a4 <_svfiprintf_r+0x2c>
 8004a4a:	ab03      	add	r3, sp, #12
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	462a      	mov	r2, r5
 8004a50:	4b05      	ldr	r3, [pc, #20]	@ (8004a68 <_svfiprintf_r+0x1f0>)
 8004a52:	a904      	add	r1, sp, #16
 8004a54:	4638      	mov	r0, r7
 8004a56:	f000 f879 	bl	8004b4c <_printf_i>
 8004a5a:	e7ed      	b.n	8004a38 <_svfiprintf_r+0x1c0>
 8004a5c:	08004f3a 	.word	0x08004f3a
 8004a60:	08004f44 	.word	0x08004f44
 8004a64:	00000000 	.word	0x00000000
 8004a68:	080047c1 	.word	0x080047c1
 8004a6c:	08004f40 	.word	0x08004f40

08004a70 <_printf_common>:
 8004a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a74:	4616      	mov	r6, r2
 8004a76:	4698      	mov	r8, r3
 8004a78:	688a      	ldr	r2, [r1, #8]
 8004a7a:	690b      	ldr	r3, [r1, #16]
 8004a7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a80:	4293      	cmp	r3, r2
 8004a82:	bfb8      	it	lt
 8004a84:	4613      	movlt	r3, r2
 8004a86:	6033      	str	r3, [r6, #0]
 8004a88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a8c:	4607      	mov	r7, r0
 8004a8e:	460c      	mov	r4, r1
 8004a90:	b10a      	cbz	r2, 8004a96 <_printf_common+0x26>
 8004a92:	3301      	adds	r3, #1
 8004a94:	6033      	str	r3, [r6, #0]
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	0699      	lsls	r1, r3, #26
 8004a9a:	bf42      	ittt	mi
 8004a9c:	6833      	ldrmi	r3, [r6, #0]
 8004a9e:	3302      	addmi	r3, #2
 8004aa0:	6033      	strmi	r3, [r6, #0]
 8004aa2:	6825      	ldr	r5, [r4, #0]
 8004aa4:	f015 0506 	ands.w	r5, r5, #6
 8004aa8:	d106      	bne.n	8004ab8 <_printf_common+0x48>
 8004aaa:	f104 0a19 	add.w	sl, r4, #25
 8004aae:	68e3      	ldr	r3, [r4, #12]
 8004ab0:	6832      	ldr	r2, [r6, #0]
 8004ab2:	1a9b      	subs	r3, r3, r2
 8004ab4:	42ab      	cmp	r3, r5
 8004ab6:	dc26      	bgt.n	8004b06 <_printf_common+0x96>
 8004ab8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004abc:	6822      	ldr	r2, [r4, #0]
 8004abe:	3b00      	subs	r3, #0
 8004ac0:	bf18      	it	ne
 8004ac2:	2301      	movne	r3, #1
 8004ac4:	0692      	lsls	r2, r2, #26
 8004ac6:	d42b      	bmi.n	8004b20 <_printf_common+0xb0>
 8004ac8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004acc:	4641      	mov	r1, r8
 8004ace:	4638      	mov	r0, r7
 8004ad0:	47c8      	blx	r9
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	d01e      	beq.n	8004b14 <_printf_common+0xa4>
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	6922      	ldr	r2, [r4, #16]
 8004ada:	f003 0306 	and.w	r3, r3, #6
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	bf02      	ittt	eq
 8004ae2:	68e5      	ldreq	r5, [r4, #12]
 8004ae4:	6833      	ldreq	r3, [r6, #0]
 8004ae6:	1aed      	subeq	r5, r5, r3
 8004ae8:	68a3      	ldr	r3, [r4, #8]
 8004aea:	bf0c      	ite	eq
 8004aec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004af0:	2500      	movne	r5, #0
 8004af2:	4293      	cmp	r3, r2
 8004af4:	bfc4      	itt	gt
 8004af6:	1a9b      	subgt	r3, r3, r2
 8004af8:	18ed      	addgt	r5, r5, r3
 8004afa:	2600      	movs	r6, #0
 8004afc:	341a      	adds	r4, #26
 8004afe:	42b5      	cmp	r5, r6
 8004b00:	d11a      	bne.n	8004b38 <_printf_common+0xc8>
 8004b02:	2000      	movs	r0, #0
 8004b04:	e008      	b.n	8004b18 <_printf_common+0xa8>
 8004b06:	2301      	movs	r3, #1
 8004b08:	4652      	mov	r2, sl
 8004b0a:	4641      	mov	r1, r8
 8004b0c:	4638      	mov	r0, r7
 8004b0e:	47c8      	blx	r9
 8004b10:	3001      	adds	r0, #1
 8004b12:	d103      	bne.n	8004b1c <_printf_common+0xac>
 8004b14:	f04f 30ff 	mov.w	r0, #4294967295
 8004b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b1c:	3501      	adds	r5, #1
 8004b1e:	e7c6      	b.n	8004aae <_printf_common+0x3e>
 8004b20:	18e1      	adds	r1, r4, r3
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	2030      	movs	r0, #48	@ 0x30
 8004b26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b2a:	4422      	add	r2, r4
 8004b2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b34:	3302      	adds	r3, #2
 8004b36:	e7c7      	b.n	8004ac8 <_printf_common+0x58>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	4622      	mov	r2, r4
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	4638      	mov	r0, r7
 8004b40:	47c8      	blx	r9
 8004b42:	3001      	adds	r0, #1
 8004b44:	d0e6      	beq.n	8004b14 <_printf_common+0xa4>
 8004b46:	3601      	adds	r6, #1
 8004b48:	e7d9      	b.n	8004afe <_printf_common+0x8e>
	...

08004b4c <_printf_i>:
 8004b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b50:	7e0f      	ldrb	r7, [r1, #24]
 8004b52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b54:	2f78      	cmp	r7, #120	@ 0x78
 8004b56:	4691      	mov	r9, r2
 8004b58:	4680      	mov	r8, r0
 8004b5a:	460c      	mov	r4, r1
 8004b5c:	469a      	mov	sl, r3
 8004b5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b62:	d807      	bhi.n	8004b74 <_printf_i+0x28>
 8004b64:	2f62      	cmp	r7, #98	@ 0x62
 8004b66:	d80a      	bhi.n	8004b7e <_printf_i+0x32>
 8004b68:	2f00      	cmp	r7, #0
 8004b6a:	f000 80d2 	beq.w	8004d12 <_printf_i+0x1c6>
 8004b6e:	2f58      	cmp	r7, #88	@ 0x58
 8004b70:	f000 80b9 	beq.w	8004ce6 <_printf_i+0x19a>
 8004b74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b7c:	e03a      	b.n	8004bf4 <_printf_i+0xa8>
 8004b7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b82:	2b15      	cmp	r3, #21
 8004b84:	d8f6      	bhi.n	8004b74 <_printf_i+0x28>
 8004b86:	a101      	add	r1, pc, #4	@ (adr r1, 8004b8c <_printf_i+0x40>)
 8004b88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b8c:	08004be5 	.word	0x08004be5
 8004b90:	08004bf9 	.word	0x08004bf9
 8004b94:	08004b75 	.word	0x08004b75
 8004b98:	08004b75 	.word	0x08004b75
 8004b9c:	08004b75 	.word	0x08004b75
 8004ba0:	08004b75 	.word	0x08004b75
 8004ba4:	08004bf9 	.word	0x08004bf9
 8004ba8:	08004b75 	.word	0x08004b75
 8004bac:	08004b75 	.word	0x08004b75
 8004bb0:	08004b75 	.word	0x08004b75
 8004bb4:	08004b75 	.word	0x08004b75
 8004bb8:	08004cf9 	.word	0x08004cf9
 8004bbc:	08004c23 	.word	0x08004c23
 8004bc0:	08004cb3 	.word	0x08004cb3
 8004bc4:	08004b75 	.word	0x08004b75
 8004bc8:	08004b75 	.word	0x08004b75
 8004bcc:	08004d1b 	.word	0x08004d1b
 8004bd0:	08004b75 	.word	0x08004b75
 8004bd4:	08004c23 	.word	0x08004c23
 8004bd8:	08004b75 	.word	0x08004b75
 8004bdc:	08004b75 	.word	0x08004b75
 8004be0:	08004cbb 	.word	0x08004cbb
 8004be4:	6833      	ldr	r3, [r6, #0]
 8004be6:	1d1a      	adds	r2, r3, #4
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6032      	str	r2, [r6, #0]
 8004bec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e09d      	b.n	8004d34 <_printf_i+0x1e8>
 8004bf8:	6833      	ldr	r3, [r6, #0]
 8004bfa:	6820      	ldr	r0, [r4, #0]
 8004bfc:	1d19      	adds	r1, r3, #4
 8004bfe:	6031      	str	r1, [r6, #0]
 8004c00:	0606      	lsls	r6, r0, #24
 8004c02:	d501      	bpl.n	8004c08 <_printf_i+0xbc>
 8004c04:	681d      	ldr	r5, [r3, #0]
 8004c06:	e003      	b.n	8004c10 <_printf_i+0xc4>
 8004c08:	0645      	lsls	r5, r0, #25
 8004c0a:	d5fb      	bpl.n	8004c04 <_printf_i+0xb8>
 8004c0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c10:	2d00      	cmp	r5, #0
 8004c12:	da03      	bge.n	8004c1c <_printf_i+0xd0>
 8004c14:	232d      	movs	r3, #45	@ 0x2d
 8004c16:	426d      	negs	r5, r5
 8004c18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c1c:	4859      	ldr	r0, [pc, #356]	@ (8004d84 <_printf_i+0x238>)
 8004c1e:	230a      	movs	r3, #10
 8004c20:	e011      	b.n	8004c46 <_printf_i+0xfa>
 8004c22:	6821      	ldr	r1, [r4, #0]
 8004c24:	6833      	ldr	r3, [r6, #0]
 8004c26:	0608      	lsls	r0, r1, #24
 8004c28:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c2c:	d402      	bmi.n	8004c34 <_printf_i+0xe8>
 8004c2e:	0649      	lsls	r1, r1, #25
 8004c30:	bf48      	it	mi
 8004c32:	b2ad      	uxthmi	r5, r5
 8004c34:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c36:	4853      	ldr	r0, [pc, #332]	@ (8004d84 <_printf_i+0x238>)
 8004c38:	6033      	str	r3, [r6, #0]
 8004c3a:	bf14      	ite	ne
 8004c3c:	230a      	movne	r3, #10
 8004c3e:	2308      	moveq	r3, #8
 8004c40:	2100      	movs	r1, #0
 8004c42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c46:	6866      	ldr	r6, [r4, #4]
 8004c48:	60a6      	str	r6, [r4, #8]
 8004c4a:	2e00      	cmp	r6, #0
 8004c4c:	bfa2      	ittt	ge
 8004c4e:	6821      	ldrge	r1, [r4, #0]
 8004c50:	f021 0104 	bicge.w	r1, r1, #4
 8004c54:	6021      	strge	r1, [r4, #0]
 8004c56:	b90d      	cbnz	r5, 8004c5c <_printf_i+0x110>
 8004c58:	2e00      	cmp	r6, #0
 8004c5a:	d04b      	beq.n	8004cf4 <_printf_i+0x1a8>
 8004c5c:	4616      	mov	r6, r2
 8004c5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c62:	fb03 5711 	mls	r7, r3, r1, r5
 8004c66:	5dc7      	ldrb	r7, [r0, r7]
 8004c68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c6c:	462f      	mov	r7, r5
 8004c6e:	42bb      	cmp	r3, r7
 8004c70:	460d      	mov	r5, r1
 8004c72:	d9f4      	bls.n	8004c5e <_printf_i+0x112>
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d10b      	bne.n	8004c90 <_printf_i+0x144>
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	07df      	lsls	r7, r3, #31
 8004c7c:	d508      	bpl.n	8004c90 <_printf_i+0x144>
 8004c7e:	6923      	ldr	r3, [r4, #16]
 8004c80:	6861      	ldr	r1, [r4, #4]
 8004c82:	4299      	cmp	r1, r3
 8004c84:	bfde      	ittt	le
 8004c86:	2330      	movle	r3, #48	@ 0x30
 8004c88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c90:	1b92      	subs	r2, r2, r6
 8004c92:	6122      	str	r2, [r4, #16]
 8004c94:	f8cd a000 	str.w	sl, [sp]
 8004c98:	464b      	mov	r3, r9
 8004c9a:	aa03      	add	r2, sp, #12
 8004c9c:	4621      	mov	r1, r4
 8004c9e:	4640      	mov	r0, r8
 8004ca0:	f7ff fee6 	bl	8004a70 <_printf_common>
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	d14a      	bne.n	8004d3e <_printf_i+0x1f2>
 8004ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cac:	b004      	add	sp, #16
 8004cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	f043 0320 	orr.w	r3, r3, #32
 8004cb8:	6023      	str	r3, [r4, #0]
 8004cba:	4833      	ldr	r0, [pc, #204]	@ (8004d88 <_printf_i+0x23c>)
 8004cbc:	2778      	movs	r7, #120	@ 0x78
 8004cbe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	6831      	ldr	r1, [r6, #0]
 8004cc6:	061f      	lsls	r7, r3, #24
 8004cc8:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ccc:	d402      	bmi.n	8004cd4 <_printf_i+0x188>
 8004cce:	065f      	lsls	r7, r3, #25
 8004cd0:	bf48      	it	mi
 8004cd2:	b2ad      	uxthmi	r5, r5
 8004cd4:	6031      	str	r1, [r6, #0]
 8004cd6:	07d9      	lsls	r1, r3, #31
 8004cd8:	bf44      	itt	mi
 8004cda:	f043 0320 	orrmi.w	r3, r3, #32
 8004cde:	6023      	strmi	r3, [r4, #0]
 8004ce0:	b11d      	cbz	r5, 8004cea <_printf_i+0x19e>
 8004ce2:	2310      	movs	r3, #16
 8004ce4:	e7ac      	b.n	8004c40 <_printf_i+0xf4>
 8004ce6:	4827      	ldr	r0, [pc, #156]	@ (8004d84 <_printf_i+0x238>)
 8004ce8:	e7e9      	b.n	8004cbe <_printf_i+0x172>
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	f023 0320 	bic.w	r3, r3, #32
 8004cf0:	6023      	str	r3, [r4, #0]
 8004cf2:	e7f6      	b.n	8004ce2 <_printf_i+0x196>
 8004cf4:	4616      	mov	r6, r2
 8004cf6:	e7bd      	b.n	8004c74 <_printf_i+0x128>
 8004cf8:	6833      	ldr	r3, [r6, #0]
 8004cfa:	6825      	ldr	r5, [r4, #0]
 8004cfc:	6961      	ldr	r1, [r4, #20]
 8004cfe:	1d18      	adds	r0, r3, #4
 8004d00:	6030      	str	r0, [r6, #0]
 8004d02:	062e      	lsls	r6, r5, #24
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	d501      	bpl.n	8004d0c <_printf_i+0x1c0>
 8004d08:	6019      	str	r1, [r3, #0]
 8004d0a:	e002      	b.n	8004d12 <_printf_i+0x1c6>
 8004d0c:	0668      	lsls	r0, r5, #25
 8004d0e:	d5fb      	bpl.n	8004d08 <_printf_i+0x1bc>
 8004d10:	8019      	strh	r1, [r3, #0]
 8004d12:	2300      	movs	r3, #0
 8004d14:	6123      	str	r3, [r4, #16]
 8004d16:	4616      	mov	r6, r2
 8004d18:	e7bc      	b.n	8004c94 <_printf_i+0x148>
 8004d1a:	6833      	ldr	r3, [r6, #0]
 8004d1c:	1d1a      	adds	r2, r3, #4
 8004d1e:	6032      	str	r2, [r6, #0]
 8004d20:	681e      	ldr	r6, [r3, #0]
 8004d22:	6862      	ldr	r2, [r4, #4]
 8004d24:	2100      	movs	r1, #0
 8004d26:	4630      	mov	r0, r6
 8004d28:	f7fb fa7a 	bl	8000220 <memchr>
 8004d2c:	b108      	cbz	r0, 8004d32 <_printf_i+0x1e6>
 8004d2e:	1b80      	subs	r0, r0, r6
 8004d30:	6060      	str	r0, [r4, #4]
 8004d32:	6863      	ldr	r3, [r4, #4]
 8004d34:	6123      	str	r3, [r4, #16]
 8004d36:	2300      	movs	r3, #0
 8004d38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d3c:	e7aa      	b.n	8004c94 <_printf_i+0x148>
 8004d3e:	6923      	ldr	r3, [r4, #16]
 8004d40:	4632      	mov	r2, r6
 8004d42:	4649      	mov	r1, r9
 8004d44:	4640      	mov	r0, r8
 8004d46:	47d0      	blx	sl
 8004d48:	3001      	adds	r0, #1
 8004d4a:	d0ad      	beq.n	8004ca8 <_printf_i+0x15c>
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	079b      	lsls	r3, r3, #30
 8004d50:	d413      	bmi.n	8004d7a <_printf_i+0x22e>
 8004d52:	68e0      	ldr	r0, [r4, #12]
 8004d54:	9b03      	ldr	r3, [sp, #12]
 8004d56:	4298      	cmp	r0, r3
 8004d58:	bfb8      	it	lt
 8004d5a:	4618      	movlt	r0, r3
 8004d5c:	e7a6      	b.n	8004cac <_printf_i+0x160>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	4632      	mov	r2, r6
 8004d62:	4649      	mov	r1, r9
 8004d64:	4640      	mov	r0, r8
 8004d66:	47d0      	blx	sl
 8004d68:	3001      	adds	r0, #1
 8004d6a:	d09d      	beq.n	8004ca8 <_printf_i+0x15c>
 8004d6c:	3501      	adds	r5, #1
 8004d6e:	68e3      	ldr	r3, [r4, #12]
 8004d70:	9903      	ldr	r1, [sp, #12]
 8004d72:	1a5b      	subs	r3, r3, r1
 8004d74:	42ab      	cmp	r3, r5
 8004d76:	dcf2      	bgt.n	8004d5e <_printf_i+0x212>
 8004d78:	e7eb      	b.n	8004d52 <_printf_i+0x206>
 8004d7a:	2500      	movs	r5, #0
 8004d7c:	f104 0619 	add.w	r6, r4, #25
 8004d80:	e7f5      	b.n	8004d6e <_printf_i+0x222>
 8004d82:	bf00      	nop
 8004d84:	08004f4b 	.word	0x08004f4b
 8004d88:	08004f5c 	.word	0x08004f5c

08004d8c <memmove>:
 8004d8c:	4288      	cmp	r0, r1
 8004d8e:	b510      	push	{r4, lr}
 8004d90:	eb01 0402 	add.w	r4, r1, r2
 8004d94:	d902      	bls.n	8004d9c <memmove+0x10>
 8004d96:	4284      	cmp	r4, r0
 8004d98:	4623      	mov	r3, r4
 8004d9a:	d807      	bhi.n	8004dac <memmove+0x20>
 8004d9c:	1e43      	subs	r3, r0, #1
 8004d9e:	42a1      	cmp	r1, r4
 8004da0:	d008      	beq.n	8004db4 <memmove+0x28>
 8004da2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004da6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004daa:	e7f8      	b.n	8004d9e <memmove+0x12>
 8004dac:	4402      	add	r2, r0
 8004dae:	4601      	mov	r1, r0
 8004db0:	428a      	cmp	r2, r1
 8004db2:	d100      	bne.n	8004db6 <memmove+0x2a>
 8004db4:	bd10      	pop	{r4, pc}
 8004db6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dbe:	e7f7      	b.n	8004db0 <memmove+0x24>

08004dc0 <_sbrk_r>:
 8004dc0:	b538      	push	{r3, r4, r5, lr}
 8004dc2:	4d06      	ldr	r5, [pc, #24]	@ (8004ddc <_sbrk_r+0x1c>)
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	4604      	mov	r4, r0
 8004dc8:	4608      	mov	r0, r1
 8004dca:	602b      	str	r3, [r5, #0]
 8004dcc:	f7fc f924 	bl	8001018 <_sbrk>
 8004dd0:	1c43      	adds	r3, r0, #1
 8004dd2:	d102      	bne.n	8004dda <_sbrk_r+0x1a>
 8004dd4:	682b      	ldr	r3, [r5, #0]
 8004dd6:	b103      	cbz	r3, 8004dda <_sbrk_r+0x1a>
 8004dd8:	6023      	str	r3, [r4, #0]
 8004dda:	bd38      	pop	{r3, r4, r5, pc}
 8004ddc:	20000488 	.word	0x20000488

08004de0 <_realloc_r>:
 8004de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004de4:	4680      	mov	r8, r0
 8004de6:	4615      	mov	r5, r2
 8004de8:	460c      	mov	r4, r1
 8004dea:	b921      	cbnz	r1, 8004df6 <_realloc_r+0x16>
 8004dec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004df0:	4611      	mov	r1, r2
 8004df2:	f7ff bc59 	b.w	80046a8 <_malloc_r>
 8004df6:	b92a      	cbnz	r2, 8004e04 <_realloc_r+0x24>
 8004df8:	f7ff fbea 	bl	80045d0 <_free_r>
 8004dfc:	2400      	movs	r4, #0
 8004dfe:	4620      	mov	r0, r4
 8004e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e04:	f000 f81a 	bl	8004e3c <_malloc_usable_size_r>
 8004e08:	4285      	cmp	r5, r0
 8004e0a:	4606      	mov	r6, r0
 8004e0c:	d802      	bhi.n	8004e14 <_realloc_r+0x34>
 8004e0e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004e12:	d8f4      	bhi.n	8004dfe <_realloc_r+0x1e>
 8004e14:	4629      	mov	r1, r5
 8004e16:	4640      	mov	r0, r8
 8004e18:	f7ff fc46 	bl	80046a8 <_malloc_r>
 8004e1c:	4607      	mov	r7, r0
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	d0ec      	beq.n	8004dfc <_realloc_r+0x1c>
 8004e22:	42b5      	cmp	r5, r6
 8004e24:	462a      	mov	r2, r5
 8004e26:	4621      	mov	r1, r4
 8004e28:	bf28      	it	cs
 8004e2a:	4632      	movcs	r2, r6
 8004e2c:	f7ff fbc2 	bl	80045b4 <memcpy>
 8004e30:	4621      	mov	r1, r4
 8004e32:	4640      	mov	r0, r8
 8004e34:	f7ff fbcc 	bl	80045d0 <_free_r>
 8004e38:	463c      	mov	r4, r7
 8004e3a:	e7e0      	b.n	8004dfe <_realloc_r+0x1e>

08004e3c <_malloc_usable_size_r>:
 8004e3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e40:	1f18      	subs	r0, r3, #4
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	bfbc      	itt	lt
 8004e46:	580b      	ldrlt	r3, [r1, r0]
 8004e48:	18c0      	addlt	r0, r0, r3
 8004e4a:	4770      	bx	lr

08004e4c <_init>:
 8004e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4e:	bf00      	nop
 8004e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e52:	bc08      	pop	{r3}
 8004e54:	469e      	mov	lr, r3
 8004e56:	4770      	bx	lr

08004e58 <_fini>:
 8004e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5a:	bf00      	nop
 8004e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e5e:	bc08      	pop	{r3}
 8004e60:	469e      	mov	lr, r3
 8004e62:	4770      	bx	lr


TextualProtocol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b5c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003d20  08003d20  00004d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d4c  08003d4c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d4c  08003d4c  00004d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d54  08003d54  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d54  08003d54  00004d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d58  08003d58  00004d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003d5c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000000c  08003d68  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08003d68  00005188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f316  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002507  00000000  00000000  00014352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00016860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000abb  00000000  00000000  00017628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022382  00000000  00000000  000180e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000118a5  00000000  00000000  0003a465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0a6d  00000000  00000000  0004bd0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c777  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003974  00000000  00000000  0011c7bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00120130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003d08 	.word	0x08003d08

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003d08 	.word	0x08003d08

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <appInit>:
#include "app.h"

// ======== Init =========== //
void appInit(App *app, GPIO_TypeDef* ledPort, uint16_t ledPin,
			UART_HandleTypeDef huart)
{
 80004f4:	b082      	sub	sp, #8
 80004f6:	b580      	push	{r7, lr}
 80004f8:	b084      	sub	sp, #16
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	60f8      	str	r0, [r7, #12]
 80004fe:	60b9      	str	r1, [r7, #8]
 8000500:	61fb      	str	r3, [r7, #28]
 8000502:	4613      	mov	r3, r2
 8000504:	80fb      	strh	r3, [r7, #6]
	// ======== LED =========== //
	blinkLedInit(&app->blinkLed, ledPort, ledPin, PATTERN_TOGGLE_EACH_100_MS);
 8000506:	68f8      	ldr	r0, [r7, #12]
 8000508:	88fa      	ldrh	r2, [r7, #6]
 800050a:	2301      	movs	r3, #1
 800050c:	68b9      	ldr	r1, [r7, #8]
 800050e:	f000 f820 	bl	8000552 <blinkLedInit>
}
 8000512:	bf00      	nop
 8000514:	3710      	adds	r7, #16
 8000516:	46bd      	mov	sp, r7
 8000518:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800051c:	b002      	add	sp, #8
 800051e:	4770      	bx	lr

08000520 <appExecuteBlinkLed>:

// ======== LED =========== //
void appExecuteBlinkLed(App *app)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	blinkLedExecuteBlink(&app->blinkLed);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f83a 	bl	80005a4 <blinkLedExecuteBlink>
}
 8000530:	bf00      	nop
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <appGetBlinkDelay>:

uint32_t appGetBlinkDelay(App *app)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	return blinkLedGetBlinkDelay(&app->blinkLed);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4618      	mov	r0, r3
 8000544:	f000 f964 	bl	8000810 <blinkLedGetBlinkDelay>
 8000548:	4603      	mov	r3, r0
}
 800054a:	4618      	mov	r0, r3
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <blinkLedInit>:

#include "blinkLed.h"

// ======== Init =========== //
void blinkLedInit(BlinkLed *blinkLed, GPIO_TypeDef* ledPort, uint16_t ledPin, uint8_t blinkPattern)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	b084      	sub	sp, #16
 8000556:	af00      	add	r7, sp, #0
 8000558:	60f8      	str	r0, [r7, #12]
 800055a:	60b9      	str	r1, [r7, #8]
 800055c:	4611      	mov	r1, r2
 800055e:	461a      	mov	r2, r3
 8000560:	460b      	mov	r3, r1
 8000562:	80fb      	strh	r3, [r7, #6]
 8000564:	4613      	mov	r3, r2
 8000566:	717b      	strb	r3, [r7, #5]
	blinkLed->ledPort = ledPort;
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	68ba      	ldr	r2, [r7, #8]
 800056c:	609a      	str	r2, [r3, #8]
	blinkLed->ledPin = ledPin;
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	88fa      	ldrh	r2, [r7, #6]
 8000572:	819a      	strh	r2, [r3, #12]
	blinkLed->blinkPattern = blinkPattern;
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	797a      	ldrb	r2, [r7, #5]
 8000578:	715a      	strb	r2, [r3, #5]
	blinkLed->counter = 0;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	2200      	movs	r2, #0
 800057e:	711a      	strb	r2, [r3, #4]
	HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	6898      	ldr	r0, [r3, #8]
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	899b      	ldrh	r3, [r3, #12]
 8000588:	2200      	movs	r2, #0
 800058a:	4619      	mov	r1, r3
 800058c:	f001 f858 	bl	8001640 <HAL_GPIO_WritePin>
	blinkLedSetBlinkDelay(blinkLed, DELAY_100_MILISECONDS);
 8000590:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000594:	68f8      	ldr	r0, [r7, #12]
 8000596:	f000 f947 	bl	8000828 <blinkLedSetBlinkDelay>
}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
	...

080005a4 <blinkLedExecuteBlink>:

// ======== LED =========== //
void blinkLedExecuteBlink(BlinkLed *blinkLed)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	switch (blinkLedGetBlinkPattern(blinkLed))
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f000 f964 	bl	800087a <blinkLedGetBlinkPattern>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b05      	cmp	r3, #5
 80005b6:	f200 8127 	bhi.w	8000808 <blinkLedExecuteBlink+0x264>
 80005ba:	a201      	add	r2, pc, #4	@ (adr r2, 80005c0 <blinkLedExecuteBlink+0x1c>)
 80005bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c0:	080005d9 	.word	0x080005d9
 80005c4:	08000611 	.word	0x08000611
 80005c8:	08000649 	.word	0x08000649
 80005cc:	0800074f 	.word	0x0800074f
 80005d0:	0800062d 	.word	0x0800062d
 80005d4:	080005f5 	.word	0x080005f5
	{
		case PATTERN_ALWAYS_OFF:
			HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6898      	ldr	r0, [r3, #8]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	899b      	ldrh	r3, [r3, #12]
 80005e0:	2200      	movs	r2, #0
 80005e2:	4619      	mov	r1, r3
 80005e4:	f001 f82c 	bl	8001640 <HAL_GPIO_WritePin>
			blinkLedSetBlinkDelay(blinkLed, DELAY_500_MILISECONDS);
 80005e8:	f241 3188 	movw	r1, #5000	@ 0x1388
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 f91b 	bl	8000828 <blinkLedSetBlinkDelay>
			break;
 80005f2:	e109      	b.n	8000808 <blinkLedExecuteBlink+0x264>

		case PATTERN_ALWAYS_ON:
			HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	6898      	ldr	r0, [r3, #8]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	899b      	ldrh	r3, [r3, #12]
 80005fc:	2201      	movs	r2, #1
 80005fe:	4619      	mov	r1, r3
 8000600:	f001 f81e 	bl	8001640 <HAL_GPIO_WritePin>
			blinkLedSetBlinkDelay(blinkLed, DELAY_500_MILISECONDS);
 8000604:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f000 f90d 	bl	8000828 <blinkLedSetBlinkDelay>
			break;
 800060e:	e0fb      	b.n	8000808 <blinkLedExecuteBlink+0x264>

		case PATTERN_TOGGLE_EACH_100_MS:
			HAL_GPIO_TogglePin(blinkLed->ledPort, blinkLed->ledPin);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	689a      	ldr	r2, [r3, #8]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	899b      	ldrh	r3, [r3, #12]
 8000618:	4619      	mov	r1, r3
 800061a:	4610      	mov	r0, r2
 800061c:	f001 f829 	bl	8001672 <HAL_GPIO_TogglePin>
			blinkLedSetBlinkDelay(blinkLed, DELAY_100_MILISECONDS);
 8000620:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 f8ff 	bl	8000828 <blinkLedSetBlinkDelay>
			break;
 800062a:	e0ed      	b.n	8000808 <blinkLedExecuteBlink+0x264>

		case PATTERN_TOGGLE_EACH_250_MS:
			HAL_GPIO_TogglePin(blinkLed->ledPort, blinkLed->ledPin);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	689a      	ldr	r2, [r3, #8]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	899b      	ldrh	r3, [r3, #12]
 8000634:	4619      	mov	r1, r3
 8000636:	4610      	mov	r0, r2
 8000638:	f001 f81b 	bl	8001672 <HAL_GPIO_TogglePin>
			blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 800063c:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f000 f8f1 	bl	8000828 <blinkLedSetBlinkDelay>
			break;
 8000646:	e0df      	b.n	8000808 <blinkLedExecuteBlink+0x264>

		case PATTERN_SHORT_SHORT_LONG:
			switch (blinkLedGetCounter(blinkLed))
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f000 f8fb 	bl	8000844 <blinkLedGetCounter>
 800064e:	4603      	mov	r3, r0
 8000650:	2b05      	cmp	r3, #5
 8000652:	f200 80d6 	bhi.w	8000802 <blinkLedExecuteBlink+0x25e>
 8000656:	a201      	add	r2, pc, #4	@ (adr r2, 800065c <blinkLedExecuteBlink+0xb8>)
 8000658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065c:	08000675 	.word	0x08000675
 8000660:	08000699 	.word	0x08000699
 8000664:	080006bd 	.word	0x080006bd
 8000668:	080006e1 	.word	0x080006e1
 800066c:	08000705 	.word	0x08000705
 8000670:	08000729 	.word	0x08000729
			{
				case 0:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6898      	ldr	r0, [r3, #8]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	899b      	ldrh	r3, [r3, #12]
 800067c:	2201      	movs	r2, #1
 800067e:	4619      	mov	r1, r3
 8000680:	f000 ffde 	bl	8001640 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 8000684:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f000 f8cd 	bl	8000828 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 1);
 800068e:	2101      	movs	r1, #1
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f000 f8e3 	bl	800085c <blinkLedSetCounter>
					break;
 8000696:	e059      	b.n	800074c <blinkLedExecuteBlink+0x1a8>

				case 1:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6898      	ldr	r0, [r3, #8]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	899b      	ldrh	r3, [r3, #12]
 80006a0:	2200      	movs	r2, #0
 80006a2:	4619      	mov	r1, r3
 80006a4:	f000 ffcc 	bl	8001640 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 80006a8:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f000 f8bb 	bl	8000828 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 2);
 80006b2:	2102      	movs	r1, #2
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f000 f8d1 	bl	800085c <blinkLedSetCounter>
					break;
 80006ba:	e047      	b.n	800074c <blinkLedExecuteBlink+0x1a8>

				case 2:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6898      	ldr	r0, [r3, #8]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	899b      	ldrh	r3, [r3, #12]
 80006c4:	2201      	movs	r2, #1
 80006c6:	4619      	mov	r1, r3
 80006c8:	f000 ffba 	bl	8001640 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 80006cc:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f000 f8a9 	bl	8000828 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 3);
 80006d6:	2103      	movs	r1, #3
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f000 f8bf 	bl	800085c <blinkLedSetCounter>
					break;
 80006de:	e035      	b.n	800074c <blinkLedExecuteBlink+0x1a8>

				case 3:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6898      	ldr	r0, [r3, #8]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	899b      	ldrh	r3, [r3, #12]
 80006e8:	2200      	movs	r2, #0
 80006ea:	4619      	mov	r1, r3
 80006ec:	f000 ffa8 	bl	8001640 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 80006f0:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f000 f897 	bl	8000828 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 4);
 80006fa:	2104      	movs	r1, #4
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f000 f8ad 	bl	800085c <blinkLedSetCounter>
					break;
 8000702:	e023      	b.n	800074c <blinkLedExecuteBlink+0x1a8>

				case 4:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	6898      	ldr	r0, [r3, #8]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	899b      	ldrh	r3, [r3, #12]
 800070c:	2201      	movs	r2, #1
 800070e:	4619      	mov	r1, r3
 8000710:	f000 ff96 	bl	8001640 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_750_MILISECONDS);
 8000714:	f641 514c 	movw	r1, #7500	@ 0x1d4c
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f000 f885 	bl	8000828 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 5);
 800071e:	2105      	movs	r1, #5
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f000 f89b 	bl	800085c <blinkLedSetCounter>
					break;
 8000726:	e011      	b.n	800074c <blinkLedExecuteBlink+0x1a8>

				case 5:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6898      	ldr	r0, [r3, #8]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	899b      	ldrh	r3, [r3, #12]
 8000730:	2200      	movs	r2, #0
 8000732:	4619      	mov	r1, r3
 8000734:	f000 ff84 	bl	8001640 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_500_MILISECONDS);
 8000738:	f241 3188 	movw	r1, #5000	@ 0x1388
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f000 f873 	bl	8000828 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 0);
 8000742:	2100      	movs	r1, #0
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 f889 	bl	800085c <blinkLedSetCounter>
					break;
 800074a:	bf00      	nop
			}
			break;
 800074c:	e059      	b.n	8000802 <blinkLedExecuteBlink+0x25e>

		case PATTERN_HEART_BEAT:
			switch (blinkLedGetCounter(blinkLed))
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f000 f878 	bl	8000844 <blinkLedGetCounter>
 8000754:	4603      	mov	r3, r0
 8000756:	2b03      	cmp	r3, #3
 8000758:	d855      	bhi.n	8000806 <blinkLedExecuteBlink+0x262>
 800075a:	a201      	add	r2, pc, #4	@ (adr r2, 8000760 <blinkLedExecuteBlink+0x1bc>)
 800075c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000760:	08000771 	.word	0x08000771
 8000764:	08000795 	.word	0x08000795
 8000768:	080007b9 	.word	0x080007b9
 800076c:	080007dd 	.word	0x080007dd
			{
				case 0:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6898      	ldr	r0, [r3, #8]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	899b      	ldrh	r3, [r3, #12]
 8000778:	2201      	movs	r2, #1
 800077a:	4619      	mov	r1, r3
 800077c:	f000 ff60 	bl	8001640 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_200_MILISECONDS);
 8000780:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f000 f84f 	bl	8000828 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 1);
 800078a:	2101      	movs	r1, #1
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f000 f865 	bl	800085c <blinkLedSetCounter>
					break;
 8000792:	e035      	b.n	8000800 <blinkLedExecuteBlink+0x25c>

				case 1:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	6898      	ldr	r0, [r3, #8]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	899b      	ldrh	r3, [r3, #12]
 800079c:	2200      	movs	r2, #0
 800079e:	4619      	mov	r1, r3
 80007a0:	f000 ff4e 	bl	8001640 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_150_MILISECONDS);
 80007a4:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f000 f83d 	bl	8000828 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 2);
 80007ae:	2102      	movs	r1, #2
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f000 f853 	bl	800085c <blinkLedSetCounter>
					break;
 80007b6:	e023      	b.n	8000800 <blinkLedExecuteBlink+0x25c>

				case 2:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	6898      	ldr	r0, [r3, #8]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	899b      	ldrh	r3, [r3, #12]
 80007c0:	2201      	movs	r2, #1
 80007c2:	4619      	mov	r1, r3
 80007c4:	f000 ff3c 	bl	8001640 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_500_MILISECONDS);
 80007c8:	f241 3188 	movw	r1, #5000	@ 0x1388
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f000 f82b 	bl	8000828 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 3);
 80007d2:	2103      	movs	r1, #3
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f000 f841 	bl	800085c <blinkLedSetCounter>
					break;
 80007da:	e011      	b.n	8000800 <blinkLedExecuteBlink+0x25c>

				case 3:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6898      	ldr	r0, [r3, #8]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	899b      	ldrh	r3, [r3, #12]
 80007e4:	2200      	movs	r2, #0
 80007e6:	4619      	mov	r1, r3
 80007e8:	f000 ff2a 	bl	8001640 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_400_MILISECONDS);
 80007ec:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f000 f819 	bl	8000828 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 0);
 80007f6:	2100      	movs	r1, #0
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f000 f82f 	bl	800085c <blinkLedSetCounter>
					break;
 80007fe:	bf00      	nop
			}
			break;
 8000800:	e001      	b.n	8000806 <blinkLedExecuteBlink+0x262>
			break;
 8000802:	bf00      	nop
 8000804:	e000      	b.n	8000808 <blinkLedExecuteBlink+0x264>
			break;
 8000806:	bf00      	nop
	}
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <blinkLedGetBlinkDelay>:

// ======= Getters and Setters ======== //
uint32_t blinkLedGetBlinkDelay(BlinkLed *blinkLed)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	return blinkLed->blinkDelay;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
}
 800081c:	4618      	mov	r0, r3
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <blinkLedSetBlinkDelay>:

void blinkLedSetBlinkDelay(BlinkLed *blinkLed, uint32_t blinkDelay)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
	blinkLed->blinkDelay = blinkDelay;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	683a      	ldr	r2, [r7, #0]
 8000836:	601a      	str	r2, [r3, #0]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <blinkLedGetCounter>:

uint8_t blinkLedGetCounter(BlinkLed *blinkLed)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	return blinkLed->counter;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	791b      	ldrb	r3, [r3, #4]
}
 8000850:	4618      	mov	r0, r3
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <blinkLedSetCounter>:

void blinkLedSetCounter(BlinkLed *blinkLed, uint8_t counter)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	460b      	mov	r3, r1
 8000866:	70fb      	strb	r3, [r7, #3]
	blinkLed->counter = counter;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	78fa      	ldrb	r2, [r7, #3]
 800086c:	711a      	strb	r2, [r3, #4]
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <blinkLedGetBlinkPattern>:

uint8_t blinkLedGetBlinkPattern(BlinkLed *blinkLed)
{
 800087a:	b480      	push	{r7}
 800087c:	b083      	sub	sp, #12
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
	return blinkLed->blinkPattern;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	795b      	ldrb	r3, [r3, #5]
}
 8000886:	4618      	mov	r0, r3
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
	...

08000894 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Timer interrupt handling (100us)
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	if (htim == &htim9)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a0a      	ldr	r2, [pc, #40]	@ (80008c8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d10b      	bne.n	80008bc <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		sendDataDelay++;
 80008a4:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	3301      	adds	r3, #1
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	4b07      	ldr	r3, [pc, #28]	@ (80008cc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80008ae:	801a      	strh	r2, [r3, #0]
		blinkLedDelay++;
 80008b0:	4b07      	ldr	r3, [pc, #28]	@ (80008d0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	3301      	adds	r3, #1
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	4b05      	ldr	r3, [pc, #20]	@ (80008d0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80008ba:	801a      	strh	r2, [r3, #0]
	}
}
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	20000028 	.word	0x20000028
 80008cc:	200000ba 	.word	0x200000ba
 80008d0:	200000bc 	.word	0x200000bc

080008d4 <HAL_UART_RxCpltCallback>:

/*
 * Interrupt for UART RX
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a11      	ldr	r2, [pc, #68]	@ (8000924 <HAL_UART_RxCpltCallback+0x50>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d11a      	bne.n	800091a <HAL_UART_RxCpltCallback+0x46>
	{
		HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 80008e4:	2201      	movs	r2, #1
 80008e6:	4910      	ldr	r1, [pc, #64]	@ (8000928 <HAL_UART_RxCpltCallback+0x54>)
 80008e8:	480e      	ldr	r0, [pc, #56]	@ (8000924 <HAL_UART_RxCpltCallback+0x50>)
 80008ea:	f002 f964 	bl	8002bb6 <HAL_UART_Receive_IT>
		if (textualProtocolGetEchoEnable(&textProt) == TRUE)
 80008ee:	480f      	ldr	r0, [pc, #60]	@ (800092c <HAL_UART_RxCpltCallback+0x58>)
 80008f0:	f003 f9c3 	bl	8003c7a <textualProtocolGetEchoEnable>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d106      	bne.n	8000908 <HAL_UART_RxCpltCallback+0x34>
		{
			HAL_UART_Transmit(&huart2, &receivedByte, 1, HAL_MAX_DELAY);
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295
 80008fe:	2201      	movs	r2, #1
 8000900:	4909      	ldr	r1, [pc, #36]	@ (8000928 <HAL_UART_RxCpltCallback+0x54>)
 8000902:	4808      	ldr	r0, [pc, #32]	@ (8000924 <HAL_UART_RxCpltCallback+0x50>)
 8000904:	f002 f8cc 	bl	8002aa0 <HAL_UART_Transmit>
		}
		textualProtocolAppendByte(&textProt, receivedByte);
 8000908:	4b07      	ldr	r3, [pc, #28]	@ (8000928 <HAL_UART_RxCpltCallback+0x54>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	4807      	ldr	r0, [pc, #28]	@ (800092c <HAL_UART_RxCpltCallback+0x58>)
 8000910:	f003 f905 	bl	8003b1e <textualProtocolAppendByte>
		receivedByte = 0x00;
 8000914:	4b04      	ldr	r3, [pc, #16]	@ (8000928 <HAL_UART_RxCpltCallback+0x54>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
	}
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000070 	.word	0x20000070
 8000928:	200000b8 	.word	0x200000b8
 800092c:	200000c0 	.word	0x200000c0

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b093      	sub	sp, #76	@ 0x4c
 8000934:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000936:	f000 fad9 	bl	8000eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093a:	f000 f889 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093e:	f000 f95d 	bl	8000bfc <MX_GPIO_Init>
  MX_TIM9_Init();
 8000942:	f000 f8f7 	bl	8000b34 <MX_TIM9_Init>
  MX_USART2_UART_Init();
 8000946:	f000 f92f 	bl	8000ba8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim9);
 800094a:	4838      	ldr	r0, [pc, #224]	@ (8000a2c <main+0xfc>)
 800094c:	f001 fcae 	bl	80022ac <HAL_TIM_Base_Start_IT>
  textualProtocolInit(&textProt, '$', ',', huart2);
 8000950:	4c37      	ldr	r4, [pc, #220]	@ (8000a30 <main+0x100>)
 8000952:	4668      	mov	r0, sp
 8000954:	1d23      	adds	r3, r4, #4
 8000956:	2244      	movs	r2, #68	@ 0x44
 8000958:	4619      	mov	r1, r3
 800095a:	f003 f9c7 	bl	8003cec <memcpy>
 800095e:	6823      	ldr	r3, [r4, #0]
 8000960:	222c      	movs	r2, #44	@ 0x2c
 8000962:	2124      	movs	r1, #36	@ 0x24
 8000964:	4833      	ldr	r0, [pc, #204]	@ (8000a34 <main+0x104>)
 8000966:	f003 f8a1 	bl	8003aac <textualProtocolInit>
  appInit(&app, LED_GPIO_Port, LED_Pin, huart2);
 800096a:	4c31      	ldr	r4, [pc, #196]	@ (8000a30 <main+0x100>)
 800096c:	4668      	mov	r0, sp
 800096e:	1d23      	adds	r3, r4, #4
 8000970:	2244      	movs	r2, #68	@ 0x44
 8000972:	4619      	mov	r1, r3
 8000974:	f003 f9ba 	bl	8003cec <memcpy>
 8000978:	6823      	ldr	r3, [r4, #0]
 800097a:	2220      	movs	r2, #32
 800097c:	492e      	ldr	r1, [pc, #184]	@ (8000a38 <main+0x108>)
 800097e:	482f      	ldr	r0, [pc, #188]	@ (8000a3c <main+0x10c>)
 8000980:	f7ff fdb8 	bl	80004f4 <appInit>
  HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 8000984:	2201      	movs	r2, #1
 8000986:	492e      	ldr	r1, [pc, #184]	@ (8000a40 <main+0x110>)
 8000988:	4829      	ldr	r0, [pc, #164]	@ (8000a30 <main+0x100>)
 800098a:	f002 f914 	bl	8002bb6 <HAL_UART_Receive_IT>

	  /* ============================================================================= */

	  /****************************** STATE MACHINE START ******************************/

	  switch (stateMachine)
 800098e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a44 <main+0x114>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b05      	cmp	r3, #5
 8000994:	d845      	bhi.n	8000a22 <main+0xf2>
 8000996:	a201      	add	r2, pc, #4	@ (adr r2, 800099c <main+0x6c>)
 8000998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800099c:	080009b5 	.word	0x080009b5
 80009a0:	080009db 	.word	0x080009db
 80009a4:	080009f1 	.word	0x080009f1
 80009a8:	08000a0b 	.word	0x08000a0b
 80009ac:	08000a13 	.word	0x08000a13
 80009b0:	08000a1b 	.word	0x08000a1b
	  {
		  case 0:
			  if (blinkLedDelay >= appGetBlinkDelay(&app))
 80009b4:	4b24      	ldr	r3, [pc, #144]	@ (8000a48 <main+0x118>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	461c      	mov	r4, r3
 80009ba:	4820      	ldr	r0, [pc, #128]	@ (8000a3c <main+0x10c>)
 80009bc:	f7ff fdbc 	bl	8000538 <appGetBlinkDelay>
 80009c0:	4603      	mov	r3, r0
 80009c2:	429c      	cmp	r4, r3
 80009c4:	d305      	bcc.n	80009d2 <main+0xa2>
			  {
				  appExecuteBlinkLed(&app);
 80009c6:	481d      	ldr	r0, [pc, #116]	@ (8000a3c <main+0x10c>)
 80009c8:	f7ff fdaa 	bl	8000520 <appExecuteBlinkLed>
				  blinkLedDelay = 0;
 80009cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a48 <main+0x118>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 1;
 80009d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a44 <main+0x114>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	701a      	strb	r2, [r3, #0]
			  break;
 80009d8:	e027      	b.n	8000a2a <main+0xfa>

		  case 1:
			  if (textProt.enableDecoding == TRUE)
 80009da:	4b16      	ldr	r3, [pc, #88]	@ (8000a34 <main+0x104>)
 80009dc:	795b      	ldrb	r3, [r3, #5]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d102      	bne.n	80009e8 <main+0xb8>
			  {
				  textualProtocolDecode(&textProt);
 80009e2:	4814      	ldr	r0, [pc, #80]	@ (8000a34 <main+0x104>)
 80009e4:	f003 f932 	bl	8003c4c <textualProtocolDecode>
			  }
			  stateMachine = 2;
 80009e8:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <main+0x114>)
 80009ea:	2202      	movs	r2, #2
 80009ec:	701a      	strb	r2, [r3, #0]
			  break;
 80009ee:	e01c      	b.n	8000a2a <main+0xfa>

		  case 2:
			  if (sendDataDelay >= DELAY_500_MILISECONDS)
 80009f0:	4b16      	ldr	r3, [pc, #88]	@ (8000a4c <main+0x11c>)
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	f241 3287 	movw	r2, #4999	@ 0x1387
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d902      	bls.n	8000a02 <main+0xd2>
			  {
				  sendDataDelay = 0;
 80009fc:	4b13      	ldr	r3, [pc, #76]	@ (8000a4c <main+0x11c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 3;
 8000a02:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <main+0x114>)
 8000a04:	2203      	movs	r2, #3
 8000a06:	701a      	strb	r2, [r3, #0]
			  break;
 8000a08:	e00f      	b.n	8000a2a <main+0xfa>

		  case 3:
			  stateMachine = 4;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <main+0x114>)
 8000a0c:	2204      	movs	r2, #4
 8000a0e:	701a      	strb	r2, [r3, #0]
			  break;
 8000a10:	e00b      	b.n	8000a2a <main+0xfa>

		  case 4:
			  stateMachine = 5;
 8000a12:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <main+0x114>)
 8000a14:	2205      	movs	r2, #5
 8000a16:	701a      	strb	r2, [r3, #0]
			  break;
 8000a18:	e007      	b.n	8000a2a <main+0xfa>

		  case 5:
			  stateMachine = 0;
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a44 <main+0x114>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
			  break;
 8000a20:	e003      	b.n	8000a2a <main+0xfa>

		  default:
			  stateMachine = 0;
 8000a22:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <main+0x114>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
			  break;
 8000a28:	bf00      	nop
	  switch (stateMachine)
 8000a2a:	e7b0      	b.n	800098e <main+0x5e>
 8000a2c:	20000028 	.word	0x20000028
 8000a30:	20000070 	.word	0x20000070
 8000a34:	200000c0 	.word	0x200000c0
 8000a38:	40020000 	.word	0x40020000
 8000a3c:	20000174 	.word	0x20000174
 8000a40:	200000b8 	.word	0x200000b8
 8000a44:	200000b9 	.word	0x200000b9
 8000a48:	200000bc 	.word	0x200000bc
 8000a4c:	200000ba 	.word	0x200000ba

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b094      	sub	sp, #80	@ 0x50
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	2234      	movs	r2, #52	@ 0x34
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f003 f917 	bl	8003c92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	f107 0308 	add.w	r3, r7, #8
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	4b2c      	ldr	r3, [pc, #176]	@ (8000b2c <SystemClock_Config+0xdc>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7c:	4a2b      	ldr	r2, [pc, #172]	@ (8000b2c <SystemClock_Config+0xdc>)
 8000a7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a84:	4b29      	ldr	r3, [pc, #164]	@ (8000b2c <SystemClock_Config+0xdc>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a90:	2300      	movs	r3, #0
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	4b26      	ldr	r3, [pc, #152]	@ (8000b30 <SystemClock_Config+0xe0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a25      	ldr	r2, [pc, #148]	@ (8000b30 <SystemClock_Config+0xe0>)
 8000a9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a9e:	6013      	str	r3, [r2, #0]
 8000aa0:	4b23      	ldr	r3, [pc, #140]	@ (8000b30 <SystemClock_Config+0xe0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aac:	2302      	movs	r3, #2
 8000aae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab4:	2310      	movs	r3, #16
 8000ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000abc:	2300      	movs	r3, #0
 8000abe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ac0:	2308      	movs	r3, #8
 8000ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000ac4:	23b4      	movs	r3, #180	@ 0xb4
 8000ac6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f001 f8f9 	bl	8001cd0 <HAL_RCC_OscConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ae4:	f000 f8dc 	bl	8000ca0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ae8:	f000 fdde 	bl	80016a8 <HAL_PWREx_EnableOverDrive>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000af2:	f000 f8d5 	bl	8000ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af6:	230f      	movs	r3, #15
 8000af8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afa:	2302      	movs	r3, #2
 8000afc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b02:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b0c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b0e:	f107 0308 	add.w	r3, r7, #8
 8000b12:	2105      	movs	r1, #5
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 fe17 	bl	8001748 <HAL_RCC_ClockConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b20:	f000 f8be 	bl	8000ca0 <Error_Handler>
  }
}
 8000b24:	bf00      	nop
 8000b26:	3750      	adds	r7, #80	@ 0x50
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40007000 	.word	0x40007000

08000b34 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000b46:	4b16      	ldr	r3, [pc, #88]	@ (8000ba0 <MX_TIM9_Init+0x6c>)
 8000b48:	4a16      	ldr	r2, [pc, #88]	@ (8000ba4 <MX_TIM9_Init+0x70>)
 8000b4a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 5-1;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ba0 <MX_TIM9_Init+0x6c>)
 8000b4e:	2204      	movs	r2, #4
 8000b50:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b52:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <MX_TIM9_Init+0x6c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 3665;
 8000b58:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <MX_TIM9_Init+0x6c>)
 8000b5a:	f640 6251 	movw	r2, #3665	@ 0xe51
 8000b5e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <MX_TIM9_Init+0x6c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <MX_TIM9_Init+0x6c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000b6c:	480c      	ldr	r0, [pc, #48]	@ (8000ba0 <MX_TIM9_Init+0x6c>)
 8000b6e:	f001 fb4d 	bl	800220c <HAL_TIM_Base_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8000b78:	f000 f892 	bl	8000ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b80:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000b82:	463b      	mov	r3, r7
 8000b84:	4619      	mov	r1, r3
 8000b86:	4806      	ldr	r0, [pc, #24]	@ (8000ba0 <MX_TIM9_Init+0x6c>)
 8000b88:	f001 fcf0 	bl	800256c <HAL_TIM_ConfigClockSource>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8000b92:	f000 f885 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000028 	.word	0x20000028
 8000ba4:	40014000 	.word	0x40014000

08000ba8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bac:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	@ (8000bf8 <MX_USART2_UART_Init+0x50>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000be0:	f001 ff0e 	bl	8002a00 <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bea:	f000 f859 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000070 	.word	0x20000070
 8000bf8:	40004400 	.word	0x40004400

08000bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	f107 030c 	add.w	r3, r7, #12
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	4b1f      	ldr	r3, [pc, #124]	@ (8000c94 <MX_GPIO_Init+0x98>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8000c94 <MX_GPIO_Init+0x98>)
 8000c1c:	f043 0304 	orr.w	r3, r3, #4
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c22:	4b1c      	ldr	r3, [pc, #112]	@ (8000c94 <MX_GPIO_Init+0x98>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	f003 0304 	and.w	r3, r3, #4
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	4b18      	ldr	r3, [pc, #96]	@ (8000c94 <MX_GPIO_Init+0x98>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	4a17      	ldr	r2, [pc, #92]	@ (8000c94 <MX_GPIO_Init+0x98>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3e:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <MX_GPIO_Init+0x98>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2120      	movs	r1, #32
 8000c4e:	4812      	ldr	r0, [pc, #72]	@ (8000c98 <MX_GPIO_Init+0x9c>)
 8000c50:	f000 fcf6 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000c54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 030c 	add.w	r3, r7, #12
 8000c66:	4619      	mov	r1, r3
 8000c68:	480c      	ldr	r0, [pc, #48]	@ (8000c9c <MX_GPIO_Init+0xa0>)
 8000c6a:	f000 fb55 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c6e:	2320      	movs	r3, #32
 8000c70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	4619      	mov	r1, r3
 8000c84:	4804      	ldr	r0, [pc, #16]	@ (8000c98 <MX_GPIO_Init+0x9c>)
 8000c86:	f000 fb47 	bl	8001318 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c8a:	bf00      	nop
 8000c8c:	3720      	adds	r7, #32
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020000 	.word	0x40020000
 8000c9c:	40020800 	.word	0x40020800

08000ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i
}
 8000ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <Error_Handler+0x8>

08000cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <HAL_MspInit+0x4c>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cba:	4a0f      	ldr	r2, [pc, #60]	@ (8000cf8 <HAL_MspInit+0x4c>)
 8000cbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <HAL_MspInit+0x4c>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	4b09      	ldr	r3, [pc, #36]	@ (8000cf8 <HAL_MspInit+0x4c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	4a08      	ldr	r2, [pc, #32]	@ (8000cf8 <HAL_MspInit+0x4c>)
 8000cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_MspInit+0x4c>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800

08000cfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0e      	ldr	r2, [pc, #56]	@ (8000d44 <HAL_TIM_Base_MspInit+0x48>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d115      	bne.n	8000d3a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b0d      	ldr	r3, [pc, #52]	@ (8000d48 <HAL_TIM_Base_MspInit+0x4c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d16:	4a0c      	ldr	r2, [pc, #48]	@ (8000d48 <HAL_TIM_Base_MspInit+0x4c>)
 8000d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <HAL_TIM_Base_MspInit+0x4c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2018      	movs	r0, #24
 8000d30:	f000 fa29 	bl	8001186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000d34:	2018      	movs	r0, #24
 8000d36:	f000 fa42 	bl	80011be <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM9_MspInit 1 */

  }

}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40014000 	.word	0x40014000
 8000d48:	40023800 	.word	0x40023800

08000d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	@ 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a1d      	ldr	r2, [pc, #116]	@ (8000de0 <HAL_UART_MspInit+0x94>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d133      	bne.n	8000dd6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	4b1c      	ldr	r3, [pc, #112]	@ (8000de4 <HAL_UART_MspInit+0x98>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	4a1b      	ldr	r2, [pc, #108]	@ (8000de4 <HAL_UART_MspInit+0x98>)
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d7e:	4b19      	ldr	r3, [pc, #100]	@ (8000de4 <HAL_UART_MspInit+0x98>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <HAL_UART_MspInit+0x98>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	4a14      	ldr	r2, [pc, #80]	@ (8000de4 <HAL_UART_MspInit+0x98>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9a:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <HAL_UART_MspInit+0x98>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000da6:	230c      	movs	r3, #12
 8000da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db2:	2303      	movs	r3, #3
 8000db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000db6:	2307      	movs	r3, #7
 8000db8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4809      	ldr	r0, [pc, #36]	@ (8000de8 <HAL_UART_MspInit+0x9c>)
 8000dc2:	f000 faa9 	bl	8001318 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2026      	movs	r0, #38	@ 0x26
 8000dcc:	f000 f9db 	bl	8001186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dd0:	2026      	movs	r0, #38	@ 0x26
 8000dd2:	f000 f9f4 	bl	80011be <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	@ 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40004400 	.word	0x40004400
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020000 	.word	0x40020000

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <NMI_Handler+0x4>

08000df4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <MemManage_Handler+0x4>

08000e04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <BusFault_Handler+0x4>

08000e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <UsageFault_Handler+0x4>

08000e14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e42:	f000 f8a5 	bl	8000f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000e50:	4802      	ldr	r0, [pc, #8]	@ (8000e5c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000e52:	f001 fa9b 	bl	800238c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000028 	.word	0x20000028

08000e60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e64:	4802      	ldr	r0, [pc, #8]	@ (8000e70 <USART2_IRQHandler+0x10>)
 8000e66:	f001 fecb 	bl	8002c00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000070 	.word	0x20000070

08000e74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <SystemInit+0x20>)
 8000e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e7e:	4a05      	ldr	r2, [pc, #20]	@ (8000e94 <SystemInit+0x20>)
 8000e80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ed0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e9c:	f7ff ffea 	bl	8000e74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea0:	480c      	ldr	r0, [pc, #48]	@ (8000ed4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ea2:	490d      	ldr	r1, [pc, #52]	@ (8000ed8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8000edc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea8:	e002      	b.n	8000eb0 <LoopCopyDataInit>

08000eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eae:	3304      	adds	r3, #4

08000eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb4:	d3f9      	bcc.n	8000eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ee4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ebc:	e001      	b.n	8000ec2 <LoopFillZerobss>

08000ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec0:	3204      	adds	r2, #4

08000ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec4:	d3fb      	bcc.n	8000ebe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ec6:	f002 feed 	bl	8003ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eca:	f7ff fd31 	bl	8000930 <main>
  bx  lr    
 8000ece:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ed0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000edc:	08003d5c 	.word	0x08003d5c
  ldr r2, =_sbss
 8000ee0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ee4:	20000188 	.word	0x20000188

08000ee8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC_IRQHandler>
	...

08000eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f2c <HAL_Init+0x40>)
 8000ef6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000efc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0a      	ldr	r2, [pc, #40]	@ (8000f2c <HAL_Init+0x40>)
 8000f02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f08:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a07      	ldr	r2, [pc, #28]	@ (8000f2c <HAL_Init+0x40>)
 8000f0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f14:	2003      	movs	r0, #3
 8000f16:	f000 f92b 	bl	8001170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1a:	200f      	movs	r0, #15
 8000f1c:	f000 f808 	bl	8000f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f20:	f7ff fec4 	bl	8000cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023c00 	.word	0x40023c00

08000f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f38:	4b12      	ldr	r3, [pc, #72]	@ (8000f84 <HAL_InitTick+0x54>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b12      	ldr	r3, [pc, #72]	@ (8000f88 <HAL_InitTick+0x58>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f943 	bl	80011da <HAL_SYSTICK_Config>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00e      	b.n	8000f7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b0f      	cmp	r3, #15
 8000f62:	d80a      	bhi.n	8000f7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f64:	2200      	movs	r2, #0
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	f000 f90b 	bl	8001186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f70:	4a06      	ldr	r2, [pc, #24]	@ (8000f8c <HAL_InitTick+0x5c>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e000      	b.n	8000f7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000000 	.word	0x20000000
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000004 	.word	0x20000004

08000f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <HAL_IncTick+0x20>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <HAL_IncTick+0x24>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a04      	ldr	r2, [pc, #16]	@ (8000fb4 <HAL_IncTick+0x24>)
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	20000184 	.word	0x20000184

08000fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return uwTick;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	@ (8000fcc <HAL_GetTick+0x14>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000184 	.word	0x20000184

08000fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fec:	4013      	ands	r3, r2
 8000fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ffc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001002:	4a04      	ldr	r2, [pc, #16]	@ (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	60d3      	str	r3, [r2, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800101c:	4b04      	ldr	r3, [pc, #16]	@ (8001030 <__NVIC_GetPriorityGrouping+0x18>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	f003 0307 	and.w	r3, r3, #7
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	2b00      	cmp	r3, #0
 8001044:	db0b      	blt.n	800105e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	f003 021f 	and.w	r2, r3, #31
 800104c:	4907      	ldr	r1, [pc, #28]	@ (800106c <__NVIC_EnableIRQ+0x38>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	095b      	lsrs	r3, r3, #5
 8001054:	2001      	movs	r0, #1
 8001056:	fa00 f202 	lsl.w	r2, r0, r2
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000e100 	.word	0xe000e100

08001070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	db0a      	blt.n	800109a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	b2da      	uxtb	r2, r3
 8001088:	490c      	ldr	r1, [pc, #48]	@ (80010bc <__NVIC_SetPriority+0x4c>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	0112      	lsls	r2, r2, #4
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	440b      	add	r3, r1
 8001094:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001098:	e00a      	b.n	80010b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4908      	ldr	r1, [pc, #32]	@ (80010c0 <__NVIC_SetPriority+0x50>)
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	3b04      	subs	r3, #4
 80010a8:	0112      	lsls	r2, r2, #4
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	440b      	add	r3, r1
 80010ae:	761a      	strb	r2, [r3, #24]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000e100 	.word	0xe000e100
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	@ 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f1c3 0307 	rsb	r3, r3, #7
 80010de:	2b04      	cmp	r3, #4
 80010e0:	bf28      	it	cs
 80010e2:	2304      	movcs	r3, #4
 80010e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3304      	adds	r3, #4
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d902      	bls.n	80010f4 <NVIC_EncodePriority+0x30>
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3b03      	subs	r3, #3
 80010f2:	e000      	b.n	80010f6 <NVIC_EncodePriority+0x32>
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	f04f 32ff 	mov.w	r2, #4294967295
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43da      	mvns	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	401a      	ands	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800110c:	f04f 31ff 	mov.w	r1, #4294967295
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	43d9      	mvns	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	4313      	orrs	r3, r2
         );
}
 800111e:	4618      	mov	r0, r3
 8001120:	3724      	adds	r7, #36	@ 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800113c:	d301      	bcc.n	8001142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113e:	2301      	movs	r3, #1
 8001140:	e00f      	b.n	8001162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001142:	4a0a      	ldr	r2, [pc, #40]	@ (800116c <SysTick_Config+0x40>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114a:	210f      	movs	r1, #15
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f7ff ff8e 	bl	8001070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001154:	4b05      	ldr	r3, [pc, #20]	@ (800116c <SysTick_Config+0x40>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115a:	4b04      	ldr	r3, [pc, #16]	@ (800116c <SysTick_Config+0x40>)
 800115c:	2207      	movs	r2, #7
 800115e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	e000e010 	.word	0xe000e010

08001170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff29 	bl	8000fd0 <__NVIC_SetPriorityGrouping>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001186:	b580      	push	{r7, lr}
 8001188:	b086      	sub	sp, #24
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001198:	f7ff ff3e 	bl	8001018 <__NVIC_GetPriorityGrouping>
 800119c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f7ff ff8e 	bl	80010c4 <NVIC_EncodePriority>
 80011a8:	4602      	mov	r2, r0
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff5d 	bl	8001070 <__NVIC_SetPriority>
}
 80011b6:	bf00      	nop
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff31 	bl	8001034 <__NVIC_EnableIRQ>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ffa2 	bl	800112c <SysTick_Config>
 80011e8:	4603      	mov	r3, r0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b084      	sub	sp, #16
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001200:	f7ff feda 	bl	8000fb8 <HAL_GetTick>
 8001204:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d008      	beq.n	8001224 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2280      	movs	r2, #128	@ 0x80
 8001216:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e052      	b.n	80012ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0216 	bic.w	r2, r2, #22
 8001232:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	695a      	ldr	r2, [r3, #20]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001242:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001248:	2b00      	cmp	r3, #0
 800124a:	d103      	bne.n	8001254 <HAL_DMA_Abort+0x62>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001250:	2b00      	cmp	r3, #0
 8001252:	d007      	beq.n	8001264 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 0208 	bic.w	r2, r2, #8
 8001262:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 0201 	bic.w	r2, r2, #1
 8001272:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001274:	e013      	b.n	800129e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001276:	f7ff fe9f 	bl	8000fb8 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b05      	cmp	r3, #5
 8001282:	d90c      	bls.n	800129e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2220      	movs	r2, #32
 8001288:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2203      	movs	r2, #3
 800128e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e015      	b.n	80012ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1e4      	bne.n	8001276 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012b0:	223f      	movs	r2, #63	@ 0x3f
 80012b2:	409a      	lsls	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2201      	movs	r2, #1
 80012bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d004      	beq.n	80012f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2280      	movs	r2, #128	@ 0x80
 80012ea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e00c      	b.n	800130a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2205      	movs	r2, #5
 80012f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0201 	bic.w	r2, r2, #1
 8001306:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	@ 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800132a:	2300      	movs	r3, #0
 800132c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
 8001332:	e165      	b.n	8001600 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001334:	2201      	movs	r2, #1
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	429a      	cmp	r2, r3
 800134e:	f040 8154 	bne.w	80015fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	2b01      	cmp	r3, #1
 800135c:	d005      	beq.n	800136a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001366:	2b02      	cmp	r3, #2
 8001368:	d130      	bne.n	80013cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	2203      	movs	r2, #3
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	68da      	ldr	r2, [r3, #12]
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013a0:	2201      	movs	r2, #1
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	091b      	lsrs	r3, r3, #4
 80013b6:	f003 0201 	and.w	r2, r3, #1
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d017      	beq.n	8001408 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	2203      	movs	r2, #3
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d123      	bne.n	800145c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	08da      	lsrs	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3208      	adds	r2, #8
 800141c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001420:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	220f      	movs	r2, #15
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	691a      	ldr	r2, [r3, #16]
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	08da      	lsrs	r2, r3, #3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3208      	adds	r2, #8
 8001456:	69b9      	ldr	r1, [r7, #24]
 8001458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	2203      	movs	r2, #3
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0203 	and.w	r2, r3, #3
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80ae 	beq.w	80015fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001618 <HAL_GPIO_Init+0x300>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a6:	4a5c      	ldr	r2, [pc, #368]	@ (8001618 <HAL_GPIO_Init+0x300>)
 80014a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ae:	4b5a      	ldr	r3, [pc, #360]	@ (8001618 <HAL_GPIO_Init+0x300>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ba:	4a58      	ldr	r2, [pc, #352]	@ (800161c <HAL_GPIO_Init+0x304>)
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	089b      	lsrs	r3, r3, #2
 80014c0:	3302      	adds	r3, #2
 80014c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	220f      	movs	r2, #15
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43db      	mvns	r3, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4013      	ands	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001620 <HAL_GPIO_Init+0x308>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d025      	beq.n	8001532 <HAL_GPIO_Init+0x21a>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001624 <HAL_GPIO_Init+0x30c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d01f      	beq.n	800152e <HAL_GPIO_Init+0x216>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001628 <HAL_GPIO_Init+0x310>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d019      	beq.n	800152a <HAL_GPIO_Init+0x212>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a4c      	ldr	r2, [pc, #304]	@ (800162c <HAL_GPIO_Init+0x314>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d013      	beq.n	8001526 <HAL_GPIO_Init+0x20e>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a4b      	ldr	r2, [pc, #300]	@ (8001630 <HAL_GPIO_Init+0x318>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d00d      	beq.n	8001522 <HAL_GPIO_Init+0x20a>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a4a      	ldr	r2, [pc, #296]	@ (8001634 <HAL_GPIO_Init+0x31c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d007      	beq.n	800151e <HAL_GPIO_Init+0x206>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a49      	ldr	r2, [pc, #292]	@ (8001638 <HAL_GPIO_Init+0x320>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d101      	bne.n	800151a <HAL_GPIO_Init+0x202>
 8001516:	2306      	movs	r3, #6
 8001518:	e00c      	b.n	8001534 <HAL_GPIO_Init+0x21c>
 800151a:	2307      	movs	r3, #7
 800151c:	e00a      	b.n	8001534 <HAL_GPIO_Init+0x21c>
 800151e:	2305      	movs	r3, #5
 8001520:	e008      	b.n	8001534 <HAL_GPIO_Init+0x21c>
 8001522:	2304      	movs	r3, #4
 8001524:	e006      	b.n	8001534 <HAL_GPIO_Init+0x21c>
 8001526:	2303      	movs	r3, #3
 8001528:	e004      	b.n	8001534 <HAL_GPIO_Init+0x21c>
 800152a:	2302      	movs	r3, #2
 800152c:	e002      	b.n	8001534 <HAL_GPIO_Init+0x21c>
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <HAL_GPIO_Init+0x21c>
 8001532:	2300      	movs	r3, #0
 8001534:	69fa      	ldr	r2, [r7, #28]
 8001536:	f002 0203 	and.w	r2, r2, #3
 800153a:	0092      	lsls	r2, r2, #2
 800153c:	4093      	lsls	r3, r2
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001544:	4935      	ldr	r1, [pc, #212]	@ (800161c <HAL_GPIO_Init+0x304>)
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	3302      	adds	r3, #2
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001552:	4b3a      	ldr	r3, [pc, #232]	@ (800163c <HAL_GPIO_Init+0x324>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001576:	4a31      	ldr	r2, [pc, #196]	@ (800163c <HAL_GPIO_Init+0x324>)
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800157c:	4b2f      	ldr	r3, [pc, #188]	@ (800163c <HAL_GPIO_Init+0x324>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015a0:	4a26      	ldr	r2, [pc, #152]	@ (800163c <HAL_GPIO_Init+0x324>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015a6:	4b25      	ldr	r3, [pc, #148]	@ (800163c <HAL_GPIO_Init+0x324>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015ca:	4a1c      	ldr	r2, [pc, #112]	@ (800163c <HAL_GPIO_Init+0x324>)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015d0:	4b1a      	ldr	r3, [pc, #104]	@ (800163c <HAL_GPIO_Init+0x324>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015f4:	4a11      	ldr	r2, [pc, #68]	@ (800163c <HAL_GPIO_Init+0x324>)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3301      	adds	r3, #1
 80015fe:	61fb      	str	r3, [r7, #28]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	2b0f      	cmp	r3, #15
 8001604:	f67f ae96 	bls.w	8001334 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	3724      	adds	r7, #36	@ 0x24
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	40013800 	.word	0x40013800
 8001620:	40020000 	.word	0x40020000
 8001624:	40020400 	.word	0x40020400
 8001628:	40020800 	.word	0x40020800
 800162c:	40020c00 	.word	0x40020c00
 8001630:	40021000 	.word	0x40021000
 8001634:	40021400 	.word	0x40021400
 8001638:	40021800 	.word	0x40021800
 800163c:	40013c00 	.word	0x40013c00

08001640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	807b      	strh	r3, [r7, #2]
 800164c:	4613      	mov	r3, r2
 800164e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001650:	787b      	ldrb	r3, [r7, #1]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001656:	887a      	ldrh	r2, [r7, #2]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800165c:	e003      	b.n	8001666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800165e:	887b      	ldrh	r3, [r7, #2]
 8001660:	041a      	lsls	r2, r3, #16
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	619a      	str	r2, [r3, #24]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001672:	b480      	push	{r7}
 8001674:	b085      	sub	sp, #20
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	460b      	mov	r3, r1
 800167c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001684:	887a      	ldrh	r2, [r7, #2]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4013      	ands	r3, r2
 800168a:	041a      	lsls	r2, r3, #16
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	43d9      	mvns	r1, r3
 8001690:	887b      	ldrh	r3, [r7, #2]
 8001692:	400b      	ands	r3, r1
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	619a      	str	r2, [r3, #24]
}
 800169a:	bf00      	nop
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	603b      	str	r3, [r7, #0]
 80016b6:	4b20      	ldr	r3, [pc, #128]	@ (8001738 <HAL_PWREx_EnableOverDrive+0x90>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001738 <HAL_PWREx_EnableOverDrive+0x90>)
 80016bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001738 <HAL_PWREx_EnableOverDrive+0x90>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80016ce:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <HAL_PWREx_EnableOverDrive+0x94>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016d4:	f7ff fc70 	bl	8000fb8 <HAL_GetTick>
 80016d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80016da:	e009      	b.n	80016f0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016dc:	f7ff fc6c 	bl	8000fb8 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016ea:	d901      	bls.n	80016f0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e01f      	b.n	8001730 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80016f0:	4b13      	ldr	r3, [pc, #76]	@ (8001740 <HAL_PWREx_EnableOverDrive+0x98>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016fc:	d1ee      	bne.n	80016dc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80016fe:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001700:	2201      	movs	r2, #1
 8001702:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001704:	f7ff fc58 	bl	8000fb8 <HAL_GetTick>
 8001708:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800170a:	e009      	b.n	8001720 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800170c:	f7ff fc54 	bl	8000fb8 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800171a:	d901      	bls.n	8001720 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e007      	b.n	8001730 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001720:	4b07      	ldr	r3, [pc, #28]	@ (8001740 <HAL_PWREx_EnableOverDrive+0x98>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001728:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800172c:	d1ee      	bne.n	800170c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40023800 	.word	0x40023800
 800173c:	420e0040 	.word	0x420e0040
 8001740:	40007000 	.word	0x40007000
 8001744:	420e0044 	.word	0x420e0044

08001748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e0cc      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800175c:	4b68      	ldr	r3, [pc, #416]	@ (8001900 <HAL_RCC_ClockConfig+0x1b8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 030f 	and.w	r3, r3, #15
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d90c      	bls.n	8001784 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176a:	4b65      	ldr	r3, [pc, #404]	@ (8001900 <HAL_RCC_ClockConfig+0x1b8>)
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001772:	4b63      	ldr	r3, [pc, #396]	@ (8001900 <HAL_RCC_ClockConfig+0x1b8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d001      	beq.n	8001784 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e0b8      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d020      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800179c:	4b59      	ldr	r3, [pc, #356]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	4a58      	ldr	r2, [pc, #352]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0308 	and.w	r3, r3, #8
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b4:	4b53      	ldr	r3, [pc, #332]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	4a52      	ldr	r2, [pc, #328]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c0:	4b50      	ldr	r3, [pc, #320]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	494d      	ldr	r1, [pc, #308]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d044      	beq.n	8001868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e6:	4b47      	ldr	r3, [pc, #284]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d119      	bne.n	8001826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e07f      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d003      	beq.n	8001806 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001802:	2b03      	cmp	r3, #3
 8001804:	d107      	bne.n	8001816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001806:	4b3f      	ldr	r3, [pc, #252]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d109      	bne.n	8001826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e06f      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001816:	4b3b      	ldr	r3, [pc, #236]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e067      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001826:	4b37      	ldr	r3, [pc, #220]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f023 0203 	bic.w	r2, r3, #3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	4934      	ldr	r1, [pc, #208]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	4313      	orrs	r3, r2
 8001836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001838:	f7ff fbbe 	bl	8000fb8 <HAL_GetTick>
 800183c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183e:	e00a      	b.n	8001856 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001840:	f7ff fbba 	bl	8000fb8 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800184e:	4293      	cmp	r3, r2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e04f      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001856:	4b2b      	ldr	r3, [pc, #172]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 020c 	and.w	r2, r3, #12
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	429a      	cmp	r2, r3
 8001866:	d1eb      	bne.n	8001840 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001868:	4b25      	ldr	r3, [pc, #148]	@ (8001900 <HAL_RCC_ClockConfig+0x1b8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 030f 	and.w	r3, r3, #15
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d20c      	bcs.n	8001890 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001876:	4b22      	ldr	r3, [pc, #136]	@ (8001900 <HAL_RCC_ClockConfig+0x1b8>)
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800187e:	4b20      	ldr	r3, [pc, #128]	@ (8001900 <HAL_RCC_ClockConfig+0x1b8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d001      	beq.n	8001890 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e032      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d008      	beq.n	80018ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800189c:	4b19      	ldr	r3, [pc, #100]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	4916      	ldr	r1, [pc, #88]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d009      	beq.n	80018ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ba:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	490e      	ldr	r1, [pc, #56]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ce:	f000 f855 	bl	800197c <HAL_RCC_GetSysClockFreq>
 80018d2:	4602      	mov	r2, r0
 80018d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	091b      	lsrs	r3, r3, #4
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	490a      	ldr	r1, [pc, #40]	@ (8001908 <HAL_RCC_ClockConfig+0x1c0>)
 80018e0:	5ccb      	ldrb	r3, [r1, r3]
 80018e2:	fa22 f303 	lsr.w	r3, r2, r3
 80018e6:	4a09      	ldr	r2, [pc, #36]	@ (800190c <HAL_RCC_ClockConfig+0x1c4>)
 80018e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <HAL_RCC_ClockConfig+0x1c8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fb1e 	bl	8000f30 <HAL_InitTick>

  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023c00 	.word	0x40023c00
 8001904:	40023800 	.word	0x40023800
 8001908:	08003d34 	.word	0x08003d34
 800190c:	20000000 	.word	0x20000000
 8001910:	20000004 	.word	0x20000004

08001914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001918:	4b03      	ldr	r3, [pc, #12]	@ (8001928 <HAL_RCC_GetHCLKFreq+0x14>)
 800191a:	681b      	ldr	r3, [r3, #0]
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000000 	.word	0x20000000

0800192c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001930:	f7ff fff0 	bl	8001914 <HAL_RCC_GetHCLKFreq>
 8001934:	4602      	mov	r2, r0
 8001936:	4b05      	ldr	r3, [pc, #20]	@ (800194c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	0a9b      	lsrs	r3, r3, #10
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	4903      	ldr	r1, [pc, #12]	@ (8001950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001942:	5ccb      	ldrb	r3, [r1, r3]
 8001944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001948:	4618      	mov	r0, r3
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40023800 	.word	0x40023800
 8001950:	08003d44 	.word	0x08003d44

08001954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001958:	f7ff ffdc 	bl	8001914 <HAL_RCC_GetHCLKFreq>
 800195c:	4602      	mov	r2, r0
 800195e:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	0b5b      	lsrs	r3, r3, #13
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	4903      	ldr	r1, [pc, #12]	@ (8001978 <HAL_RCC_GetPCLK2Freq+0x24>)
 800196a:	5ccb      	ldrb	r3, [r1, r3]
 800196c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001970:	4618      	mov	r0, r3
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40023800 	.word	0x40023800
 8001978:	08003d44 	.word	0x08003d44

0800197c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800197c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001980:	b0a6      	sub	sp, #152	@ 0x98
 8001982:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800198a:	2300      	movs	r3, #0
 800198c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001996:	2300      	movs	r3, #0
 8001998:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019a2:	4bc8      	ldr	r3, [pc, #800]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x348>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	2b0c      	cmp	r3, #12
 80019ac:	f200 817e 	bhi.w	8001cac <HAL_RCC_GetSysClockFreq+0x330>
 80019b0:	a201      	add	r2, pc, #4	@ (adr r2, 80019b8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80019b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b6:	bf00      	nop
 80019b8:	080019ed 	.word	0x080019ed
 80019bc:	08001cad 	.word	0x08001cad
 80019c0:	08001cad 	.word	0x08001cad
 80019c4:	08001cad 	.word	0x08001cad
 80019c8:	080019f5 	.word	0x080019f5
 80019cc:	08001cad 	.word	0x08001cad
 80019d0:	08001cad 	.word	0x08001cad
 80019d4:	08001cad 	.word	0x08001cad
 80019d8:	080019fd 	.word	0x080019fd
 80019dc:	08001cad 	.word	0x08001cad
 80019e0:	08001cad 	.word	0x08001cad
 80019e4:	08001cad 	.word	0x08001cad
 80019e8:	08001b67 	.word	0x08001b67
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019ec:	4bb6      	ldr	r3, [pc, #728]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80019ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 80019f2:	e15f      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019f4:	4bb5      	ldr	r3, [pc, #724]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x350>)
 80019f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80019fa:	e15b      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019fc:	4bb1      	ldr	r3, [pc, #708]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x348>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a08:	4bae      	ldr	r3, [pc, #696]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d031      	beq.n	8001a78 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a14:	4bab      	ldr	r3, [pc, #684]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	099b      	lsrs	r3, r3, #6
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a26:	663b      	str	r3, [r7, #96]	@ 0x60
 8001a28:	2300      	movs	r3, #0
 8001a2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a2c:	4ba7      	ldr	r3, [pc, #668]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x350>)
 8001a2e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a32:	462a      	mov	r2, r5
 8001a34:	fb03 f202 	mul.w	r2, r3, r2
 8001a38:	2300      	movs	r3, #0
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	fb01 f303 	mul.w	r3, r1, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	4aa2      	ldr	r2, [pc, #648]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x350>)
 8001a44:	4621      	mov	r1, r4
 8001a46:	fba1 1202 	umull	r1, r2, r1, r2
 8001a4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001a4c:	460a      	mov	r2, r1
 8001a4e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001a50:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001a52:	4413      	add	r3, r2
 8001a54:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001a5e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001a60:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001a64:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001a68:	f7fe fbcc 	bl	8000204 <__aeabi_uldivmod>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4613      	mov	r3, r2
 8001a72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a76:	e064      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a78:	4b92      	ldr	r3, [pc, #584]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	099b      	lsrs	r3, r3, #6
 8001a7e:	2200      	movs	r2, #0
 8001a80:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a82:	657a      	str	r2, [r7, #84]	@ 0x54
 8001a84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a90:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001a94:	4622      	mov	r2, r4
 8001a96:	462b      	mov	r3, r5
 8001a98:	f04f 0000 	mov.w	r0, #0
 8001a9c:	f04f 0100 	mov.w	r1, #0
 8001aa0:	0159      	lsls	r1, r3, #5
 8001aa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aa6:	0150      	lsls	r0, r2, #5
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4621      	mov	r1, r4
 8001aae:	1a51      	subs	r1, r2, r1
 8001ab0:	6139      	str	r1, [r7, #16]
 8001ab2:	4629      	mov	r1, r5
 8001ab4:	eb63 0301 	sbc.w	r3, r3, r1
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ac6:	4659      	mov	r1, fp
 8001ac8:	018b      	lsls	r3, r1, #6
 8001aca:	4651      	mov	r1, sl
 8001acc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ad0:	4651      	mov	r1, sl
 8001ad2:	018a      	lsls	r2, r1, #6
 8001ad4:	4651      	mov	r1, sl
 8001ad6:	ebb2 0801 	subs.w	r8, r2, r1
 8001ada:	4659      	mov	r1, fp
 8001adc:	eb63 0901 	sbc.w	r9, r3, r1
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001af0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001af4:	4690      	mov	r8, r2
 8001af6:	4699      	mov	r9, r3
 8001af8:	4623      	mov	r3, r4
 8001afa:	eb18 0303 	adds.w	r3, r8, r3
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	462b      	mov	r3, r5
 8001b02:	eb49 0303 	adc.w	r3, r9, r3
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	f04f 0300 	mov.w	r3, #0
 8001b10:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b14:	4629      	mov	r1, r5
 8001b16:	028b      	lsls	r3, r1, #10
 8001b18:	4621      	mov	r1, r4
 8001b1a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b1e:	4621      	mov	r1, r4
 8001b20:	028a      	lsls	r2, r1, #10
 8001b22:	4610      	mov	r0, r2
 8001b24:	4619      	mov	r1, r3
 8001b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001b2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8001b30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001b34:	f7fe fb66 	bl	8000204 <__aeabi_uldivmod>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b42:	4b60      	ldr	r3, [pc, #384]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	0c1b      	lsrs	r3, r3, #16
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8001b54:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001b58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001b64:	e0a6      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b66:	4b57      	ldr	r3, [pc, #348]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b72:	4b54      	ldr	r3, [pc, #336]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d02a      	beq.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b7e:	4b51      	ldr	r3, [pc, #324]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	099b      	lsrs	r3, r3, #6
 8001b84:	2200      	movs	r2, #0
 8001b86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b88:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b90:	2100      	movs	r1, #0
 8001b92:	4b4e      	ldr	r3, [pc, #312]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x350>)
 8001b94:	fb03 f201 	mul.w	r2, r3, r1
 8001b98:	2300      	movs	r3, #0
 8001b9a:	fb00 f303 	mul.w	r3, r0, r3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	4a4a      	ldr	r2, [pc, #296]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x350>)
 8001ba2:	fba0 1202 	umull	r1, r2, r0, r2
 8001ba6:	677a      	str	r2, [r7, #116]	@ 0x74
 8001ba8:	460a      	mov	r2, r1
 8001baa:	673a      	str	r2, [r7, #112]	@ 0x70
 8001bac:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001bae:	4413      	add	r3, r2
 8001bb0:	677b      	str	r3, [r7, #116]	@ 0x74
 8001bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bba:	637a      	str	r2, [r7, #52]	@ 0x34
 8001bbc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001bc0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001bc4:	f7fe fb1e 	bl	8000204 <__aeabi_uldivmod>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4613      	mov	r3, r2
 8001bce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001bd2:	e05b      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	099b      	lsrs	r3, r3, #6
 8001bda:	2200      	movs	r2, #0
 8001bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001be6:	623b      	str	r3, [r7, #32]
 8001be8:	2300      	movs	r3, #0
 8001bea:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bf0:	4642      	mov	r2, r8
 8001bf2:	464b      	mov	r3, r9
 8001bf4:	f04f 0000 	mov.w	r0, #0
 8001bf8:	f04f 0100 	mov.w	r1, #0
 8001bfc:	0159      	lsls	r1, r3, #5
 8001bfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c02:	0150      	lsls	r0, r2, #5
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4641      	mov	r1, r8
 8001c0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c0e:	4649      	mov	r1, r9
 8001c10:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	f04f 0300 	mov.w	r3, #0
 8001c1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c28:	ebb2 040a 	subs.w	r4, r2, sl
 8001c2c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	00eb      	lsls	r3, r5, #3
 8001c3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c3e:	00e2      	lsls	r2, r4, #3
 8001c40:	4614      	mov	r4, r2
 8001c42:	461d      	mov	r5, r3
 8001c44:	4643      	mov	r3, r8
 8001c46:	18e3      	adds	r3, r4, r3
 8001c48:	603b      	str	r3, [r7, #0]
 8001c4a:	464b      	mov	r3, r9
 8001c4c:	eb45 0303 	adc.w	r3, r5, r3
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c5e:	4629      	mov	r1, r5
 8001c60:	028b      	lsls	r3, r1, #10
 8001c62:	4621      	mov	r1, r4
 8001c64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c68:	4621      	mov	r1, r4
 8001c6a:	028a      	lsls	r2, r1, #10
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c74:	2200      	movs	r2, #0
 8001c76:	61bb      	str	r3, [r7, #24]
 8001c78:	61fa      	str	r2, [r7, #28]
 8001c7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c7e:	f7fe fac1 	bl	8000204 <__aeabi_uldivmod>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4613      	mov	r3, r2
 8001c88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	0f1b      	lsrs	r3, r3, #28
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8001c9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001c9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001caa:	e003      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cac:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001cae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001cb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3798      	adds	r7, #152	@ 0x98
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	00f42400 	.word	0x00f42400
 8001ccc:	017d7840 	.word	0x017d7840

08001cd0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e28d      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 8083 	beq.w	8001df6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001cf0:	4b94      	ldr	r3, [pc, #592]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 030c 	and.w	r3, r3, #12
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d019      	beq.n	8001d30 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001cfc:	4b91      	ldr	r3, [pc, #580]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d106      	bne.n	8001d16 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d08:	4b8e      	ldr	r3, [pc, #568]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d14:	d00c      	beq.n	8001d30 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d16:	4b8b      	ldr	r3, [pc, #556]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d1e:	2b0c      	cmp	r3, #12
 8001d20:	d112      	bne.n	8001d48 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d22:	4b88      	ldr	r3, [pc, #544]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d2e:	d10b      	bne.n	8001d48 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	4b84      	ldr	r3, [pc, #528]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d05b      	beq.n	8001df4 <HAL_RCC_OscConfig+0x124>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d157      	bne.n	8001df4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e25a      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d50:	d106      	bne.n	8001d60 <HAL_RCC_OscConfig+0x90>
 8001d52:	4b7c      	ldr	r3, [pc, #496]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a7b      	ldr	r2, [pc, #492]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e01d      	b.n	8001d9c <HAL_RCC_OscConfig+0xcc>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0xb4>
 8001d6a:	4b76      	ldr	r3, [pc, #472]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a75      	ldr	r2, [pc, #468]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	4b73      	ldr	r3, [pc, #460]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a72      	ldr	r2, [pc, #456]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e00b      	b.n	8001d9c <HAL_RCC_OscConfig+0xcc>
 8001d84:	4b6f      	ldr	r3, [pc, #444]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a6e      	ldr	r2, [pc, #440]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	4b6c      	ldr	r3, [pc, #432]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a6b      	ldr	r2, [pc, #428]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001d96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d013      	beq.n	8001dcc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da4:	f7ff f908 	bl	8000fb8 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dac:	f7ff f904 	bl	8000fb8 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b64      	cmp	r3, #100	@ 0x64
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e21f      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	4b61      	ldr	r3, [pc, #388]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0xdc>
 8001dca:	e014      	b.n	8001df6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7ff f8f4 	bl	8000fb8 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd4:	f7ff f8f0 	bl	8000fb8 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	@ 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e20b      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de6:	4b57      	ldr	r3, [pc, #348]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x104>
 8001df2:	e000      	b.n	8001df6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d06f      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e02:	4b50      	ldr	r3, [pc, #320]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d017      	beq.n	8001e3e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e0e:	4b4d      	ldr	r3, [pc, #308]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d105      	bne.n	8001e26 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e1a:	4b4a      	ldr	r3, [pc, #296]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00b      	beq.n	8001e3e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e26:	4b47      	ldr	r3, [pc, #284]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e2e:	2b0c      	cmp	r3, #12
 8001e30:	d11c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e32:	4b44      	ldr	r3, [pc, #272]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d116      	bne.n	8001e6c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3e:	4b41      	ldr	r3, [pc, #260]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_RCC_OscConfig+0x186>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e1d3      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e56:	4b3b      	ldr	r3, [pc, #236]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4937      	ldr	r1, [pc, #220]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6a:	e03a      	b.n	8001ee2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d020      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e74:	4b34      	ldr	r3, [pc, #208]	@ (8001f48 <HAL_RCC_OscConfig+0x278>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7a:	f7ff f89d 	bl	8000fb8 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e82:	f7ff f899 	bl	8000fb8 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e1b4      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e94:	4b2b      	ldr	r3, [pc, #172]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea0:	4b28      	ldr	r3, [pc, #160]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4925      	ldr	r1, [pc, #148]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]
 8001eb4:	e015      	b.n	8001ee2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb6:	4b24      	ldr	r3, [pc, #144]	@ (8001f48 <HAL_RCC_OscConfig+0x278>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f87c 	bl	8000fb8 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec4:	f7ff f878 	bl	8000fb8 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e193      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d036      	beq.n	8001f5c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d016      	beq.n	8001f24 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef6:	4b15      	ldr	r3, [pc, #84]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001efc:	f7ff f85c 	bl	8000fb8 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f04:	f7ff f858 	bl	8000fb8 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e173      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f16:	4b0b      	ldr	r3, [pc, #44]	@ (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x234>
 8001f22:	e01b      	b.n	8001f5c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f24:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <HAL_RCC_OscConfig+0x27c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2a:	f7ff f845 	bl	8000fb8 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f30:	e00e      	b.n	8001f50 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f32:	f7ff f841 	bl	8000fb8 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d907      	bls.n	8001f50 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e15c      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
 8001f44:	40023800 	.word	0x40023800
 8001f48:	42470000 	.word	0x42470000
 8001f4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f50:	4b8a      	ldr	r3, [pc, #552]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8001f52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1ea      	bne.n	8001f32 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 8097 	beq.w	8002098 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f6e:	4b83      	ldr	r3, [pc, #524]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10f      	bne.n	8001f9a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	4b7f      	ldr	r3, [pc, #508]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	4a7e      	ldr	r2, [pc, #504]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8001f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f8a:	4b7c      	ldr	r3, [pc, #496]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f96:	2301      	movs	r3, #1
 8001f98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9a:	4b79      	ldr	r3, [pc, #484]	@ (8002180 <HAL_RCC_OscConfig+0x4b0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d118      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fa6:	4b76      	ldr	r3, [pc, #472]	@ (8002180 <HAL_RCC_OscConfig+0x4b0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a75      	ldr	r2, [pc, #468]	@ (8002180 <HAL_RCC_OscConfig+0x4b0>)
 8001fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb2:	f7ff f801 	bl	8000fb8 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fba:	f7fe fffd 	bl	8000fb8 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e118      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fcc:	4b6c      	ldr	r3, [pc, #432]	@ (8002180 <HAL_RCC_OscConfig+0x4b0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0f0      	beq.n	8001fba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d106      	bne.n	8001fee <HAL_RCC_OscConfig+0x31e>
 8001fe0:	4b66      	ldr	r3, [pc, #408]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8001fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe4:	4a65      	ldr	r2, [pc, #404]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fec:	e01c      	b.n	8002028 <HAL_RCC_OscConfig+0x358>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b05      	cmp	r3, #5
 8001ff4:	d10c      	bne.n	8002010 <HAL_RCC_OscConfig+0x340>
 8001ff6:	4b61      	ldr	r3, [pc, #388]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ffa:	4a60      	ldr	r2, [pc, #384]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8001ffc:	f043 0304 	orr.w	r3, r3, #4
 8002000:	6713      	str	r3, [r2, #112]	@ 0x70
 8002002:	4b5e      	ldr	r3, [pc, #376]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8002004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002006:	4a5d      	ldr	r2, [pc, #372]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6713      	str	r3, [r2, #112]	@ 0x70
 800200e:	e00b      	b.n	8002028 <HAL_RCC_OscConfig+0x358>
 8002010:	4b5a      	ldr	r3, [pc, #360]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8002012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002014:	4a59      	ldr	r2, [pc, #356]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8002016:	f023 0301 	bic.w	r3, r3, #1
 800201a:	6713      	str	r3, [r2, #112]	@ 0x70
 800201c:	4b57      	ldr	r3, [pc, #348]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 800201e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002020:	4a56      	ldr	r2, [pc, #344]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8002022:	f023 0304 	bic.w	r3, r3, #4
 8002026:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d015      	beq.n	800205c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002030:	f7fe ffc2 	bl	8000fb8 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002036:	e00a      	b.n	800204e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002038:	f7fe ffbe 	bl	8000fb8 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e0d7      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204e:	4b4b      	ldr	r3, [pc, #300]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8002050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0ee      	beq.n	8002038 <HAL_RCC_OscConfig+0x368>
 800205a:	e014      	b.n	8002086 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205c:	f7fe ffac 	bl	8000fb8 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002062:	e00a      	b.n	800207a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002064:	f7fe ffa8 	bl	8000fb8 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002072:	4293      	cmp	r3, r2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e0c1      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207a:	4b40      	ldr	r3, [pc, #256]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 800207c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1ee      	bne.n	8002064 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002086:	7dfb      	ldrb	r3, [r7, #23]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d105      	bne.n	8002098 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800208c:	4b3b      	ldr	r3, [pc, #236]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 800208e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002090:	4a3a      	ldr	r2, [pc, #232]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8002092:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002096:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 80ad 	beq.w	80021fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020a2:	4b36      	ldr	r3, [pc, #216]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d060      	beq.n	8002170 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d145      	bne.n	8002142 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b6:	4b33      	ldr	r3, [pc, #204]	@ (8002184 <HAL_RCC_OscConfig+0x4b4>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7fe ff7c 	bl	8000fb8 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c4:	f7fe ff78 	bl	8000fb8 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e093      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d6:	4b29      	ldr	r3, [pc, #164]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69da      	ldr	r2, [r3, #28]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f0:	019b      	lsls	r3, r3, #6
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f8:	085b      	lsrs	r3, r3, #1
 80020fa:	3b01      	subs	r3, #1
 80020fc:	041b      	lsls	r3, r3, #16
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002104:	061b      	lsls	r3, r3, #24
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210c:	071b      	lsls	r3, r3, #28
 800210e:	491b      	ldr	r1, [pc, #108]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8002110:	4313      	orrs	r3, r2
 8002112:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002114:	4b1b      	ldr	r3, [pc, #108]	@ (8002184 <HAL_RCC_OscConfig+0x4b4>)
 8002116:	2201      	movs	r2, #1
 8002118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211a:	f7fe ff4d 	bl	8000fb8 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002122:	f7fe ff49 	bl	8000fb8 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e064      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002134:	4b11      	ldr	r3, [pc, #68]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0f0      	beq.n	8002122 <HAL_RCC_OscConfig+0x452>
 8002140:	e05c      	b.n	80021fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002142:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <HAL_RCC_OscConfig+0x4b4>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002148:	f7fe ff36 	bl	8000fb8 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002150:	f7fe ff32 	bl	8000fb8 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e04d      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002162:	4b06      	ldr	r3, [pc, #24]	@ (800217c <HAL_RCC_OscConfig+0x4ac>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x480>
 800216e:	e045      	b.n	80021fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d107      	bne.n	8002188 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e040      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
 800217c:	40023800 	.word	0x40023800
 8002180:	40007000 	.word	0x40007000
 8002184:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002188:	4b1f      	ldr	r3, [pc, #124]	@ (8002208 <HAL_RCC_OscConfig+0x538>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d030      	beq.n	80021f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d129      	bne.n	80021f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d122      	bne.n	80021f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021b8:	4013      	ands	r3, r2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d119      	bne.n	80021f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ce:	085b      	lsrs	r3, r3, #1
 80021d0:	3b01      	subs	r3, #1
 80021d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d10f      	bne.n	80021f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d107      	bne.n	80021f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d001      	beq.n	80021fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800

0800220c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e041      	b.n	80022a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7fe fd62 	bl	8000cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3304      	adds	r3, #4
 8002248:	4619      	mov	r1, r3
 800224a:	4610      	mov	r0, r2
 800224c:	f000 fa7e 	bl	800274c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d001      	beq.n	80022c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e04e      	b.n	8002362 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a23      	ldr	r2, [pc, #140]	@ (8002370 <HAL_TIM_Base_Start_IT+0xc4>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d022      	beq.n	800232c <HAL_TIM_Base_Start_IT+0x80>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022ee:	d01d      	beq.n	800232c <HAL_TIM_Base_Start_IT+0x80>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002374 <HAL_TIM_Base_Start_IT+0xc8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d018      	beq.n	800232c <HAL_TIM_Base_Start_IT+0x80>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002378 <HAL_TIM_Base_Start_IT+0xcc>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d013      	beq.n	800232c <HAL_TIM_Base_Start_IT+0x80>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a1c      	ldr	r2, [pc, #112]	@ (800237c <HAL_TIM_Base_Start_IT+0xd0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d00e      	beq.n	800232c <HAL_TIM_Base_Start_IT+0x80>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a1b      	ldr	r2, [pc, #108]	@ (8002380 <HAL_TIM_Base_Start_IT+0xd4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d009      	beq.n	800232c <HAL_TIM_Base_Start_IT+0x80>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a19      	ldr	r2, [pc, #100]	@ (8002384 <HAL_TIM_Base_Start_IT+0xd8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d004      	beq.n	800232c <HAL_TIM_Base_Start_IT+0x80>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a18      	ldr	r2, [pc, #96]	@ (8002388 <HAL_TIM_Base_Start_IT+0xdc>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d111      	bne.n	8002350 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2b06      	cmp	r3, #6
 800233c:	d010      	beq.n	8002360 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0201 	orr.w	r2, r2, #1
 800234c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800234e:	e007      	b.n	8002360 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40010000 	.word	0x40010000
 8002374:	40000400 	.word	0x40000400
 8002378:	40000800 	.word	0x40000800
 800237c:	40000c00 	.word	0x40000c00
 8002380:	40010400 	.word	0x40010400
 8002384:	40014000 	.word	0x40014000
 8002388:	40001800 	.word	0x40001800

0800238c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d020      	beq.n	80023f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d01b      	beq.n	80023f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0202 	mvn.w	r2, #2
 80023c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f999 	bl	800270e <HAL_TIM_IC_CaptureCallback>
 80023dc:	e005      	b.n	80023ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f98b 	bl	80026fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f99c 	bl	8002722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d020      	beq.n	800243c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01b      	beq.n	800243c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f06f 0204 	mvn.w	r2, #4
 800240c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2202      	movs	r2, #2
 8002412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f973 	bl	800270e <HAL_TIM_IC_CaptureCallback>
 8002428:	e005      	b.n	8002436 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f965 	bl	80026fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f976 	bl	8002722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d020      	beq.n	8002488 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d01b      	beq.n	8002488 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0208 	mvn.w	r2, #8
 8002458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2204      	movs	r2, #4
 800245e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f94d 	bl	800270e <HAL_TIM_IC_CaptureCallback>
 8002474:	e005      	b.n	8002482 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f93f 	bl	80026fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f950 	bl	8002722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f003 0310 	and.w	r3, r3, #16
 800248e:	2b00      	cmp	r3, #0
 8002490:	d020      	beq.n	80024d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f003 0310 	and.w	r3, r3, #16
 8002498:	2b00      	cmp	r3, #0
 800249a:	d01b      	beq.n	80024d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f06f 0210 	mvn.w	r2, #16
 80024a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2208      	movs	r2, #8
 80024aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f927 	bl	800270e <HAL_TIM_IC_CaptureCallback>
 80024c0:	e005      	b.n	80024ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f919 	bl	80026fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f92a 	bl	8002722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00c      	beq.n	80024f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d007      	beq.n	80024f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f06f 0201 	mvn.w	r2, #1
 80024f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7fe f9ce 	bl	8000894 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00c      	beq.n	800251c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002508:	2b00      	cmp	r3, #0
 800250a:	d007      	beq.n	800251c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 fa68 	bl	80029ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00c      	beq.n	8002540 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800252c:	2b00      	cmp	r3, #0
 800252e:	d007      	beq.n	8002540 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f8fb 	bl	8002736 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00c      	beq.n	8002564 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b00      	cmp	r3, #0
 8002552:	d007      	beq.n	8002564 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f06f 0220 	mvn.w	r2, #32
 800255c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 fa3a 	bl	80029d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002564:	bf00      	nop
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_TIM_ConfigClockSource+0x1c>
 8002584:	2302      	movs	r3, #2
 8002586:	e0b4      	b.n	80026f2 <HAL_TIM_ConfigClockSource+0x186>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80025a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80025ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025c0:	d03e      	beq.n	8002640 <HAL_TIM_ConfigClockSource+0xd4>
 80025c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025c6:	f200 8087 	bhi.w	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
 80025ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025ce:	f000 8086 	beq.w	80026de <HAL_TIM_ConfigClockSource+0x172>
 80025d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025d6:	d87f      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
 80025d8:	2b70      	cmp	r3, #112	@ 0x70
 80025da:	d01a      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0xa6>
 80025dc:	2b70      	cmp	r3, #112	@ 0x70
 80025de:	d87b      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
 80025e0:	2b60      	cmp	r3, #96	@ 0x60
 80025e2:	d050      	beq.n	8002686 <HAL_TIM_ConfigClockSource+0x11a>
 80025e4:	2b60      	cmp	r3, #96	@ 0x60
 80025e6:	d877      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
 80025e8:	2b50      	cmp	r3, #80	@ 0x50
 80025ea:	d03c      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0xfa>
 80025ec:	2b50      	cmp	r3, #80	@ 0x50
 80025ee:	d873      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
 80025f0:	2b40      	cmp	r3, #64	@ 0x40
 80025f2:	d058      	beq.n	80026a6 <HAL_TIM_ConfigClockSource+0x13a>
 80025f4:	2b40      	cmp	r3, #64	@ 0x40
 80025f6:	d86f      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
 80025f8:	2b30      	cmp	r3, #48	@ 0x30
 80025fa:	d064      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0x15a>
 80025fc:	2b30      	cmp	r3, #48	@ 0x30
 80025fe:	d86b      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002600:	2b20      	cmp	r3, #32
 8002602:	d060      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0x15a>
 8002604:	2b20      	cmp	r3, #32
 8002606:	d867      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002608:	2b00      	cmp	r3, #0
 800260a:	d05c      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0x15a>
 800260c:	2b10      	cmp	r3, #16
 800260e:	d05a      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0x15a>
 8002610:	e062      	b.n	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002622:	f000 f9b9 	bl	8002998 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002634:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	609a      	str	r2, [r3, #8]
      break;
 800263e:	e04f      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002650:	f000 f9a2 	bl	8002998 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002662:	609a      	str	r2, [r3, #8]
      break;
 8002664:	e03c      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002672:	461a      	mov	r2, r3
 8002674:	f000 f916 	bl	80028a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2150      	movs	r1, #80	@ 0x50
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f96f 	bl	8002962 <TIM_ITRx_SetConfig>
      break;
 8002684:	e02c      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002692:	461a      	mov	r2, r3
 8002694:	f000 f935 	bl	8002902 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2160      	movs	r1, #96	@ 0x60
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 f95f 	bl	8002962 <TIM_ITRx_SetConfig>
      break;
 80026a4:	e01c      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026b2:	461a      	mov	r2, r3
 80026b4:	f000 f8f6 	bl	80028a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2140      	movs	r1, #64	@ 0x40
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f94f 	bl	8002962 <TIM_ITRx_SetConfig>
      break;
 80026c4:	e00c      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4619      	mov	r1, r3
 80026d0:	4610      	mov	r0, r2
 80026d2:	f000 f946 	bl	8002962 <TIM_ITRx_SetConfig>
      break;
 80026d6:	e003      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
      break;
 80026dc:	e000      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a46      	ldr	r2, [pc, #280]	@ (8002878 <TIM_Base_SetConfig+0x12c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d013      	beq.n	800278c <TIM_Base_SetConfig+0x40>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800276a:	d00f      	beq.n	800278c <TIM_Base_SetConfig+0x40>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a43      	ldr	r2, [pc, #268]	@ (800287c <TIM_Base_SetConfig+0x130>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d00b      	beq.n	800278c <TIM_Base_SetConfig+0x40>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a42      	ldr	r2, [pc, #264]	@ (8002880 <TIM_Base_SetConfig+0x134>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d007      	beq.n	800278c <TIM_Base_SetConfig+0x40>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a41      	ldr	r2, [pc, #260]	@ (8002884 <TIM_Base_SetConfig+0x138>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d003      	beq.n	800278c <TIM_Base_SetConfig+0x40>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a40      	ldr	r2, [pc, #256]	@ (8002888 <TIM_Base_SetConfig+0x13c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d108      	bne.n	800279e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a35      	ldr	r2, [pc, #212]	@ (8002878 <TIM_Base_SetConfig+0x12c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d02b      	beq.n	80027fe <TIM_Base_SetConfig+0xb2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ac:	d027      	beq.n	80027fe <TIM_Base_SetConfig+0xb2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a32      	ldr	r2, [pc, #200]	@ (800287c <TIM_Base_SetConfig+0x130>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d023      	beq.n	80027fe <TIM_Base_SetConfig+0xb2>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a31      	ldr	r2, [pc, #196]	@ (8002880 <TIM_Base_SetConfig+0x134>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d01f      	beq.n	80027fe <TIM_Base_SetConfig+0xb2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a30      	ldr	r2, [pc, #192]	@ (8002884 <TIM_Base_SetConfig+0x138>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d01b      	beq.n	80027fe <TIM_Base_SetConfig+0xb2>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a2f      	ldr	r2, [pc, #188]	@ (8002888 <TIM_Base_SetConfig+0x13c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d017      	beq.n	80027fe <TIM_Base_SetConfig+0xb2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a2e      	ldr	r2, [pc, #184]	@ (800288c <TIM_Base_SetConfig+0x140>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d013      	beq.n	80027fe <TIM_Base_SetConfig+0xb2>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a2d      	ldr	r2, [pc, #180]	@ (8002890 <TIM_Base_SetConfig+0x144>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00f      	beq.n	80027fe <TIM_Base_SetConfig+0xb2>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a2c      	ldr	r2, [pc, #176]	@ (8002894 <TIM_Base_SetConfig+0x148>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00b      	beq.n	80027fe <TIM_Base_SetConfig+0xb2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002898 <TIM_Base_SetConfig+0x14c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d007      	beq.n	80027fe <TIM_Base_SetConfig+0xb2>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a2a      	ldr	r2, [pc, #168]	@ (800289c <TIM_Base_SetConfig+0x150>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d003      	beq.n	80027fe <TIM_Base_SetConfig+0xb2>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a29      	ldr	r2, [pc, #164]	@ (80028a0 <TIM_Base_SetConfig+0x154>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d108      	bne.n	8002810 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4313      	orrs	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	4313      	orrs	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a10      	ldr	r2, [pc, #64]	@ (8002878 <TIM_Base_SetConfig+0x12c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d003      	beq.n	8002844 <TIM_Base_SetConfig+0xf8>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a12      	ldr	r2, [pc, #72]	@ (8002888 <TIM_Base_SetConfig+0x13c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d103      	bne.n	800284c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b01      	cmp	r3, #1
 800285c:	d105      	bne.n	800286a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f023 0201 	bic.w	r2, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	611a      	str	r2, [r3, #16]
  }
}
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40010000 	.word	0x40010000
 800287c:	40000400 	.word	0x40000400
 8002880:	40000800 	.word	0x40000800
 8002884:	40000c00 	.word	0x40000c00
 8002888:	40010400 	.word	0x40010400
 800288c:	40014000 	.word	0x40014000
 8002890:	40014400 	.word	0x40014400
 8002894:	40014800 	.word	0x40014800
 8002898:	40001800 	.word	0x40001800
 800289c:	40001c00 	.word	0x40001c00
 80028a0:	40002000 	.word	0x40002000

080028a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	f023 0201 	bic.w	r2, r3, #1
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f023 030a 	bic.w	r3, r3, #10
 80028e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	621a      	str	r2, [r3, #32]
}
 80028f6:	bf00      	nop
 80028f8:	371c      	adds	r7, #28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002902:	b480      	push	{r7}
 8002904:	b087      	sub	sp, #28
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	f023 0210 	bic.w	r2, r3, #16
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800292c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	031b      	lsls	r3, r3, #12
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800293e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	621a      	str	r2, [r3, #32]
}
 8002956:	bf00      	nop
 8002958:	371c      	adds	r7, #28
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002962:	b480      	push	{r7}
 8002964:	b085      	sub	sp, #20
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	f043 0307 	orr.w	r3, r3, #7
 8002984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	609a      	str	r2, [r3, #8]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	021a      	lsls	r2, r3, #8
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4313      	orrs	r3, r2
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	609a      	str	r2, [r3, #8]
}
 80029cc:	bf00      	nop
 80029ce:	371c      	adds	r7, #28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e042      	b.n	8002a98 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d106      	bne.n	8002a2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7fe f990 	bl	8000d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2224      	movs	r2, #36	@ 0x24
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 fdbd 	bl	80035c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	691a      	ldr	r2, [r3, #16]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695a      	ldr	r2, [r3, #20]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08a      	sub	sp, #40	@ 0x28
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	4613      	mov	r3, r2
 8002aae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b20      	cmp	r3, #32
 8002abe:	d175      	bne.n	8002bac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <HAL_UART_Transmit+0x2c>
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e06e      	b.n	8002bae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2221      	movs	r2, #33	@ 0x21
 8002ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ade:	f7fe fa6b 	bl	8000fb8 <HAL_GetTick>
 8002ae2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	88fa      	ldrh	r2, [r7, #6]
 8002ae8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	88fa      	ldrh	r2, [r7, #6]
 8002aee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002af8:	d108      	bne.n	8002b0c <HAL_UART_Transmit+0x6c>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d104      	bne.n	8002b0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	61bb      	str	r3, [r7, #24]
 8002b0a:	e003      	b.n	8002b14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b14:	e02e      	b.n	8002b74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2180      	movs	r1, #128	@ 0x80
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 fb1f 	bl	8003164 <UART_WaitOnFlagUntilTimeout>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e03a      	b.n	8002bae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10b      	bne.n	8002b56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	3302      	adds	r3, #2
 8002b52:	61bb      	str	r3, [r7, #24]
 8002b54:	e007      	b.n	8002b66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	781a      	ldrb	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	3301      	adds	r3, #1
 8002b64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1cb      	bne.n	8002b16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2200      	movs	r2, #0
 8002b86:	2140      	movs	r1, #64	@ 0x40
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 faeb 	bl	8003164 <UART_WaitOnFlagUntilTimeout>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e006      	b.n	8002bae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	e000      	b.n	8002bae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002bac:	2302      	movs	r3, #2
  }
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3720      	adds	r7, #32
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b084      	sub	sp, #16
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	60f8      	str	r0, [r7, #12]
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b20      	cmp	r3, #32
 8002bce:	d112      	bne.n	8002bf6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <HAL_UART_Receive_IT+0x26>
 8002bd6:	88fb      	ldrh	r3, [r7, #6]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e00b      	b.n	8002bf8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002be6:	88fb      	ldrh	r3, [r7, #6]
 8002be8:	461a      	mov	r2, r3
 8002bea:	68b9      	ldr	r1, [r7, #8]
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 fb12 	bl	8003216 <UART_Start_Receive_IT>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	e000      	b.n	8002bf8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002bf6:	2302      	movs	r3, #2
  }
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b0ba      	sub	sp, #232	@ 0xe8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002c3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10f      	bne.n	8002c66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c4a:	f003 0320 	and.w	r3, r3, #32
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d009      	beq.n	8002c66 <HAL_UART_IRQHandler+0x66>
 8002c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c56:	f003 0320 	and.w	r3, r3, #32
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fbf2 	bl	8003448 <UART_Receive_IT>
      return;
 8002c64:	e25b      	b.n	800311e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 80de 	beq.w	8002e2c <HAL_UART_IRQHandler+0x22c>
 8002c70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d106      	bne.n	8002c8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c80:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80d1 	beq.w	8002e2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00b      	beq.n	8002cae <HAL_UART_IRQHandler+0xae>
 8002c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca6:	f043 0201 	orr.w	r2, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00b      	beq.n	8002cd2 <HAL_UART_IRQHandler+0xd2>
 8002cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cca:	f043 0202 	orr.w	r2, r3, #2
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <HAL_UART_IRQHandler+0xf6>
 8002cde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d005      	beq.n	8002cf6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cee:	f043 0204 	orr.w	r2, r3, #4
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d011      	beq.n	8002d26 <HAL_UART_IRQHandler+0x126>
 8002d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d105      	bne.n	8002d1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1e:	f043 0208 	orr.w	r2, r3, #8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 81f2 	beq.w	8003114 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d34:	f003 0320 	and.w	r3, r3, #32
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d008      	beq.n	8002d4e <HAL_UART_IRQHandler+0x14e>
 8002d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 fb7d 	bl	8003448 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d58:	2b40      	cmp	r3, #64	@ 0x40
 8002d5a:	bf0c      	ite	eq
 8002d5c:	2301      	moveq	r3, #1
 8002d5e:	2300      	movne	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d103      	bne.n	8002d7a <HAL_UART_IRQHandler+0x17a>
 8002d72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d04f      	beq.n	8002e1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fa85 	bl	800328a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d8a:	2b40      	cmp	r3, #64	@ 0x40
 8002d8c:	d141      	bne.n	8002e12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	3314      	adds	r3, #20
 8002d94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d9c:	e853 3f00 	ldrex	r3, [r3]
 8002da0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002da4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002da8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002dac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3314      	adds	r3, #20
 8002db6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002dba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002dbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002dc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002dca:	e841 2300 	strex	r3, r2, [r1]
 8002dce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002dd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1d9      	bne.n	8002d8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d013      	beq.n	8002e0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de6:	4a7e      	ldr	r2, [pc, #504]	@ (8002fe0 <HAL_UART_IRQHandler+0x3e0>)
 8002de8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe fa6f 	bl	80012d2 <HAL_DMA_Abort_IT>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d016      	beq.n	8002e28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e04:	4610      	mov	r0, r2
 8002e06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e08:	e00e      	b.n	8002e28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f994 	bl	8003138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e10:	e00a      	b.n	8002e28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f990 	bl	8003138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e18:	e006      	b.n	8002e28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f98c 	bl	8003138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002e26:	e175      	b.n	8003114 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e28:	bf00      	nop
    return;
 8002e2a:	e173      	b.n	8003114 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	f040 814f 	bne.w	80030d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e3a:	f003 0310 	and.w	r3, r3, #16
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 8148 	beq.w	80030d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 8141 	beq.w	80030d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e52:	2300      	movs	r3, #0
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e72:	2b40      	cmp	r3, #64	@ 0x40
 8002e74:	f040 80b6 	bne.w	8002fe4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 8145 	beq.w	8003118 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e96:	429a      	cmp	r2, r3
 8002e98:	f080 813e 	bcs.w	8003118 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ea2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eae:	f000 8088 	beq.w	8002fc2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	330c      	adds	r3, #12
 8002eb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ebc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ec0:	e853 3f00 	ldrex	r3, [r3]
 8002ec4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002ec8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ecc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	330c      	adds	r3, #12
 8002eda:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002ede:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ee2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002eea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002eee:	e841 2300 	strex	r3, r2, [r1]
 8002ef2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1d9      	bne.n	8002eb2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3314      	adds	r3, #20
 8002f04:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f08:	e853 3f00 	ldrex	r3, [r3]
 8002f0c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002f0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f10:	f023 0301 	bic.w	r3, r3, #1
 8002f14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3314      	adds	r3, #20
 8002f1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f22:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002f26:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f28:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002f2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002f2e:	e841 2300 	strex	r3, r2, [r1]
 8002f32:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002f34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1e1      	bne.n	8002efe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	3314      	adds	r3, #20
 8002f40:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f44:	e853 3f00 	ldrex	r3, [r3]
 8002f48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002f4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	3314      	adds	r3, #20
 8002f5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002f5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002f64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002f66:	e841 2300 	strex	r3, r2, [r1]
 8002f6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002f6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1e3      	bne.n	8002f3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	330c      	adds	r3, #12
 8002f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f8a:	e853 3f00 	ldrex	r3, [r3]
 8002f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002f90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f92:	f023 0310 	bic.w	r3, r3, #16
 8002f96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	330c      	adds	r3, #12
 8002fa0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002fa4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002fa6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002faa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002fac:	e841 2300 	strex	r3, r2, [r1]
 8002fb0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002fb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1e3      	bne.n	8002f80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fe f918 	bl	80011f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f8b7 	bl	800314c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fde:	e09b      	b.n	8003118 <HAL_UART_IRQHandler+0x518>
 8002fe0:	08003351 	.word	0x08003351
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 808e 	beq.w	800311c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003000:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 8089 	beq.w	800311c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	330c      	adds	r3, #12
 8003010:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003014:	e853 3f00 	ldrex	r3, [r3]
 8003018:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800301a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800301c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003020:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	330c      	adds	r3, #12
 800302a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800302e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003030:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003032:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003034:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003036:	e841 2300 	strex	r3, r2, [r1]
 800303a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800303c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1e3      	bne.n	800300a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	3314      	adds	r3, #20
 8003048:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304c:	e853 3f00 	ldrex	r3, [r3]
 8003050:	623b      	str	r3, [r7, #32]
   return(result);
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	f023 0301 	bic.w	r3, r3, #1
 8003058:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3314      	adds	r3, #20
 8003062:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003066:	633a      	str	r2, [r7, #48]	@ 0x30
 8003068:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800306c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800306e:	e841 2300 	strex	r3, r2, [r1]
 8003072:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1e3      	bne.n	8003042 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	330c      	adds	r3, #12
 800308e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	e853 3f00 	ldrex	r3, [r3]
 8003096:	60fb      	str	r3, [r7, #12]
   return(result);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f023 0310 	bic.w	r3, r3, #16
 800309e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	330c      	adds	r3, #12
 80030a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80030ac:	61fa      	str	r2, [r7, #28]
 80030ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b0:	69b9      	ldr	r1, [r7, #24]
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	e841 2300 	strex	r3, r2, [r1]
 80030b8:	617b      	str	r3, [r7, #20]
   return(result);
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1e3      	bne.n	8003088 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80030ca:	4619      	mov	r1, r3
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f83d 	bl	800314c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030d2:	e023      	b.n	800311c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d009      	beq.n	80030f4 <HAL_UART_IRQHandler+0x4f4>
 80030e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f943 	bl	8003378 <UART_Transmit_IT>
    return;
 80030f2:	e014      	b.n	800311e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00e      	beq.n	800311e <HAL_UART_IRQHandler+0x51e>
 8003100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f983 	bl	8003418 <UART_EndTransmit_IT>
    return;
 8003112:	e004      	b.n	800311e <HAL_UART_IRQHandler+0x51e>
    return;
 8003114:	bf00      	nop
 8003116:	e002      	b.n	800311e <HAL_UART_IRQHandler+0x51e>
      return;
 8003118:	bf00      	nop
 800311a:	e000      	b.n	800311e <HAL_UART_IRQHandler+0x51e>
      return;
 800311c:	bf00      	nop
  }
}
 800311e:	37e8      	adds	r7, #232	@ 0xe8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	603b      	str	r3, [r7, #0]
 8003170:	4613      	mov	r3, r2
 8003172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003174:	e03b      	b.n	80031ee <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317c:	d037      	beq.n	80031ee <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317e:	f7fd ff1b 	bl	8000fb8 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	6a3a      	ldr	r2, [r7, #32]
 800318a:	429a      	cmp	r2, r3
 800318c:	d302      	bcc.n	8003194 <UART_WaitOnFlagUntilTimeout+0x30>
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e03a      	b.n	800320e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f003 0304 	and.w	r3, r3, #4
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d023      	beq.n	80031ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b80      	cmp	r3, #128	@ 0x80
 80031aa:	d020      	beq.n	80031ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b40      	cmp	r3, #64	@ 0x40
 80031b0:	d01d      	beq.n	80031ee <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d116      	bne.n	80031ee <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 f857 	bl	800328a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2208      	movs	r2, #8
 80031e0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e00f      	b.n	800320e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4013      	ands	r3, r2
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	bf0c      	ite	eq
 80031fe:	2301      	moveq	r3, #1
 8003200:	2300      	movne	r3, #0
 8003202:	b2db      	uxtb	r3, r3
 8003204:	461a      	mov	r2, r3
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	429a      	cmp	r2, r3
 800320a:	d0b4      	beq.n	8003176 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003216:	b480      	push	{r7}
 8003218:	b085      	sub	sp, #20
 800321a:	af00      	add	r7, sp, #0
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	4613      	mov	r3, r2
 8003222:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	88fa      	ldrh	r2, [r7, #6]
 800322e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	88fa      	ldrh	r2, [r7, #6]
 8003234:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2222      	movs	r2, #34	@ 0x22
 8003240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d007      	beq.n	800325c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800325a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695a      	ldr	r2, [r3, #20]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0220 	orr.w	r2, r2, #32
 800327a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800328a:	b480      	push	{r7}
 800328c:	b095      	sub	sp, #84	@ 0x54
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	330c      	adds	r3, #12
 8003298:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800329c:	e853 3f00 	ldrex	r3, [r3]
 80032a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80032a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	330c      	adds	r3, #12
 80032b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032b2:	643a      	str	r2, [r7, #64]	@ 0x40
 80032b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032ba:	e841 2300 	strex	r3, r2, [r1]
 80032be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80032c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1e5      	bne.n	8003292 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3314      	adds	r3, #20
 80032cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	e853 3f00 	ldrex	r3, [r3]
 80032d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	f023 0301 	bic.w	r3, r3, #1
 80032dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3314      	adds	r3, #20
 80032e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032ee:	e841 2300 	strex	r3, r2, [r1]
 80032f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80032f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1e5      	bne.n	80032c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d119      	bne.n	8003336 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	330c      	adds	r3, #12
 8003308:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	e853 3f00 	ldrex	r3, [r3]
 8003310:	60bb      	str	r3, [r7, #8]
   return(result);
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f023 0310 	bic.w	r3, r3, #16
 8003318:	647b      	str	r3, [r7, #68]	@ 0x44
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	330c      	adds	r3, #12
 8003320:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003322:	61ba      	str	r2, [r7, #24]
 8003324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003326:	6979      	ldr	r1, [r7, #20]
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	e841 2300 	strex	r3, r2, [r1]
 800332e:	613b      	str	r3, [r7, #16]
   return(result);
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1e5      	bne.n	8003302 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003344:	bf00      	nop
 8003346:	3754      	adds	r7, #84	@ 0x54
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800335c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f7ff fee4 	bl	8003138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b21      	cmp	r3, #33	@ 0x21
 800338a:	d13e      	bne.n	800340a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003394:	d114      	bne.n	80033c0 <UART_Transmit_IT+0x48>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d110      	bne.n	80033c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	1c9a      	adds	r2, r3, #2
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	621a      	str	r2, [r3, #32]
 80033be:	e008      	b.n	80033d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	1c59      	adds	r1, r3, #1
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6211      	str	r1, [r2, #32]
 80033ca:	781a      	ldrb	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29b      	uxth	r3, r3
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	4619      	mov	r1, r3
 80033e0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10f      	bne.n	8003406 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003404:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	e000      	b.n	800340c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800340a:	2302      	movs	r3, #2
  }
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800342e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff fe73 	bl	8003124 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08c      	sub	sp, #48	@ 0x30
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b22      	cmp	r3, #34	@ 0x22
 800345a:	f040 80ae 	bne.w	80035ba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003466:	d117      	bne.n	8003498 <UART_Receive_IT+0x50>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d113      	bne.n	8003498 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003470:	2300      	movs	r3, #0
 8003472:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003478:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	b29b      	uxth	r3, r3
 8003482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003486:	b29a      	uxth	r2, r3
 8003488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800348a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003490:	1c9a      	adds	r2, r3, #2
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	629a      	str	r2, [r3, #40]	@ 0x28
 8003496:	e026      	b.n	80034e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800349e:	2300      	movs	r3, #0
 80034a0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034aa:	d007      	beq.n	80034bc <UART_Receive_IT+0x74>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10a      	bne.n	80034ca <UART_Receive_IT+0x82>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d106      	bne.n	80034ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c6:	701a      	strb	r2, [r3, #0]
 80034c8:	e008      	b.n	80034dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	4619      	mov	r1, r3
 80034f4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d15d      	bne.n	80035b6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0220 	bic.w	r2, r2, #32
 8003508:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003518:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0201 	bic.w	r2, r2, #1
 8003528:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353c:	2b01      	cmp	r3, #1
 800353e:	d135      	bne.n	80035ac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	330c      	adds	r3, #12
 800354c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	e853 3f00 	ldrex	r3, [r3]
 8003554:	613b      	str	r3, [r7, #16]
   return(result);
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f023 0310 	bic.w	r3, r3, #16
 800355c:	627b      	str	r3, [r7, #36]	@ 0x24
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	330c      	adds	r3, #12
 8003564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003566:	623a      	str	r2, [r7, #32]
 8003568:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356a:	69f9      	ldr	r1, [r7, #28]
 800356c:	6a3a      	ldr	r2, [r7, #32]
 800356e:	e841 2300 	strex	r3, r2, [r1]
 8003572:	61bb      	str	r3, [r7, #24]
   return(result);
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1e5      	bne.n	8003546 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0310 	and.w	r3, r3, #16
 8003584:	2b10      	cmp	r3, #16
 8003586:	d10a      	bne.n	800359e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80035a2:	4619      	mov	r1, r3
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff fdd1 	bl	800314c <HAL_UARTEx_RxEventCallback>
 80035aa:	e002      	b.n	80035b2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7fd f991 	bl	80008d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	e002      	b.n	80035bc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	e000      	b.n	80035bc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80035ba:	2302      	movs	r3, #2
  }
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3730      	adds	r7, #48	@ 0x30
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035c8:	b0c0      	sub	sp, #256	@ 0x100
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80035dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e0:	68d9      	ldr	r1, [r3, #12]
 80035e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	ea40 0301 	orr.w	r3, r0, r1
 80035ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	431a      	orrs	r2, r3
 80035fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	431a      	orrs	r2, r3
 8003604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800361c:	f021 010c 	bic.w	r1, r1, #12
 8003620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800362a:	430b      	orrs	r3, r1
 800362c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800362e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800363a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800363e:	6999      	ldr	r1, [r3, #24]
 8003640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	ea40 0301 	orr.w	r3, r0, r1
 800364a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800364c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	4b8f      	ldr	r3, [pc, #572]	@ (8003890 <UART_SetConfig+0x2cc>)
 8003654:	429a      	cmp	r2, r3
 8003656:	d005      	beq.n	8003664 <UART_SetConfig+0xa0>
 8003658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	4b8d      	ldr	r3, [pc, #564]	@ (8003894 <UART_SetConfig+0x2d0>)
 8003660:	429a      	cmp	r2, r3
 8003662:	d104      	bne.n	800366e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003664:	f7fe f976 	bl	8001954 <HAL_RCC_GetPCLK2Freq>
 8003668:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800366c:	e003      	b.n	8003676 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800366e:	f7fe f95d 	bl	800192c <HAL_RCC_GetPCLK1Freq>
 8003672:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003680:	f040 810c 	bne.w	800389c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003688:	2200      	movs	r2, #0
 800368a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800368e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003692:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003696:	4622      	mov	r2, r4
 8003698:	462b      	mov	r3, r5
 800369a:	1891      	adds	r1, r2, r2
 800369c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800369e:	415b      	adcs	r3, r3
 80036a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80036a6:	4621      	mov	r1, r4
 80036a8:	eb12 0801 	adds.w	r8, r2, r1
 80036ac:	4629      	mov	r1, r5
 80036ae:	eb43 0901 	adc.w	r9, r3, r1
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036c6:	4690      	mov	r8, r2
 80036c8:	4699      	mov	r9, r3
 80036ca:	4623      	mov	r3, r4
 80036cc:	eb18 0303 	adds.w	r3, r8, r3
 80036d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80036d4:	462b      	mov	r3, r5
 80036d6:	eb49 0303 	adc.w	r3, r9, r3
 80036da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80036de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80036ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80036ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80036f2:	460b      	mov	r3, r1
 80036f4:	18db      	adds	r3, r3, r3
 80036f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80036f8:	4613      	mov	r3, r2
 80036fa:	eb42 0303 	adc.w	r3, r2, r3
 80036fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8003700:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003704:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003708:	f7fc fd7c 	bl	8000204 <__aeabi_uldivmod>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4b61      	ldr	r3, [pc, #388]	@ (8003898 <UART_SetConfig+0x2d4>)
 8003712:	fba3 2302 	umull	r2, r3, r3, r2
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	011c      	lsls	r4, r3, #4
 800371a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800371e:	2200      	movs	r2, #0
 8003720:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003724:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003728:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800372c:	4642      	mov	r2, r8
 800372e:	464b      	mov	r3, r9
 8003730:	1891      	adds	r1, r2, r2
 8003732:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003734:	415b      	adcs	r3, r3
 8003736:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003738:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800373c:	4641      	mov	r1, r8
 800373e:	eb12 0a01 	adds.w	sl, r2, r1
 8003742:	4649      	mov	r1, r9
 8003744:	eb43 0b01 	adc.w	fp, r3, r1
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003754:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003758:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800375c:	4692      	mov	sl, r2
 800375e:	469b      	mov	fp, r3
 8003760:	4643      	mov	r3, r8
 8003762:	eb1a 0303 	adds.w	r3, sl, r3
 8003766:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800376a:	464b      	mov	r3, r9
 800376c:	eb4b 0303 	adc.w	r3, fp, r3
 8003770:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003780:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003784:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003788:	460b      	mov	r3, r1
 800378a:	18db      	adds	r3, r3, r3
 800378c:	643b      	str	r3, [r7, #64]	@ 0x40
 800378e:	4613      	mov	r3, r2
 8003790:	eb42 0303 	adc.w	r3, r2, r3
 8003794:	647b      	str	r3, [r7, #68]	@ 0x44
 8003796:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800379a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800379e:	f7fc fd31 	bl	8000204 <__aeabi_uldivmod>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4611      	mov	r1, r2
 80037a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003898 <UART_SetConfig+0x2d4>)
 80037aa:	fba3 2301 	umull	r2, r3, r3, r1
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	2264      	movs	r2, #100	@ 0x64
 80037b2:	fb02 f303 	mul.w	r3, r2, r3
 80037b6:	1acb      	subs	r3, r1, r3
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80037be:	4b36      	ldr	r3, [pc, #216]	@ (8003898 <UART_SetConfig+0x2d4>)
 80037c0:	fba3 2302 	umull	r2, r3, r3, r2
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80037cc:	441c      	add	r4, r3
 80037ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037d2:	2200      	movs	r2, #0
 80037d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80037dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80037e0:	4642      	mov	r2, r8
 80037e2:	464b      	mov	r3, r9
 80037e4:	1891      	adds	r1, r2, r2
 80037e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80037e8:	415b      	adcs	r3, r3
 80037ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80037f0:	4641      	mov	r1, r8
 80037f2:	1851      	adds	r1, r2, r1
 80037f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80037f6:	4649      	mov	r1, r9
 80037f8:	414b      	adcs	r3, r1
 80037fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003808:	4659      	mov	r1, fp
 800380a:	00cb      	lsls	r3, r1, #3
 800380c:	4651      	mov	r1, sl
 800380e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003812:	4651      	mov	r1, sl
 8003814:	00ca      	lsls	r2, r1, #3
 8003816:	4610      	mov	r0, r2
 8003818:	4619      	mov	r1, r3
 800381a:	4603      	mov	r3, r0
 800381c:	4642      	mov	r2, r8
 800381e:	189b      	adds	r3, r3, r2
 8003820:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003824:	464b      	mov	r3, r9
 8003826:	460a      	mov	r2, r1
 8003828:	eb42 0303 	adc.w	r3, r2, r3
 800382c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800383c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003840:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003844:	460b      	mov	r3, r1
 8003846:	18db      	adds	r3, r3, r3
 8003848:	62bb      	str	r3, [r7, #40]	@ 0x28
 800384a:	4613      	mov	r3, r2
 800384c:	eb42 0303 	adc.w	r3, r2, r3
 8003850:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003852:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003856:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800385a:	f7fc fcd3 	bl	8000204 <__aeabi_uldivmod>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	4b0d      	ldr	r3, [pc, #52]	@ (8003898 <UART_SetConfig+0x2d4>)
 8003864:	fba3 1302 	umull	r1, r3, r3, r2
 8003868:	095b      	lsrs	r3, r3, #5
 800386a:	2164      	movs	r1, #100	@ 0x64
 800386c:	fb01 f303 	mul.w	r3, r1, r3
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	3332      	adds	r3, #50	@ 0x32
 8003876:	4a08      	ldr	r2, [pc, #32]	@ (8003898 <UART_SetConfig+0x2d4>)
 8003878:	fba2 2303 	umull	r2, r3, r2, r3
 800387c:	095b      	lsrs	r3, r3, #5
 800387e:	f003 0207 	and.w	r2, r3, #7
 8003882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4422      	add	r2, r4
 800388a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800388c:	e106      	b.n	8003a9c <UART_SetConfig+0x4d8>
 800388e:	bf00      	nop
 8003890:	40011000 	.word	0x40011000
 8003894:	40011400 	.word	0x40011400
 8003898:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800389c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038a0:	2200      	movs	r2, #0
 80038a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80038a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80038aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80038ae:	4642      	mov	r2, r8
 80038b0:	464b      	mov	r3, r9
 80038b2:	1891      	adds	r1, r2, r2
 80038b4:	6239      	str	r1, [r7, #32]
 80038b6:	415b      	adcs	r3, r3
 80038b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038be:	4641      	mov	r1, r8
 80038c0:	1854      	adds	r4, r2, r1
 80038c2:	4649      	mov	r1, r9
 80038c4:	eb43 0501 	adc.w	r5, r3, r1
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	00eb      	lsls	r3, r5, #3
 80038d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038d6:	00e2      	lsls	r2, r4, #3
 80038d8:	4614      	mov	r4, r2
 80038da:	461d      	mov	r5, r3
 80038dc:	4643      	mov	r3, r8
 80038de:	18e3      	adds	r3, r4, r3
 80038e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80038e4:	464b      	mov	r3, r9
 80038e6:	eb45 0303 	adc.w	r3, r5, r3
 80038ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80038ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80038fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800390a:	4629      	mov	r1, r5
 800390c:	008b      	lsls	r3, r1, #2
 800390e:	4621      	mov	r1, r4
 8003910:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003914:	4621      	mov	r1, r4
 8003916:	008a      	lsls	r2, r1, #2
 8003918:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800391c:	f7fc fc72 	bl	8000204 <__aeabi_uldivmod>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4b60      	ldr	r3, [pc, #384]	@ (8003aa8 <UART_SetConfig+0x4e4>)
 8003926:	fba3 2302 	umull	r2, r3, r3, r2
 800392a:	095b      	lsrs	r3, r3, #5
 800392c:	011c      	lsls	r4, r3, #4
 800392e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003932:	2200      	movs	r2, #0
 8003934:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003938:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800393c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003940:	4642      	mov	r2, r8
 8003942:	464b      	mov	r3, r9
 8003944:	1891      	adds	r1, r2, r2
 8003946:	61b9      	str	r1, [r7, #24]
 8003948:	415b      	adcs	r3, r3
 800394a:	61fb      	str	r3, [r7, #28]
 800394c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003950:	4641      	mov	r1, r8
 8003952:	1851      	adds	r1, r2, r1
 8003954:	6139      	str	r1, [r7, #16]
 8003956:	4649      	mov	r1, r9
 8003958:	414b      	adcs	r3, r1
 800395a:	617b      	str	r3, [r7, #20]
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003968:	4659      	mov	r1, fp
 800396a:	00cb      	lsls	r3, r1, #3
 800396c:	4651      	mov	r1, sl
 800396e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003972:	4651      	mov	r1, sl
 8003974:	00ca      	lsls	r2, r1, #3
 8003976:	4610      	mov	r0, r2
 8003978:	4619      	mov	r1, r3
 800397a:	4603      	mov	r3, r0
 800397c:	4642      	mov	r2, r8
 800397e:	189b      	adds	r3, r3, r2
 8003980:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003984:	464b      	mov	r3, r9
 8003986:	460a      	mov	r2, r1
 8003988:	eb42 0303 	adc.w	r3, r2, r3
 800398c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	67bb      	str	r3, [r7, #120]	@ 0x78
 800399a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800399c:	f04f 0200 	mov.w	r2, #0
 80039a0:	f04f 0300 	mov.w	r3, #0
 80039a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80039a8:	4649      	mov	r1, r9
 80039aa:	008b      	lsls	r3, r1, #2
 80039ac:	4641      	mov	r1, r8
 80039ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039b2:	4641      	mov	r1, r8
 80039b4:	008a      	lsls	r2, r1, #2
 80039b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80039ba:	f7fc fc23 	bl	8000204 <__aeabi_uldivmod>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4611      	mov	r1, r2
 80039c4:	4b38      	ldr	r3, [pc, #224]	@ (8003aa8 <UART_SetConfig+0x4e4>)
 80039c6:	fba3 2301 	umull	r2, r3, r3, r1
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	2264      	movs	r2, #100	@ 0x64
 80039ce:	fb02 f303 	mul.w	r3, r2, r3
 80039d2:	1acb      	subs	r3, r1, r3
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	3332      	adds	r3, #50	@ 0x32
 80039d8:	4a33      	ldr	r2, [pc, #204]	@ (8003aa8 <UART_SetConfig+0x4e4>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039e4:	441c      	add	r4, r3
 80039e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039ea:	2200      	movs	r2, #0
 80039ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80039ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80039f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80039f4:	4642      	mov	r2, r8
 80039f6:	464b      	mov	r3, r9
 80039f8:	1891      	adds	r1, r2, r2
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	415b      	adcs	r3, r3
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a04:	4641      	mov	r1, r8
 8003a06:	1851      	adds	r1, r2, r1
 8003a08:	6039      	str	r1, [r7, #0]
 8003a0a:	4649      	mov	r1, r9
 8003a0c:	414b      	adcs	r3, r1
 8003a0e:	607b      	str	r3, [r7, #4]
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a1c:	4659      	mov	r1, fp
 8003a1e:	00cb      	lsls	r3, r1, #3
 8003a20:	4651      	mov	r1, sl
 8003a22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a26:	4651      	mov	r1, sl
 8003a28:	00ca      	lsls	r2, r1, #3
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4603      	mov	r3, r0
 8003a30:	4642      	mov	r2, r8
 8003a32:	189b      	adds	r3, r3, r2
 8003a34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a36:	464b      	mov	r3, r9
 8003a38:	460a      	mov	r2, r1
 8003a3a:	eb42 0303 	adc.w	r3, r2, r3
 8003a3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a4a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003a58:	4649      	mov	r1, r9
 8003a5a:	008b      	lsls	r3, r1, #2
 8003a5c:	4641      	mov	r1, r8
 8003a5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a62:	4641      	mov	r1, r8
 8003a64:	008a      	lsls	r2, r1, #2
 8003a66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003a6a:	f7fc fbcb 	bl	8000204 <__aeabi_uldivmod>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa8 <UART_SetConfig+0x4e4>)
 8003a74:	fba3 1302 	umull	r1, r3, r3, r2
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	2164      	movs	r1, #100	@ 0x64
 8003a7c:	fb01 f303 	mul.w	r3, r1, r3
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	3332      	adds	r3, #50	@ 0x32
 8003a86:	4a08      	ldr	r2, [pc, #32]	@ (8003aa8 <UART_SetConfig+0x4e4>)
 8003a88:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8c:	095b      	lsrs	r3, r3, #5
 8003a8e:	f003 020f 	and.w	r2, r3, #15
 8003a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4422      	add	r2, r4
 8003a9a:	609a      	str	r2, [r3, #8]
}
 8003a9c:	bf00      	nop
 8003a9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aa8:	51eb851f 	.word	0x51eb851f

08003aac <textualProtocolInit>:

#include "textualProtocol.h"

// ======== Init =========== //
void textualProtocolInit(TextualProtocol *textualProtocol, uint8_t starterChar, uint8_t separator, UART_HandleTypeDef huart)
{
 8003aac:	b082      	sub	sp, #8
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b082      	sub	sp, #8
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	70fb      	strb	r3, [r7, #3]
 8003abc:	4613      	mov	r3, r2
 8003abe:	70bb      	strb	r3, [r7, #2]
	textualProtocol->starterChar = starterChar;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	701a      	strb	r2, [r3, #0]
	textualProtocol->separator = separator;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	78ba      	ldrb	r2, [r7, #2]
 8003aca:	705a      	strb	r2, [r3, #1]
	textualProtocol->enableEcho = TRUE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	719a      	strb	r2, [r3, #6]
	textualProtocol->huart = huart;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	336c      	adds	r3, #108	@ 0x6c
 8003ad6:	f107 0114 	add.w	r1, r7, #20
 8003ada:	2248      	movs	r2, #72	@ 0x48
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 f905 	bl	8003cec <memcpy>

	textualProtocol->command = 0;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	709a      	strb	r2, [r3, #2]
	textualProtocol->length = 0;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	70da      	strb	r2, [r3, #3]
	textualProtocol->byteIndex = 0;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	711a      	strb	r2, [r3, #4]
	textualProtocol->enableDecoding = FALSE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	715a      	strb	r2, [r3, #5]
	textualProtocol->textualProtocolRxStatus = INVALID_RX_TEXTUAL_PROTOCOL;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
	memset(textualProtocol->dataPacket, 0x00, QTY_MAX_RX_DATA_BYTES);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3307      	adds	r3, #7
 8003b06:	2264      	movs	r2, #100	@ 0x64
 8003b08:	2100      	movs	r1, #0
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 f8c1 	bl	8003c92 <memset>
}
 8003b10:	bf00      	nop
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b1a:	b002      	add	sp, #8
 8003b1c:	4770      	bx	lr

08003b1e <textualProtocolAppendByte>:

void textualProtocolAppendByte(TextualProtocol *textualProtocol, uint8_t receivedByte)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b082      	sub	sp, #8
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
 8003b26:	460b      	mov	r3, r1
 8003b28:	70fb      	strb	r3, [r7, #3]
	if ((receivedByte == CHAR_CR) || (receivedByte == CHAR_LF))
 8003b2a:	78fb      	ldrb	r3, [r7, #3]
 8003b2c:	2b0d      	cmp	r3, #13
 8003b2e:	d002      	beq.n	8003b36 <textualProtocolAppendByte+0x18>
 8003b30:	78fb      	ldrb	r3, [r7, #3]
 8003b32:	2b0a      	cmp	r3, #10
 8003b34:	d115      	bne.n	8003b62 <textualProtocolAppendByte+0x44>
	{
		if (textualProtocol->length >= QTY_MIN_RX_DATA_BYTES)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	78db      	ldrb	r3, [r3, #3]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <textualProtocolAppendByte+0x36>
		{
			if (textualProtocol->enableEcho == TRUE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	799b      	ldrb	r3, [r3, #6]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d102      	bne.n	8003b4c <textualProtocolAppendByte+0x2e>
			{
				textualProtocolSendNewLine(textualProtocol);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f86c 	bl	8003c24 <textualProtocolSendNewLine>
			}
			textualProtocol->enableDecoding = TRUE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	715a      	strb	r2, [r3, #5]
		if (textualProtocol->length >= QTY_MIN_RX_DATA_BYTES)
 8003b52:	e02f      	b.n	8003bb4 <textualProtocolAppendByte+0x96>
		}
		else
		{
			textualProtocolClear(textualProtocol);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f831 	bl	8003bbc <textualProtocolClear>
			textualProtocolSendSyntaxError(textualProtocol);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f84e 	bl	8003bfc <textualProtocolSendSyntaxError>
		if (textualProtocol->length >= QTY_MIN_RX_DATA_BYTES)
 8003b60:	e028      	b.n	8003bb4 <textualProtocolAppendByte+0x96>
		}
	}
	else if ((receivedByte >= ' ') && (receivedByte <= 'z') && (textualProtocol->enableDecoding == FALSE))
 8003b62:	78fb      	ldrb	r3, [r7, #3]
 8003b64:	2b1f      	cmp	r3, #31
 8003b66:	d925      	bls.n	8003bb4 <textualProtocolAppendByte+0x96>
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	2b7a      	cmp	r3, #122	@ 0x7a
 8003b6c:	d822      	bhi.n	8003bb4 <textualProtocolAppendByte+0x96>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	795b      	ldrb	r3, [r3, #5]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d11e      	bne.n	8003bb4 <textualProtocolAppendByte+0x96>
	{
		if (textualProtocol->byteIndex < QTY_MAX_RX_DATA_BYTES)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	791b      	ldrb	r3, [r3, #4]
 8003b7a:	2b63      	cmp	r3, #99	@ 0x63
 8003b7c:	d813      	bhi.n	8003ba6 <textualProtocolAppendByte+0x88>
		{
			textualProtocol->dataPacket[textualProtocol->byteIndex] = receivedByte;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	791b      	ldrb	r3, [r3, #4]
 8003b82:	461a      	mov	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4413      	add	r3, r2
 8003b88:	78fa      	ldrb	r2, [r7, #3]
 8003b8a:	71da      	strb	r2, [r3, #7]
			textualProtocol->byteIndex++;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	791b      	ldrb	r3, [r3, #4]
 8003b90:	3301      	adds	r3, #1
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	711a      	strb	r2, [r3, #4]
			textualProtocol->length++;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	78db      	ldrb	r3, [r3, #3]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	70da      	strb	r2, [r3, #3]
		{
			textualProtocolClear(textualProtocol);
			textualProtocolSendSyntaxError(textualProtocol);
		}
	}
}
 8003ba4:	e006      	b.n	8003bb4 <textualProtocolAppendByte+0x96>
			textualProtocolClear(textualProtocol);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f808 	bl	8003bbc <textualProtocolClear>
			textualProtocolSendSyntaxError(textualProtocol);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f825 	bl	8003bfc <textualProtocolSendSyntaxError>
}
 8003bb2:	e7ff      	b.n	8003bb4 <textualProtocolAppendByte+0x96>
 8003bb4:	bf00      	nop
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <textualProtocolClear>:

void textualProtocolClear(TextualProtocol *textualProtocol)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	textualProtocol->command = 0;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	709a      	strb	r2, [r3, #2]
	textualProtocol->length = 0;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	70da      	strb	r2, [r3, #3]
	textualProtocol->byteIndex = 0;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	711a      	strb	r2, [r3, #4]
	textualProtocol->enableDecoding = FALSE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	715a      	strb	r2, [r3, #5]
	textualProtocol->textualProtocolRxStatus = INVALID_RX_TEXTUAL_PROTOCOL;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
	memset(textualProtocol->dataPacket, 0x00, QTY_MAX_RX_DATA_BYTES);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3307      	adds	r3, #7
 8003be8:	2264      	movs	r2, #100	@ 0x64
 8003bea:	2100      	movs	r1, #0
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 f850 	bl	8003c92 <memset>
}
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <textualProtocolSendSyntaxError>:

void textualProtocolSendSyntaxError(TextualProtocol *textualProtocol)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&textualProtocol->huart, (uint8_t *) "Syntax Error\r\n", 14, HAL_MAX_DELAY);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8003c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c0e:	220e      	movs	r2, #14
 8003c10:	4903      	ldr	r1, [pc, #12]	@ (8003c20 <textualProtocolSendSyntaxError+0x24>)
 8003c12:	f7fe ff45 	bl	8002aa0 <HAL_UART_Transmit>
}
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	08003d20 	.word	0x08003d20

08003c24 <textualProtocolSendNewLine>:

void textualProtocolSendNewLine(TextualProtocol *textualProtocol)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&textualProtocol->huart, (uint8_t *) "\r\n", 2, HAL_MAX_DELAY);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8003c32:	f04f 33ff 	mov.w	r3, #4294967295
 8003c36:	2202      	movs	r2, #2
 8003c38:	4903      	ldr	r1, [pc, #12]	@ (8003c48 <textualProtocolSendNewLine+0x24>)
 8003c3a:	f7fe ff31 	bl	8002aa0 <HAL_UART_Transmit>
}
 8003c3e:	bf00      	nop
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	08003d30 	.word	0x08003d30

08003c4c <textualProtocolDecode>:

void textualProtocolDecode(TextualProtocol *textualProtocol)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
	if (textualProtocol->dataPacket[0] != textualProtocol->starterChar)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	79da      	ldrb	r2, [r3, #7]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d006      	beq.n	8003c6e <textualProtocolDecode+0x22>
	{
		textualProtocolSendSyntaxError(textualProtocol);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7ff ffcb 	bl	8003bfc <textualProtocolSendSyntaxError>
		textualProtocolClear(textualProtocol);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff ffa8 	bl	8003bbc <textualProtocolClear>
		return;
 8003c6c:	e002      	b.n	8003c74 <textualProtocolDecode+0x28>
	}

	textualProtocolClear(textualProtocol);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff ffa4 	bl	8003bbc <textualProtocolClear>
}
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <textualProtocolGetEchoEnable>:



Bool textualProtocolGetEchoEnable(TextualProtocol *textualProtocol)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
	return textualProtocol->enableEcho;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	799b      	ldrb	r3, [r3, #6]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <memset>:
 8003c92:	4402      	add	r2, r0
 8003c94:	4603      	mov	r3, r0
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d100      	bne.n	8003c9c <memset+0xa>
 8003c9a:	4770      	bx	lr
 8003c9c:	f803 1b01 	strb.w	r1, [r3], #1
 8003ca0:	e7f9      	b.n	8003c96 <memset+0x4>
	...

08003ca4 <__libc_init_array>:
 8003ca4:	b570      	push	{r4, r5, r6, lr}
 8003ca6:	4d0d      	ldr	r5, [pc, #52]	@ (8003cdc <__libc_init_array+0x38>)
 8003ca8:	4c0d      	ldr	r4, [pc, #52]	@ (8003ce0 <__libc_init_array+0x3c>)
 8003caa:	1b64      	subs	r4, r4, r5
 8003cac:	10a4      	asrs	r4, r4, #2
 8003cae:	2600      	movs	r6, #0
 8003cb0:	42a6      	cmp	r6, r4
 8003cb2:	d109      	bne.n	8003cc8 <__libc_init_array+0x24>
 8003cb4:	4d0b      	ldr	r5, [pc, #44]	@ (8003ce4 <__libc_init_array+0x40>)
 8003cb6:	4c0c      	ldr	r4, [pc, #48]	@ (8003ce8 <__libc_init_array+0x44>)
 8003cb8:	f000 f826 	bl	8003d08 <_init>
 8003cbc:	1b64      	subs	r4, r4, r5
 8003cbe:	10a4      	asrs	r4, r4, #2
 8003cc0:	2600      	movs	r6, #0
 8003cc2:	42a6      	cmp	r6, r4
 8003cc4:	d105      	bne.n	8003cd2 <__libc_init_array+0x2e>
 8003cc6:	bd70      	pop	{r4, r5, r6, pc}
 8003cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ccc:	4798      	blx	r3
 8003cce:	3601      	adds	r6, #1
 8003cd0:	e7ee      	b.n	8003cb0 <__libc_init_array+0xc>
 8003cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cd6:	4798      	blx	r3
 8003cd8:	3601      	adds	r6, #1
 8003cda:	e7f2      	b.n	8003cc2 <__libc_init_array+0x1e>
 8003cdc:	08003d54 	.word	0x08003d54
 8003ce0:	08003d54 	.word	0x08003d54
 8003ce4:	08003d54 	.word	0x08003d54
 8003ce8:	08003d58 	.word	0x08003d58

08003cec <memcpy>:
 8003cec:	440a      	add	r2, r1
 8003cee:	4291      	cmp	r1, r2
 8003cf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003cf4:	d100      	bne.n	8003cf8 <memcpy+0xc>
 8003cf6:	4770      	bx	lr
 8003cf8:	b510      	push	{r4, lr}
 8003cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d02:	4291      	cmp	r1, r2
 8003d04:	d1f9      	bne.n	8003cfa <memcpy+0xe>
 8003d06:	bd10      	pop	{r4, pc}

08003d08 <_init>:
 8003d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0a:	bf00      	nop
 8003d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d0e:	bc08      	pop	{r3}
 8003d10:	469e      	mov	lr, r3
 8003d12:	4770      	bx	lr

08003d14 <_fini>:
 8003d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d16:	bf00      	nop
 8003d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1a:	bc08      	pop	{r3}
 8003d1c:	469e      	mov	lr, r3
 8003d1e:	4770      	bx	lr
